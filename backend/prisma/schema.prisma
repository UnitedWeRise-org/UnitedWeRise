generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User account and profile information
/// @description Core user model storing account credentials, profile data, and civic engagement information.
/// Supports multiple authentication methods (password, OAuth) and political profile types.
model User {
  /// Unique identifier for the user account
  id                          String                    @id @default(cuid())
  /// User's email address (unique across platform, used for login and communication)
  email                       String                    @unique
  /// Public username for display and mentions (unique, URL-safe)
  username                    String                    @unique
  /// Hashed password (null for OAuth-only accounts using Google/Microsoft/Apple)
  password                    String?
  /// User's first name (optional, for personalization)
  firstName                   String?
  /// User's last name (optional, for personalization)
  lastName                    String?
  /// Avatar image URL (stored in Azure Blob Storage)
  avatar                      String?
  /// User biography/about text (displayed on profile)
  bio                         String?
  /// Personal or campaign website URL
  website                     String?
  /// General location description (not used for geospatial queries)
  location                    String?
  /// Whether user has been verified by platform (blue checkmark)
  verified                    Boolean                   @default(false)
  /// Vector embedding for user profile similarity matching (AI-generated)
  embedding                   Float[]                   @default([])
  /// Account creation timestamp
  createdAt                   DateTime                  @default(now())
  /// Last profile update timestamp (auto-updated by Prisma)
  updatedAt                   DateTime                  @updatedAt
  /// Street address line 1 (used for electoral district mapping and privacy displacement)
  streetAddress               String?
  /// Street address line 2 (apartment, suite, etc.)
  streetAddress2              String?
  /// City name (used with state and zip for district mapping)
  city                        String?
  /// State code (2-letter abbreviation, e.g., "CA", "NY")
  state                       String?
  /// ZIP/postal code (used for electoral district lookup and geographic grouping)
  zipCode                     String?
  /// H3 geospatial index at configured resolution for location-based content discovery
  /// @description Used for feed proximity calculations and local content recommendations.
  /// Privacy displacement may offset from actual address to protect user location.
  h3Index                     String?
  /// Type of political profile (CITIZEN, CANDIDATE, ELECTED_OFFICIAL, POLITICAL_ORG)
  politicalProfileType        PoliticalProfileType      @default(CITIZEN)
  /// Verification status for candidates and elected officials (PENDING, APPROVED, DENIED)
  verificationStatus          VerificationStatus        @default(PENDING)
  /// Array of document URLs submitted for identity/position verification
  verificationDocuments       String[]                  @default([])
  /// Office title for elected officials (e.g., "Mayor", "State Senator")
  office                      String?
  /// Campaign website URL for candidates
  campaignWebsite             String?
  /// Official title for elected officials or organizational representatives
  officialTitle               String?
  /// Term start date for elected officials
  termStart                   DateTime?
  /// Term end date for elected officials
  termEnd                     DateTime?
  /// Whether user's email address has been verified via confirmation link
  emailVerified               Boolean                   @default(false)
  /// Unique token sent in email verification link (expires after use or timeout)
  emailVerifyToken            String?                   @unique
  /// Expiration timestamp for email verification token
  emailVerifyExpiry           DateTime?
  /// User's phone number (optional, for 2FA and notifications)
  phoneNumber                 String?
  /// Whether phone number has been verified via SMS code
  phoneVerified               Boolean                   @default(false)
  /// 6-digit verification code sent via SMS (expires after 10 minutes)
  phoneVerifyCode             String?
  /// Expiration timestamp for phone verification code
  phoneVerifyExpiry           DateTime?
  /// User's marital status (optional profile field)
  maritalStatus               String?
  /// JSON object defining privacy levels for each profile field
  /// @description Structure: { fieldName: "public"|"followers"|"friends"|"private" }
  /// Controls who can view each profile field (bio, city, state, phoneNumber, etc.)
  profilePrivacySettings      Json?                     @default("{\"bio\": \"public\", \"city\": \"followers\", \"state\": \"followers\", \"website\": \"public\", \"phoneNumber\": \"private\", \"maritalStatus\": \"friends\"}")
  /// Password reset token (unique, single-use, expires after 1 hour)
  resetToken                  String?
  /// Expiration timestamp for password reset token
  resetExpiry                 DateTime?
  /// Real-time online status indicator (updated via WebSocket or periodic API calls)
  isOnline                    Boolean                   @default(false)
  /// Last activity timestamp (updated on API requests, used for "last seen" display)
  lastSeenAt                  DateTime                  @default(now())
  /// Whether user has content moderation permissions
  isModerator                 Boolean                   @default(false)
  /// Whether user has admin dashboard access and elevated permissions
  isAdmin                     Boolean                   @default(false)
  /// Whether user has super admin access (system configuration, user management)
  isSuperAdmin                Boolean                   @default(false)
  /// Whether user account is currently suspended (blocks login and content visibility)
  isSuspended                 Boolean                   @default(false)
  /// JSON data collected during onboarding flow (interests, location, preferences)
  onboardingData              Json?
  /// Whether user has completed the onboarding process
  onboardingCompleted         Boolean                   @default(false)
  /// Array of interest tags for content personalization (e.g., ["healthcare", "education"])
  interests                   String[]                  @default([])
  /// JSON object configuring notification delivery preferences
  /// @description Structure: { email: boolean, push: boolean, types: { likes: boolean, comments: boolean, ... } }
  notificationPreferences     Json?
  /// User-chosen display name (may differ from username, used for formal contexts)
  displayName                 String?
  /// Cached count of users this user follows (denormalized for performance)
  followingCount              Int                       @default(0)
  /// Cached count of users following this user (denormalized for performance)
  followersCount              Int                       @default(0)
  /// JSON object containing browser/device fingerprint data for security monitoring
  /// @description Used to detect suspicious login patterns and account sharing
  deviceFingerprint           Json?
  /// Timestamp of user's last successful login
  lastLoginAt                 DateTime?
  /// IP address of user's last successful login (for security monitoring)
  lastLoginIp                 String?
  /// Account lock expiration timestamp (prevents login during brute force protection)
  lockedUntil                 DateTime?
  /// Failed login attempt counter (resets on successful login, triggers lock after threshold)
  loginAttempts               Int                       @default(0)
  /// Timestamp of last password change (used for session invalidation and security checks)
  passwordChangedAt           DateTime?                 @default(now())
  /// Calculated security risk score based on login patterns and behavior (0-100)
  riskScore                   Int                       @default(0)
  /// Counter for suspicious activities (spam, reports, policy violations)
  suspiciousActivityCount     Int                       @default(0)
  /// User's civic engagement reputation score (default 70, range 0-100)
  /// @description Affects content visibility, moderation, and platform privileges
  reputationScore             Int?                      @default(70)
  /// Timestamp of last reputation score recalculation
  reputationUpdatedAt         DateTime?
  /// Whether to restrict photo tagging to friends only (privacy setting)
  allowTagsByFriendsOnly      Boolean                   @default(false)
  /// Whether photo tagging is enabled at all (can disable completely)
  photoTaggingEnabled         Boolean                   @default(true)
  /// Whether user must approve photo tags before they appear (privacy control)
  requireTagApproval          Boolean                   @default(true)
  /// Profile background/banner image URL (stored in Azure Blob Storage)
  backgroundImage             String?
  /// Array of one-time backup codes for 2FA recovery (hashed, 10 codes generated)
  totpBackupCodes             String[]                  @default([])
  /// Whether Time-based One-Time Password (TOTP) 2FA is enabled
  totpEnabled                 Boolean                   @default(false)
  /// Timestamp of last TOTP code usage (for rate limiting and security monitoring)
  totpLastUsedAt              DateTime?
  /// Encrypted TOTP secret key (shared with authenticator app, base32 encoded)
  totpSecret                  String?
  /// Timestamp when TOTP 2FA was first configured
  totpSetupAt                 DateTime?

  // Relationships (CASCADE delete means deleting user deletes these)
  /// Address-to-district mappings verified by this user (moderator/admin action)
  addressMappingVerifications AddressDistrictMapping[]  @relation("AddressMappingVerifications")
  /// Suspension appeals reviewed by this user (moderator/admin role)
  reviewedAppeals             Appeal[]                  @relation("ReviewedAppeals")
  /// Suspension appeals filed by this user (CASCADE: deletes appeals if user deleted)
  appeals                     Appeal[]                  @relation("UserAppeals")
  /// Candidate profile for this user (1:1, optional, only for verified candidates)
  candidateProfile            Candidate?
  /// Admin-candidate messages marked as read by this user
  readAdminMessages           CandidateAdminMessage[]   @relation("ReadAdminMessages")
  /// Admin-candidate messages sent by this user (CASCADE: deletes messages if user deleted)
  sentAdminMessages           CandidateAdminMessage[]   @relation("SentAdminMessages")
  /// Candidate registration applications submitted by this user (CASCADE)
  candidateRegistrations      CandidateRegistration[]
  /// Campaign staff roles assigned to this user
  candidateStaffRoles         CandidateStaff[]
  /// Civic events created by this user (CASCADE: deletes events if user deleted)
  eventsCreated               CivicEvent[]              @relation("EventCreator")
  /// Comments authored by this user (CASCADE: deletes comments if user deleted)
  comments                    Comment[]
  /// Content flags resolved by this moderator user
  resolvedFlags               ContentFlag[]             @relation("ResolvedFlags")
  /// Conversation participations for this user (CASCADE: removes from conversations)
  conversations               ConversationParticipant[]
  /// Votes cast on crowdsourced official data (CASCADE: deletes votes if user deleted)
  crowdsourceVotes            CrowdsourceVote[]         @relation("CrowdsourceVotes")
  /// Crowdsourced official data submitted by this user
  officialSubmissions         CrowdsourcedOfficial[]    @relation("OfficialSubmissions")
  /// Crowdsourced official data verified by this moderator user
  officialVerifications       CrowdsourcedOfficial[]    @relation("OfficialVerifications")
  /// District boundary conflicts reported by this user
  conflictReports             DistrictConflict[]        @relation("ConflictReports")
  /// District boundary conflicts resolved by this moderator user
  conflictResolutions         DistrictConflict[]        @relation("ConflictResolutions")
  /// District office data submitted by this user
  officeSubmissions           DistrictOffice[]          @relation("OfficeSubmissions")
  /// District office data verified by this moderator user
  officeVerifications         DistrictOffice[]          @relation("OfficeVerifications")
  /// Electoral district data submitted by this user
  districtSubmissions         ElectoralDistrict[]       @relation("DistrictSubmissions")
  /// Electoral district data verified by this moderator user
  districtVerifications       ElectoralDistrict[]       @relation("DistrictVerifications")
  /// Candidate endorsements made by this user (CASCADE: deletes endorsements)
  endorsements                Endorsement[]
  /// Event RSVPs by this user (CASCADE: deletes RSVPs if user deleted)
  eventRSVPs                  EventRSVP[]               @relation("EventRSVPs")
  /// Users this user follows (CASCADE: deletes follow relationship)
  following                   Follow[]                  @relation("Follower")
  /// Users following this user (CASCADE: deletes follow relationship)
  followers                   Follow[]                  @relation("Following")
  /// Friend requests received by this user (CASCADE: deletes requests)
  receivedFriendRequests      Friendship[]              @relation("FriendshipRecipient")
  /// Friend requests sent by this user (CASCADE: deletes requests)
  sentFriendRequests          Friendship[]              @relation("FriendshipRequester")
  /// Post likes by this user (CASCADE: deletes likes if user deleted)
  likes                       Like[]
  /// Message-of-the-day dismissals by this user
  dismissedMOTDs              MOTDDismissal[]           @relation("DismissedMOTDs")
  /// MOTD admin actions performed by this user
  motdActions                 MOTDLog[]                 @relation("MOTDActions")
  /// MOTD views by this user
  viewedMOTDs                 MOTDView[]                @relation("ViewedMOTDs")
  /// Direct messages sent by this user (CASCADE: deletes messages)
  sentMessages                Message[]                 @relation("SentMessages")
  /// MOTDs created by this admin user
  createdMOTDs                MessageOfTheDay[]         @relation("CreatedMOTDs")
  /// Moderation actions performed by this moderator user (CASCADE)
  moderationLogs              ModerationLog[]           @relation("ModerationLogs")
  /// Notifications received by this user (CASCADE: deletes notifications)
  receivedNotifications       Notification[]            @relation("NotificationReceiver")
  /// Notifications sent by this user (system-generated or direct)
  sentNotifications           Notification[]            @relation("NotificationSender")
  /// Payments made by this user (NOT cascaded - retained for financial records)
  payments                    Payment[]
  /// Petitions created by this user (CASCADE: deletes petitions)
  petitionsCreated            Petition[]                @relation("PetitionCreator")
  /// Petition signatures by this user (CASCADE: deletes signatures)
  petitionSignatures          PetitionSignature[]       @relation("PetitionSignatures")
  /// Political inquiries submitted by this user (CASCADE: deletes inquiries)
  politicalInquiries          PoliticalInquiry[]        @relation("PoliticalInquiries")
  /// Posts authored by this user (CASCADE: deletes posts and all related content)
  posts                       Post[]
  /// Votes on public Q&A answers (CASCADE: deletes votes)
  publicQAVotes               PublicQAVote[]            @relation("PublicQAVotes")
  /// Reactions (like/dislike/agree/disagree) on posts and comments (CASCADE)
  reactions                   Reaction[]
  /// Reports moderated by this moderator user
  moderatedReports            Report[]                  @relation("ModeratedReports")
  /// Reports filed by this user (CASCADE: deletes reports)
  reports                     Report[]                  @relation("UserReports")
  /// Reputation events affecting this user (CASCADE: deletes history)
  reputationEvents            ReputationEvent[]
  /// Security events logged for this user (NOT cascaded - retained for audit)
  securityEvents              SecurityEvent[]
  /// Post shares by this user (CASCADE: deletes shares)
  shares                      Share[]
  /// Stripe customer record for this user (1:1, NOT cascaded - financial data retained)
  stripeCustomer              StripeCustomer?
  /// Users subscribed to this user's content
  subscribers                 Subscription[]            @relation("Subscribed")
  /// Subscriptions by this user to other users (CASCADE: deletes subscriptions)
  subscriptions               Subscription[]            @relation("Subscriber")
  /// Comments on discussion topics by this user (CASCADE: deletes comments)
  topicComments               TopicComment[]
  /// Activity log entries for this user (CASCADE: deletes activity history)
  activities                  UserActivity[]
  /// OAuth provider connections (Google, Microsoft, Apple) (CASCADE: deletes OAuth links)
  oauthProviders              UserOAuthProvider[]
  /// Suspensions issued by this moderator user
  moderatorSuspensions        UserSuspension[]          @relation("ModeratorSuspensions")
  /// Suspensions applied to this user (CASCADE: deletes suspension records)
  suspensions                 UserSuspension[]          @relation("UserSuspensions")
  /// Warnings issued by this moderator user
  issuedWarnings              UserWarning[]             @relation("IssuedWarnings")
  /// Warnings received by this user (CASCADE: deletes warning records)
  receivedWarnings            UserWarning[]             @relation("ReceivedWarnings")
  /// Quest completion progress for this user (CASCADE: deletes progress)
  questProgress               UserQuestProgress[]
  /// Quest streak tracking for this user (1:1, CASCADE: deletes streak data)
  questStreak                 UserQuestStreak?
  /// Badges earned by this user (CASCADE: deletes badge awards)
  userBadges                  UserBadge[]
  /// Badge claim codes redeemed by this user (CASCADE: deletes claims)
  badgeClaims                 BadgeClaim[]
  /// Photos uploaded by this user (CASCADE: deletes photos and Azure blobs)
  photos                      Photo[]
  /// Posts saved by this user (CASCADE: deletes saved post records)
  savedPosts                  SavedPost[]
  /// Custom feed filters created by this user (CASCADE: deletes filters)
  feedFilters                 FeedFilter[]
  /// Page views by this user (CASCADE: deletes pageview records)
  pageViews                   PageView[]

  @@index([username]) /// Fast lookup for @username mentions and profile pages
  @@index([createdAt]) /// Chronological sorting for admin user lists
  @@index([h3Index]) /// Geospatial queries for local content discovery
  @@index([politicalProfileType]) /// Filtering users by role (citizens vs candidates)
  @@index([zipCode, state]) /// Electoral district lookup and local grouping
}

model UserActivity {
  id           String       @id @default(cuid())
  userId       String
  activityType ActivityType
  targetType   String
  targetId     String
  metadata     Json?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([activityType])
  @@index([targetType, targetId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Subscription {
  id           String   @id @default(cuid())
  subscriberId String
  subscribedId String
  createdAt    DateTime @default(now())
  subscribed   User     @relation("Subscribed", fields: [subscribedId], references: [id], onDelete: Cascade)
  subscriber   User     @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, subscribedId])
  @@index([subscriberId])
  @@index([subscribedId])
}

model Friendship {
  id          String           @id @default(cuid())
  requesterId String
  recipientId String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  acceptedAt  DateTime?
  recipient   User             @relation("FriendshipRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  requester   User             @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)

  @@unique([requesterId, recipientId])
  @@index([requesterId])
  @@index([recipientId])
  @@index([status])
}

/// Post content in the social feed
/// @description User-generated content with engagement tracking, moderation, and AI analysis.
/// Supports text, images, location tagging, and political/civic discussion.
model Post {
  /// Unique post identifier
  id                 String            @id @default(cuid())
  /// Post text content (required, supports markdown-like formatting)
  content            String
  /// Extended content for longer posts (optional, displayed with "Read more")
  extendedContent    String?
  /// Image URL for post media (stored in Azure Blob Storage, optional)
  imageUrl           String?
  /// Author's user ID (foreign key to User)
  authorId           String
  /// Vector embedding for content similarity and AI recommendations
  embedding          Float[]           @default([])
  /// Post creation timestamp
  createdAt          DateTime          @default(now())
  /// Last modification timestamp (auto-updated by Prisma)
  updatedAt          DateTime          @updatedAt
  /// Whether post contains political content (AI-detected or user-flagged)
  isPolitical        Boolean           @default(false)
  /// Hashtags and topic tags (e.g., ["healthcare", "education"])
  tags               String[]          @default([])
  /// Cached count of "like" reactions (denormalized for performance)
  likesCount         Int               @default(0)
  /// Cached count of "dislike" reactions (denormalized)
  dislikesCount      Int               @default(0)
  /// Cached count of "agree" stance reactions (denormalized)
  agreesCount        Int               @default(0)
  /// Cached count of "disagree" stance reactions (denormalized)
  disagreesCount     Int               @default(0)
  /// Cached count of comments (denormalized)
  commentsCount      Int               @default(0)
  /// Cached count of shares (denormalized)
  sharesCount        Int               @default(0)
  /// View/impression count
  viewsCount         Int               @default(0)
  /// Whether post contains citizen feedback/issue report (AI-detected)
  containsFeedback   Boolean?          @default(false)
  /// Category of feedback if detected (e.g., "infrastructure", "public safety")
  feedbackCategory   String?
  /// AI confidence score for feedback detection (0.0-1.0)
  feedbackConfidence Float?
  /// Priority level assigned to feedback ("low", "medium", "high", "urgent")
  feedbackPriority   String?
  /// Feedback processing status ("new", "reviewed", "in_progress", "resolved")
  feedbackStatus     String?           @default("new")
  /// AI-generated summary of the feedback issue
  feedbackSummary    String?
  /// Type of feedback ("complaint", "suggestion", "question", "report")
  feedbackType       String?
  /// Snapshot of author's reputation score at time of post creation
  authorReputation   Int?
  /// Soft delete flag (post hidden but not removed from database)
  isDeleted          Boolean           @default(false)
  /// Timestamp when post was soft-deleted
  deletedAt          DateTime?
  /// Reason for deletion (moderation action, user request, policy violation)
  deletedReason      String?
  /// Whether post appears in search results (can be disabled by moderators)
  searchable         Boolean           @default(true)
  /// Whether post appears in public feeds (can be hidden by moderators)
  feedVisible        Boolean           @default(true)
  /// Number of times post has been edited by author
  editCount          Int               @default(0)
  /// Timestamp of most recent edit
  lastEditedAt       DateTime?
  /// JSON array of previous content versions with timestamps
  /// @description Structure: [{ content: string, editedAt: DateTime, reason?: string }]
  editHistory        Json?
  /// Original post content before any edits (preserved for moderation)
  originalContent    String?
  /// H3 geospatial index for post location (may be privacy-displaced)
  /// @description Used for local feed discovery and proximity-based content
  h3Index            String?
  /// Latitude coordinate (for precise location, may be privacy-displaced)
  latitude           Float?
  /// Longitude coordinate (for precise location, may be privacy-displaced)
  longitude          Float?
  /// Original H3 index before privacy displacement (stored for admin audit)
  originalH3Index    String?
  /// Whether location has been offset for privacy protection
  privacyDisplaced   Boolean           @default(true)

  // Relationships
  /// Comments on this post (CASCADE: deleting post deletes all comments)
  comments           Comment[]
  /// Legacy "like" records (CASCADE: deleting post deletes all likes)
  /// @deprecated Replaced by reactions table, but kept for migration compatibility
  likes              Like[]
  /// Post author relationship (CASCADE: deleting user soft-deletes their posts)
  author             User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  /// Photos attached to this post (CASCADE: deleting post deletes photos)
  photos             Photo[]
  /// Reactions (like/dislike/agree/disagree) on this post (CASCADE)
  reactions          Reaction[]
  /// Reputation events triggered by this post (CASCADE: deletes reputation history)
  reputationEvents   ReputationEvent[]
  /// Shares of this post (CASCADE: deleting post deletes shares)
  shares             Share[]
  /// Topic associations for this post (CASCADE: deletes topic links)
  topics             TopicPost[]
  /// Users who saved this post (CASCADE: deletes saved post records)
  savedBy            SavedPost[]

  @@index([authorId]) /// Fast lookup of all posts by a user
  @@index([createdAt]) /// Chronological feed sorting
  @@index([h3Index]) /// Geospatial queries for local content
  @@index([h3Index, createdAt]) /// Combined index for location-based chronological feeds
  @@index([originalH3Index, createdAt]) /// Admin audit queries with original location
  @@index([likesCount]) /// Sorting by popularity
  @@index([isPolitical]) /// Filtering political vs non-political content
  @@index([containsFeedback, feedbackType, feedbackPriority]) /// Feedback management dashboard queries
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Reaction {
  id        String             @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  sentiment ReactionSentiment?
  stance    ReactionStance?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  comment   Comment?           @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
  @@index([userId])
  @@index([updatedAt])
}

model Share {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  content   String?
  shareType ShareType @default(SIMPLE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

/// Comment on a post
/// @description User-generated replies to posts, supporting nested threading and reactions.
/// Comments can be replied to (nested comments) with depth tracking for UI rendering.
model Comment {
  /// Unique comment identifier
  id              String     @id @default(cuid())
  /// Comment text content
  content         String
  /// Comment author's user ID
  userId          String
  /// Post this comment belongs to (foreign key to Post)
  postId          String
  /// Parent comment ID for threaded replies (null for top-level comments)
  parentId        String?
  /// Nesting depth level (0 = top-level, 1 = first reply, 2 = reply to reply, etc.)
  /// @description Used to limit max nesting depth in UI (typically max 3-5 levels)
  depth           Int        @default(0)
  /// Comment creation timestamp
  createdAt       DateTime   @default(now())
  /// Last modification timestamp (auto-updated by Prisma)
  updatedAt       DateTime   @updatedAt
  /// Soft delete flag (comment hidden but preserved for thread continuity)
  isDeleted       Boolean    @default(false)
  /// Timestamp when comment was soft-deleted
  deletedAt       DateTime?
  /// Whether to display commenter's username (false = anonymous comment)
  showUsername    Boolean    @default(true)
  /// Number of times comment has been edited
  editCount       Int        @default(0)
  /// Timestamp of most recent edit
  lastEditedAt    DateTime?
  /// Original comment content before any edits (preserved for moderation)
  originalContent String?
  /// Cached count of "like" reactions (denormalized for performance)
  likesCount      Int        @default(0)
  /// Cached count of "dislike" reactions (denormalized)
  dislikesCount   Int        @default(0)
  /// Cached count of "agree" stance reactions (denormalized)
  agreesCount     Int        @default(0)
  /// Cached count of "disagree" stance reactions (denormalized)
  disagreesCount  Int        @default(0)

  // Relationships
  /// Parent comment for threaded replies (self-referential)
  parent          Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  /// Child comments (replies) to this comment (self-referential)
  replies         Comment[]  @relation("CommentReplies")
  /// Post this comment belongs to (CASCADE: deleting post deletes all comments)
  post            Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  /// Comment author (CASCADE: deleting user deletes their comments)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Reactions (like/dislike/agree/disagree) on this comment (CASCADE)
  reactions       Reaction[]

  @@index([postId]) /// Fast lookup of all comments on a post
  @@index([userId]) /// Fast lookup of all comments by a user
  @@index([parentId]) /// Fast lookup of replies to a comment
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  senderId   String?
  receiverId String
  postId     String?
  commentId  String?
  message    String
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
  receiver   User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?            @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId, read])
  @@index([createdAt])
  @@index([senderId])
}

model Election {
  id                   String          @id @default(cuid())
  name                 String
  type                 ElectionType
  level                ElectionLevel
  date                 DateTime
  registrationDeadline DateTime?
  state                String
  county               String?
  city                 String?
  district             String?
  isActive             Boolean         @default(true)
  description          String?
  officialUrl          String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  ballotMeasures       BallotMeasure[]
  offices              Office[]

  @@index([state, date])
  @@index([level, date])
}

model Office {
  id           String      @id @default(cuid())
  title        String
  level        OfficeLevel
  description  String?
  state        String
  district     String?
  jurisdiction String?
  termLength   Int?
  salary       Decimal?
  electionId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  candidates   Candidate[]
  election     Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@index([electionId])
  @@index([state, level])
}

model Candidate {
  id                     String                          @id @default(cuid())
  name                   String
  party                  String?
  isIncumbent            Boolean                         @default(false)
  campaignWebsite        String?
  campaignEmail          String?
  campaignPhone          String?
  platformSummary        String?
  keyIssues              String[]                        @default([])
  embedding              Float[]                         @default([])
  isVerified             Boolean                         @default(false)
  isWithdrawn            Boolean                         @default(false)
  withdrawnAt            DateTime?
  withdrawnReason        String?
  userId                 String?                         @unique
  officeId               String
  createdAt              DateTime                        @default(now())
  updatedAt              DateTime                        @updatedAt
  status                 CandidateStatus?                @default(ACTIVE)
  statusChangedAt        DateTime?
  statusChangedBy        String?
  statusReason           String?
  suspendedUntil         DateTime?
  appealDeadline         DateTime?
  appealNotes            String?
  lastVerificationDate   DateTime?
  nextVerificationDue    DateTime?
  verificationStatus     String?                         @default("PENDING_INITIAL")
  thirdPartyVerification Boolean                         @default(false)
  isExternallySourced    Boolean                         @default(false)
  externalSourceId       String?
  dataSource             String?
  lastExternalSync       DateTime?
  externalDataConfidence Float?
  isClaimed              Boolean                         @default(false)
  claimedBy              String?
  claimedAt              DateTime?
  googleCivicId          String?
  fecCandidateId         String?
  ballotpediaId          String?
  externalPhotoUrl       String?
  externalBiography      String?
  externalKeyIssues      String[]                        @default([])
  office                 Office                          @relation(fields: [officeId], references: [id], onDelete: Cascade)
  user                   User?                           @relation(fields: [userId], references: [id])
  adminMessages          CandidateAdminMessage[]
  inbox                  CandidateInbox?
  verificationDocuments  CandidateVerificationDocument[]
  endorsements           Endorsement[]
  financialData          FinancialData?
  policyPositions        PolicyPosition[]
  politicalInquiries     PoliticalInquiry[]
  publicQAs              PublicQA[]

  @@index([officeId])
  @@index([party])
  @@index([userId])
  @@index([statusChangedAt])
  @@index([status])
}

model BallotMeasure {
  id           String            @id @default(cuid())
  title        String
  description  String
  type         BallotMeasureType
  number       String?
  fullText     String?
  fiscalImpact String?
  arguments    Json?
  state        String
  county       String?
  city         String?
  electionId   String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  election     Election          @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@index([electionId])
  @@index([state, type])
}

model FinancialData {
  id                  String    @id @default(cuid())
  candidateId         String    @unique
  totalRaised         Decimal   @default(0)
  totalSpent          Decimal   @default(0)
  cashOnHand          Decimal   @default(0)
  debts               Decimal   @default(0)
  individualDonations Decimal   @default(0)
  pacDonations        Decimal   @default(0)
  selfFunding         Decimal   @default(0)
  publicFunding       Decimal   @default(0)
  reportingPeriod     String?
  lastUpdated         DateTime  @default(now())
  sourceUrl           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  candidate           Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id          String    @id @default(cuid())
  userId      String
  candidateId String
  reason      String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, candidateId])
  @@index([candidateId])
  @@index([userId])
}

model Topic {
  id               String         @id @default(cuid())
  title            String
  description      String?
  embedding        Float[]        @default([])
  argumentsFor     String[]       @default([])
  argumentsAgainst String[]       @default([])
  neutralSummary   String?
  category         String?
  complexityScore  Float          @default(0)
  evidenceQuality  Float          @default(0)
  controversyScore Float          @default(0)
  postCount        Int            @default(0)
  participantCount Int            @default(0)
  viewCount        Int            @default(0)
  trendingScore    Float          @default(0)
  isActive         Boolean        @default(true)
  lastActivityAt   DateTime       @default(now())
  state            String?
  district         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subTopics        SubTopic[]
  topicComments    TopicComment[]
  posts            TopicPost[]

  @@index([trendingScore, lastActivityAt])
  @@index([category, isActive])
  @@index([controversyScore])
  @@index([state, district])
}

model SubTopic {
  id               String         @id @default(cuid())
  parentTopicId    String
  title            String
  summary          String?
  embedding        Float[]        @default([])
  commentCount     Int            @default(0)
  participantCount Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  parentTopic      Topic          @relation(fields: [parentTopicId], references: [id], onDelete: Cascade)
  comments         TopicComment[]

  @@index([parentTopicId])
}

model TopicPost {
  id             String   @id @default(cuid())
  topicId        String
  postId         String
  relevanceScore Float    @default(0.5)
  createdAt      DateTime @default(now())
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic          Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([topicId, postId])
  @@index([topicId, relevanceScore])
  @@index([postId])
}

model TopicComment {
  id               String         @id @default(cuid())
  content          String
  authorId         String
  topicId          String?
  subTopicId       String?
  parentId         String?
  embedding        Float[]        @default([])
  sentiment        Float?
  hostilityScore   Float          @default(0)
  argumentStrength Float          @default(0)
  evidenceLevel    Float          @default(0)
  topicRelevance   Float          @default(0)
  isHidden         Boolean        @default(false)
  hideReason       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent           TopicComment?  @relation("TopicCommentReplies", fields: [parentId], references: [id])
  replies          TopicComment[] @relation("TopicCommentReplies")
  subTopic         SubTopic?      @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  topic            Topic?         @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId, createdAt])
  @@index([subTopicId, createdAt])
  @@index([authorId])
  @@index([parentId])
}

model Conversation {
  id                  String                    @id @default(cuid())
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  lastMessageAt       DateTime?
  lastMessageContent  String?
  lastMessageSenderId String?
  participants        ConversationParticipant[]
  messages            Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  messageType    MessageType  @default(TEXT)
  imageUrl       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
}

model ApiCache {
  id           String   @id @default(cuid())
  provider     String
  cacheKey     String
  responseData Json
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  hitCount     Int      @default(0)

  @@unique([provider, cacheKey])
  @@index([provider, cacheKey])
  @@index([expiresAt])
}

model ExternalOfficial {
  id          String   @id @default(cuid())
  externalId  String
  provider    String
  name        String
  office      String
  district    String?
  party       String?
  contactInfo Json?
  photoUrl    String?
  zipCode     String
  state       String
  h3Index     String?
  lastUpdated DateTime @default(now())

  @@unique([provider, externalId])
  @@index([zipCode, state])
  @@index([h3Index])
}

model Report {
  id                String            @id @default(cuid())
  reporterId        String
  targetType        ReportTargetType
  targetId          String
  reason            ReportReason
  description       String?
  status            ReportStatus      @default(PENDING)
  priority          ReportPriority    @default(LOW)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  moderatedAt       DateTime?
  moderatorId       String?
  moderatorNotes    String?
  actionTaken       ModerationAction?
  reporterDistrict  String?
  candidateDistrict String?
  geographicWeight  Float?            @default(1.0)
  aiAssessmentScore Float?
  aiUrgencyLevel    String?
  aiAnalysisNotes   String?
  aiAssessedAt      DateTime?
  moderator         User?             @relation("ModeratedReports", fields: [moderatorId], references: [id])
  reporter          User              @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status, priority])
  @@index([createdAt])
}

model ContentFlag {
  id          String      @id @default(cuid())
  contentType ContentType
  contentId   String
  flagType    FlagType
  confidence  Float
  source      FlagSource
  details     Json?
  resolved    Boolean     @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime    @default(now())
  resolver    User?       @relation("ResolvedFlags", fields: [resolvedBy], references: [id])

  @@index([contentType, contentId])
  @@index([flagType, resolved])
  @@index([confidence])
  @@index([createdAt])
}

model ModerationLog {
  id          String           @id @default(cuid())
  moderatorId String
  targetType  ReportTargetType
  targetId    String
  action      ModerationAction
  reason      String
  notes       String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  moderator   User             @relation("ModerationLogs", fields: [moderatorId], references: [id], onDelete: Cascade)

  @@index([moderatorId])
  @@index([targetType, targetId])
  @@index([action])
  @@index([createdAt])
}

model UserWarning {
  id             String          @id @default(cuid())
  userId         String
  moderatorId    String
  reason         String
  severity       WarningSeverity
  notes          String?
  acknowledged   Boolean         @default(false)
  acknowledgedAt DateTime?
  expiresAt      DateTime?
  createdAt      DateTime        @default(now())
  moderator      User            @relation("IssuedWarnings", fields: [moderatorId], references: [id], onDelete: Cascade)
  user           User            @relation("ReceivedWarnings", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([severity, expiresAt])
  @@index([createdAt])
}

model UserSuspension {
  id          String         @id @default(cuid())
  userId      String
  moderatorId String
  reason      String
  type        SuspensionType
  startsAt    DateTime       @default(now())
  endsAt      DateTime?
  notes       String?
  appealed    Boolean        @default(false)
  appealedAt  DateTime?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  appeal      Appeal?
  moderator   User           @relation("ModeratorSuspensions", fields: [moderatorId], references: [id], onDelete: Cascade)
  user        User           @relation("UserSuspensions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([endsAt])
  @@index([createdAt])
}

model Appeal {
  id             String         @id @default(cuid())
  userId         String
  suspensionId   String         @unique
  reason         String
  additionalInfo String?
  status         AppealStatus   @default(PENDING)
  reviewNotes    String?
  reviewedBy     String?
  reviewedAt     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviewedByUser User?          @relation("ReviewedAppeals", fields: [reviewedBy], references: [id])
  suspension     UserSuspension @relation(fields: [suspensionId], references: [id], onDelete: Cascade)
  user           User           @relation("UserAppeals", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ElectionCache {
  id          String   @id @default(cuid())
  stateCode   String   @unique
  data        String
  source      String
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([stateCode])
  @@index([lastUpdated])
}

model CandidateInbox {
  id           String           @id @default(cuid())
  candidateId  String           @unique
  isActive     Boolean          @default(true)
  allowPublicQ Boolean          @default(true)
  autoResponse String?
  staffEmails  String[]         @default([])
  categories   String[]         @default([])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  candidate    Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  staffMembers CandidateStaff[]

  @@index([candidateId])
}

model CandidateAdminMessage {
  id          String                  @id @default(cuid())
  candidateId String
  senderId    String?
  isFromAdmin Boolean                 @default(false)
  messageType AdminMessageType        @default(GENERAL)
  priority    AdminMessagePriority    @default(NORMAL)
  subject     String?
  content     String
  attachments String[]                @default([])
  isRead      Boolean                 @default(false)
  readAt      DateTime?
  readBy      String?
  threadId    String?
  replyToId   String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt
  candidate   Candidate               @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  readByUser  User?                   @relation("ReadAdminMessages", fields: [readBy], references: [id])
  replyTo     CandidateAdminMessage?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     CandidateAdminMessage[] @relation("MessageReplies")
  sender      User?                   @relation("SentAdminMessages", fields: [senderId], references: [id])

  @@index([candidateId, createdAt])
  @@index([threadId])
  @@index([isRead, priority])
  @@index([messageType, createdAt])
  @@index([senderId, createdAt])
}

model ElectoralDistrict {
  id                String                   @id @default(cuid())
  name              String
  type              DistrictType
  level             DistrictLevel
  identifier        String
  state             String                   @db.Char(2)
  county            String?
  municipality      String?
  coordinates       Json?
  population        Int?
  isActive          Boolean                  @default(true)
  verificationLevel VerificationLevel        @default(UNVERIFIED)
  submittedBy       String?
  verifiedBy        String?
  verifiedAt        DateTime?
  conflictCount     Int                      @default(0)
  externalId        String?
  dataSource        String?
  parentDistrict    String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  addressMappings   AddressDistrictMapping[]
  conflicts         DistrictConflict[]
  offices           DistrictOffice[]
  parent            ElectoralDistrict?       @relation("DistrictHierarchy", fields: [parentDistrict], references: [id])
  children          ElectoralDistrict[]      @relation("DistrictHierarchy")
  submitter         User?                    @relation("DistrictSubmissions", fields: [submittedBy], references: [id])
  verifier          User?                    @relation("DistrictVerifications", fields: [verifiedBy], references: [id])

  @@unique([identifier, state, type])
  @@index([state, type, level])
  @@index([verificationLevel])
  @@index([isActive, type])
}

model DistrictOffice {
  id                  String                 @id @default(cuid())
  title               String
  level               OfficeLevel
  termLength          Int?
  electionCycle       String?
  nextElection        DateTime?
  salary              Decimal?
  hasTermLimits       Boolean                @default(false)
  maxTerms            Int?
  currentOfficeholder String?
  holderStartDate     DateTime?
  holderEndDate       DateTime?
  holderParty         String?
  holderContactInfo   Json?
  holderPhotoUrl      String?
  verificationLevel   VerificationLevel      @default(UNVERIFIED)
  submittedBy         String?
  verifiedBy          String?
  verifiedAt          DateTime?
  dataSource          String?
  sourceUrl           String?
  lastVerified        DateTime?
  districtId          String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  crowdsourcedData    CrowdsourcedOfficial[]
  district            ElectoralDistrict      @relation(fields: [districtId], references: [id], onDelete: Cascade)
  submitter           User?                  @relation("OfficeSubmissions", fields: [submittedBy], references: [id])
  verifier            User?                  @relation("OfficeVerifications", fields: [verifiedBy], references: [id])

  @@index([districtId])
  @@index([level, nextElection])
  @@index([verificationLevel])
}

model CrowdsourcedOfficial {
  id                 String            @id @default(cuid())
  name               String
  party              String?
  contactInfo        Json?
  photoUrl           String?
  website            String?
  socialMedia        Json?
  biography          String?
  keyAccomplishments String?
  verificationLevel  VerificationLevel @default(UNVERIFIED)
  submittedBy        String
  verifiedBy         String?
  verifiedAt         DateTime?
  sourceType         String
  sourceUrl          String?
  sourceNotes        String?
  upvotes            Int               @default(0)
  downvotes          Int               @default(0)
  reportCount        Int               @default(0)
  officeId           String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  votes              CrowdsourceVote[]
  office             DistrictOffice    @relation(fields: [officeId], references: [id], onDelete: Cascade)
  submitter          User              @relation("OfficialSubmissions", fields: [submittedBy], references: [id])
  verifier           User?             @relation("OfficialVerifications", fields: [verifiedBy], references: [id])

  @@index([officeId])
  @@index([verificationLevel])
  @@index([submittedBy])
}

model AddressDistrictMapping {
  id         String            @id @default(cuid())
  address    String
  lat        Float
  lng        Float
  h3Index    String?
  zipCode    String
  state      String            @db.Char(2)
  confidence Float             @default(0.0)
  source     String
  verifiedBy String?
  verifiedAt DateTime?
  districtId String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  district   ElectoralDistrict @relation(fields: [districtId], references: [id], onDelete: Cascade)
  verifier   User?             @relation("AddressMappingVerifications", fields: [verifiedBy], references: [id])

  @@index([h3Index])
  @@index([zipCode, state])
  @@index([lat, lng])
  @@index([districtId])
}

model DistrictConflict {
  id          String            @id @default(cuid())
  type        ConflictType
  description String
  evidence    Json?
  status      ConflictStatus    @default(OPEN)
  priority    ConflictPriority  @default(MEDIUM)
  resolvedBy  String?
  resolvedAt  DateTime?
  resolution  String?
  reportedBy  String
  districtId  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  district    ElectoralDistrict @relation(fields: [districtId], references: [id], onDelete: Cascade)
  reporter    User              @relation("ConflictReports", fields: [reportedBy], references: [id])
  resolver    User?             @relation("ConflictResolutions", fields: [resolvedBy], references: [id])

  @@index([districtId, status])
  @@index([type, priority])
  @@index([reportedBy])
}

model CrowdsourceVote {
  id         String               @id @default(cuid())
  userId     String
  officialId String
  voteType   VoteType
  reason     String?
  createdAt  DateTime             @default(now())
  official   CrowdsourcedOfficial @relation(fields: [officialId], references: [id], onDelete: Cascade)
  user       User                 @relation("CrowdsourceVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, officialId])
  @@index([officialId, voteType])
  @@index([userId])
}

model Legislature {
  id          String                  @id @default(cuid())
  name        String
  level       LegislatureLevel
  state       String?                 @db.Char(2)
  chamber     Chamber?
  session     String
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  bills       Bill[]
  memberships LegislativeMembership[]
  votes       Vote[]

  @@unique([level, state, session])
  @@index([isActive, level])
}

model LegislativeMembership {
  id            String               @id @default(cuid())
  legislatorId  String
  legislatureId String
  district      String?
  party         String?
  leadership    String?
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean              @default(true)
  bioguideId    String?
  openStatesId  String?
  thomasId      String?
  opensecrets   String?
  votesmartId   String?
  govtrackId    String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  sponsorships  BillSponsorship[]
  legislature   Legislature          @relation(fields: [legislatureId], references: [id], onDelete: Cascade)
  votes         LegislatorVote[]
  votingSummary VotingRecordSummary?

  @@unique([bioguideId, legislatureId])
  @@unique([openStatesId, legislatureId])
  @@index([legislatorId, isActive])
  @@index([legislatureId, district])
  @@index([bioguideId])
}

model Bill {
  id             String            @id @default(cuid())
  externalId     String
  number         String
  title          String
  summary        String?
  fullText       String?
  status         BillStatus        @default(INTRODUCED)
  introducedDate DateTime
  lastActionDate DateTime?
  chamber        Chamber
  level          LegislatureLevel
  state          String?           @db.Char(2)
  subjects       String[]          @default([])
  policyAreas    String[]          @default([])
  embedding      Float[]           @default([])
  dataSource     String
  apiUrl         String?
  lastSynced     DateTime          @default(now())
  legislatureId  String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  legislature    Legislature       @relation(fields: [legislatureId], references: [id], onDelete: Cascade)
  sponsors       BillSponsorship[]
  votes          Vote[]
  newsArticles   NewsArticle[]     @relation("BillToNewsArticle")

  @@unique([externalId, level])
  @@index([number, level, state])
  @@index([status, lastActionDate])
  @@index([subjects])
  @@index([legislatureId])
}

model BillSponsorship {
  id           String                @id @default(cuid())
  billId       String
  membershipId String
  isPrimary    Boolean               @default(false)
  dateSigned   DateTime
  createdAt    DateTime              @default(now())
  bill         Bill                  @relation(fields: [billId], references: [id], onDelete: Cascade)
  membership   LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@unique([billId, membershipId])
  @@index([membershipId, isPrimary])
}

model Vote {
  id               String           @id @default(cuid())
  externalId       String
  number           String
  question         String
  description      String?
  date             DateTime
  chamber          Chamber
  yesCount         Int              @default(0)
  noCount          Int              @default(0)
  presentCount     Int              @default(0)
  notVotingCount   Int              @default(0)
  abstainCount     Int              @default(0)
  passed           Boolean
  requiredMajority String?
  billId           String?
  legislatureId    String
  dataSource       String
  apiUrl           String?
  lastSynced       DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  legislatorVotes  LegislatorVote[]
  bill             Bill?            @relation(fields: [billId], references: [id], onDelete: Cascade)
  legislature      Legislature      @relation(fields: [legislatureId], references: [id], onDelete: Cascade)

  @@unique([externalId, chamber])
  @@index([date, chamber])
  @@index([billId])
  @@index([legislatureId])
}

model LegislatorVote {
  id           String                @id @default(cuid())
  voteId       String
  membershipId String
  position     VotePosition
  createdAt    DateTime              @default(now())
  membership   LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  vote         Vote                  @relation(fields: [voteId], references: [id], onDelete: Cascade)

  @@unique([voteId, membershipId])
  @@index([membershipId, position])
  @@index([voteId])
}

model NewsArticle {
  id                 String            @id @default(cuid())
  title              String
  aiSummary          String?
  url                String            @unique
  publishedAt        DateTime
  sourceName         String
  sourceType         NewsSourceType
  author             String?
  sentiment          ArticleSentiment  @default(NEUTRAL)
  sentimentScore     Float             @default(0.0)
  keywords           String[]          @default([])
  politicalTopics    String[]          @default([])
  embedding          Float[]           @default([])
  relevanceScore     Float             @default(0.0)
  positionKeywords   String[]          @default([])
  contradictionFlags String[]          @default([])
  externalId         String?
  dataSource         String
  lastSynced         DateTime          @default(now())
  cacheExpiry        DateTime?
  isHistorical       Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  mentions           OfficialMention[]
  bills              Bill[]            @relation("BillToNewsArticle")

  @@index([publishedAt, relevanceScore])
  @@index([sentiment, publishedAt])
  @@index([sourceName, publishedAt])
  @@index([isHistorical, publishedAt])
  @@index([politicalTopics, publishedAt])
}

model OfficialMention {
  id              String      @id @default(cuid())
  articleId       String
  officialName    String
  officialId      String?
  districtId      String?
  mentionContext  String?
  sentimentScore  Float?
  prominenceScore Float       @default(0.0)
  firstMention    Int?
  mentionCount    Int         @default(1)
  createdAt       DateTime    @default(now())
  article         NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([officialId, articleId])
  @@index([districtId])
  @@index([officialName])
}

model VotingRecordSummary {
  id                String                @id @default(cuid())
  membershipId      String                @unique
  totalVotes        Int                   @default(0)
  yesVotes          Int                   @default(0)
  noVotes           Int                   @default(0)
  presentVotes      Int                   @default(0)
  notVotingCount    Int                   @default(0)
  abstainVotes      Int                   @default(0)
  participationRate Float                 @default(0.0)
  partyUnityScore   Float?
  bipartisanScore   Float?
  topicVoting       Json?
  periodStart       DateTime
  periodEnd         DateTime
  lastCalculated    DateTime              @default(now())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  membership        LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([membershipId])
  @@index([participationRate])
  @@index([lastCalculated])
}

model CandidateStaff {
  id                String             @id @default(cuid())
  inboxId           String
  userId            String
  role              StaffRole          @default(VOLUNTEER)
  permissions       StaffPermission[]
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  inbox             CandidateInbox     @relation(fields: [inboxId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses         InquiryResponse[]
  assignedInquiries PoliticalInquiry[] @relation("AssignedStaff")

  @@unique([inboxId, userId])
  @@index([userId])
  @@index([inboxId, isActive])
}

model PoliticalInquiry {
  id               String            @id @default(cuid())
  candidateId      String
  inquirerId       String?
  subject          String
  content          String
  category         InquiryCategory   @default(GENERAL)
  priority         InquiryPriority   @default(NORMAL)
  status           InquiryStatus     @default(OPEN)
  isPublic         Boolean           @default(false)
  isAnonymous      Boolean           @default(false)
  contactEmail     String?
  contactName      String?
  policyTopic      String?
  specificQuestion String?
  respondedAt      DateTime?
  assignedAt       DateTime?
  assignedTo       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  responses        InquiryResponse[]
  assignedStaff    CandidateStaff?   @relation("AssignedStaff", fields: [assignedTo], references: [id])
  candidate        Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  inquirer         User?             @relation("PoliticalInquiries", fields: [inquirerId], references: [id])
  publicQASource   PublicQA?         @relation("PublicQASource")

  @@index([candidateId, status])
  @@index([inquirerId])
  @@index([category, priority])
  @@index([isPublic])
  @@index([createdAt])
}

model InquiryResponse {
  id              String           @id @default(cuid())
  inquiryId       String
  responderId     String
  content         String
  responseType    ResponseType     @default(DIRECT)
  isPublic        Boolean          @default(false)
  isFromCandidate Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inquiry         PoliticalInquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  responder       CandidateStaff   @relation(fields: [responderId], references: [id], onDelete: Cascade)

  @@index([inquiryId])
  @@index([responderId])
  @@index([isPublic])
  @@index([createdAt])
}

model PublicQA {
  id              String            @id @default(cuid())
  candidateId     String
  question        String
  answer          String
  category        InquiryCategory   @default(GENERAL)
  isVisible       Boolean           @default(true)
  isPinned        Boolean           @default(false)
  upvotes         Int               @default(0)
  views           Int               @default(0)
  sourceInquiryId String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  candidate       Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  sourceInquiry   PoliticalInquiry? @relation("PublicQASource", fields: [sourceInquiryId], references: [id])
  votes           PublicQAVote[]

  @@index([candidateId, isVisible])
  @@index([category])
  @@index([isPinned, upvotes])
  @@index([createdAt])
}

model PublicQAVote {
  id        String   @id @default(cuid())
  qaId      String
  userId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  qa        PublicQA @relation(fields: [qaId], references: [id], onDelete: Cascade)
  user      User     @relation("PublicQAVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([qaId, userId])
  @@index([qaId])
  @@index([userId])
}

model CandidateVerificationDocument {
  id                String    @id @default(cuid())
  candidateId       String
  documentType      String
  documentUrl       String
  documentName      String
  uploadedAt        DateTime  @default(now())
  verifiedAt        DateTime?
  verifiedBy        String?
  verificationNotes String?
  isValid           Boolean   @default(false)
  expiresAt         DateTime?
  requestedAt       DateTime?
  requestedBy       String?
  candidate         Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@index([candidateId])
  @@index([documentType])
  @@index([verifiedAt])
}

model CandidateRegistration {
  id                        String                      @id @default(cuid())
  userId                    String
  registrationId            String                      @unique
  firstName                 String
  lastName                  String
  email                     String
  phone                     String
  street                    String
  city                      String
  state                     String
  zipCode                   String
  district                  String?
  positionTitle             String
  positionLevel             String
  positionDistrict          String?
  electionDate              DateTime
  campaignName              String
  campaignWebsite           String?
  campaignSlogan            String?
  campaignDescription       String?
  status                    CandidateRegistrationStatus @default(PENDING_VERIFICATION)
  officeLevel               String
  registrationFee           Float
  originalFee               Float
  feeWaiverStatus           String                      @default("none")
  hasFinancialHardship      Boolean                     @default(false)
  hardshipReason            String?
  communityEndorsementCount Int                         @default(0)
  idmeVerified              Boolean                     @default(false)
  idmeUserId                String?
  idmeVerifiedAt            DateTime?
  verifiedFirstName         String?
  verifiedLastName          String?
  verifiedEmail             String?
  paidAt                    DateTime?
  paymentMethod             String?
  paymentIntentId           String?
  verifiedAt                DateTime?
  verifiedBy                String?
  verificationNotes         String?
  rejectedAt                DateTime?
  rejectedBy                String?
  rejectionReason           String?
  refundIssued              Boolean                     @default(false)
  termsAcceptedAt           DateTime
  withdrawnAt               DateTime?
  withdrawalReason          String?
  refundProcessedAt         DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment                   Payment?

  @@index([userId])
  @@index([registrationId])
  @@index([status])
  @@index([officeLevel, state])
  @@index([electionDate])
  @@index([feeWaiverStatus])
  @@index([hasFinancialHardship])
  @@index([createdAt])
}

model SecurityEvent {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  ipAddress String?
  userAgent String?
  details   Json?
  riskScore Int      @default(0)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([riskScore])
}

model ReputationEvent {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  eventType String
  impact    Float
  reason    String?
  details   Json?
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([eventType])
  @@index([createdAt])
}

model Petition {
  id                String              @id @default(cuid())
  title             String
  description       String
  petitionType      PetitionType        @default(PETITION)
  category          IssueCategory
  geographicScope   GeographicScope
  targetOfficials   String[]            @default([])
  signatureGoal     Int
  currentSignatures Int                 @default(0)
  status            PetitionStatus      @default(ACTIVE)
  location          Json?
  createdBy         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  expiresAt         DateTime?
  creator           User                @relation("PetitionCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  signatures        PetitionSignature[]

  @@index([category, geographicScope])
  @@index([status, createdAt])
  @@index([createdBy])
}

model PetitionSignature {
  id         String   @id @default(cuid())
  petitionId String
  userId     String
  signedAt   DateTime @default(now())
  isVerified Boolean  @default(false)
  ipAddress  String?
  petition   Petition @relation(fields: [petitionId], references: [id], onDelete: Cascade)
  user       User     @relation("PetitionSignatures", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([petitionId, userId])
  @@index([petitionId])
  @@index([userId])
}

model CivicEvent {
  id            String        @id @default(cuid())
  title         String
  description   String
  eventType     EventType
  category      EventCategory
  scheduledDate DateTime
  endDate       DateTime?
  timeZone      String?       @default("America/New_York")
  location      Json
  capacity      Int?
  isVirtual     Boolean       @default(false)
  virtualLink   String?
  organizerInfo Json
  requirements  String?
  status        EventStatus   @default(SCHEDULED)
  isPublic      Boolean       @default(true)
  rsvpRequired  Boolean       @default(false)
  currentRSVPs  Int           @default(0)
  createdBy     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  creator       User          @relation("EventCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  rsvps         EventRSVP[]

  @@index([eventType, category])
  @@index([scheduledDate, status])
  @@index([createdBy])
  @@index([location])
}

model EventRSVP {
  id         String     @id @default(cuid())
  eventId    String
  userId     String
  rsvpStatus RSVPStatus @default(ATTENDING)
  rsvpedAt   DateTime   @default(now())
  event      CivicEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User       @relation("EventRSVPs", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model UserOAuthProvider {
  id           String        @id @default(cuid())
  userId       String
  provider     OAuthProvider
  providerId   String
  email        String?
  name         String?
  picture      String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@index([userId])
  @@index([provider, providerId])
}

model Payment {
  id                      String                 @id @default(cuid())
  userId                  String
  amount                  Int
  currency                String                 @default("USD")
  type                    PaymentType
  status                  PaymentStatus          @default(PENDING)
  stripePaymentIntentId   String?                @unique
  stripeChargeId          String?                @unique
  stripeCustomerId        String?
  paymentMethodType       String?
  taxDeductible           Boolean                @default(false)
  taxYear                 Int?
  description             String?
  metadata                Json?
  failureReason           String?
  feeType                 FeeType?
  candidateRegistrationId String?                @unique
  donationType            DonationType?
  campaignId              String?
  isRecurring             Boolean                @default(false)
  recurringInterval       RecurringInterval?
  receiptUrl              String?
  receiptNumber           String?                @unique
  receiptSent             Boolean                @default(false)
  receiptSentAt           DateTime?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  processedAt             DateTime?
  refundedAt              DateTime?
  candidateRegistration   CandidateRegistration? @relation(fields: [candidateRegistrationId], references: [id])
  user                    User                   @relation(fields: [userId], references: [id])
  refunds                 Refund[]

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([stripeCustomerId])
  @@index([createdAt])
}

model StripeCustomer {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  email            String
  name             String?
  phone            String?
  address          Json?
  taxId            String?
  taxExempt        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@index([stripeCustomerId])
}

model DonationCampaign {
  id            String    @id @default(cuid())
  name          String
  description   String?
  goal          Int?
  raised        Int       @default(0)
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  featured      Boolean   @default(false)
  taxDeductible Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([isActive])
  @@index([featured])
}

model Refund {
  id             String       @id @default(cuid())
  paymentId      String
  amount         Int
  reason         RefundReason
  status         RefundStatus @default(PENDING)
  stripeRefundId String?      @unique
  notes          String?
  processedBy    String?
  createdAt      DateTime     @default(now())
  processedAt    DateTime?
  payment        Payment      @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([status])
}

model PaymentWebhook {
  id            String    @id @default(cuid())
  stripeEventId String    @unique
  eventType     String
  processed     Boolean   @default(false)
  payload       Json
  error         String?
  createdAt     DateTime  @default(now())
  processedAt   DateTime?

  @@index([stripeEventId])
  @@index([processed])
}

model UnifiedMessage {
  id             String             @id @default(cuid())
  type           UnifiedMessageType
  senderId       String
  recipientId    String
  content        String
  conversationId String?
  isRead         Boolean            @default(false)
  metadata       Json?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([type])
  @@index([senderId])
  @@index([recipientId])
  @@index([conversationId])
  @@index([createdAt])
  @@index([type, senderId, recipientId])
}

model ConversationMeta {
  id            String             @id @default(cuid())
  type          UnifiedMessageType
  participants  String[]
  lastMessageAt DateTime
  unreadCount   Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([type])
  @@index([participants])
  @@index([lastMessageAt])
}

model PolicyCategory {
  id           String           @id @default(cuid())
  name         String
  description  String?
  icon         String?
  displayOrder Int              @default(0)
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  positions    PolicyPosition[]

  @@index([displayOrder])
  @@index([isActive])
}

model PolicyPosition {
  id                  String             @id @default(cuid())
  candidateId         String
  categoryId          String
  title               String
  summary             String
  content             String
  stance              PolicyStance?
  priority            Int                @default(5)
  evidenceLinks       String[]           @default([])
  keyPoints           String[]           @default([])
  embedding           Float[]            @default([])
  isPublished         Boolean            @default(false)
  publishedAt         DateTime?
  version             Int                @default(1)
  previousVersionId   String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  aiExtractedKeywords String[]           @default([])
  aiExtractedCategory String?
  aiExtractedStance   String?
  aiGeneratedSummary  String?
  aiProcessedAt       DateTime?
  comparisons1        PolicyComparison[] @relation("Position1")
  comparisons2        PolicyComparison[] @relation("Position2")
  candidate           Candidate          @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  category            PolicyCategory     @relation(fields: [categoryId], references: [id])
  previousVersion     PolicyPosition?    @relation("PolicyVersions", fields: [previousVersionId], references: [id])
  versions            PolicyPosition[]   @relation("PolicyVersions")

  @@unique([candidateId, categoryId, version])
  @@index([candidateId])
  @@index([categoryId])
  @@index([isPublished])
  @@index([priority])
}

model PolicyComparison {
  id              String          @id @default(cuid())
  position1Id     String
  position2Id     String
  similarityScore Float
  agreementLevel  AgreementLevel?
  keyDifferences  String[]        @default([])
  analysisNotes   String?
  lastAnalyzed    DateTime        @default(now())
  position1       PolicyPosition  @relation("Position1", fields: [position1Id], references: [id], onDelete: Cascade)
  position2       PolicyPosition  @relation("Position2", fields: [position2Id], references: [id], onDelete: Cascade)

  @@unique([position1Id, position2Id])
  @@index([similarityScore])
}

/// MOTD Priority levels for display prominence
enum MOTDPriority {
  LOW
  MEDIUM
  HIGH
}

/// Target audience for MOTD display
enum MOTDTargetAudience {
  ALL
  NEW
  ACTIVE
  INACTIVE
  ADMINS
  MODERATORS
  CANDIDATES
}

/// Message of the Day model for platform-wide announcements
model MessageOfTheDay {
  id             String              @id @default(cuid())
  title          String?
  content        String
  isActive       Boolean             @default(false)
  priority       MOTDPriority        @default(MEDIUM)
  targetAudience MOTDTargetAudience  @default(ALL)
  isDismissible  Boolean             @default(true)
  showOnce       Boolean             @default(false)
  startDate      DateTime?
  endDate        DateTime?
  showToNewUsers Boolean             @default(true)
  createdById    String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  dismissals     MOTDDismissal[]
  views          MOTDView[]
  createdBy      User                @relation("CreatedMOTDs", fields: [createdById], references: [id])

  @@index([isActive, startDate, endDate])
  @@index([createdAt])
}

model MOTDDismissal {
  id             String          @id @default(cuid())
  motdId         String
  userId         String?
  dismissalToken String?
  dismissedAt    DateTime        @default(now())
  motd           MessageOfTheDay @relation(fields: [motdId], references: [id], onDelete: Cascade)
  user           User?           @relation("DismissedMOTDs", fields: [userId], references: [id])

  @@unique([motdId, userId])
  @@unique([motdId, dismissalToken])
  @@index([userId])
  @@index([dismissalToken])
}

model MOTDView {
  id        String          @id @default(cuid())
  motdId    String
  userId    String?
  viewedAt  DateTime        @default(now())
  ipAddress String?
  userAgent String?
  motd      MessageOfTheDay @relation(fields: [motdId], references: [id], onDelete: Cascade)
  user      User?           @relation("ViewedMOTDs", fields: [userId], references: [id])

  @@index([motdId, viewedAt])
  @@index([userId, viewedAt])
}

model MOTDLog {
  id            String   @id @default(cuid())
  motdId        String
  action        String
  changes       Json?
  performedById String
  performedAt   DateTime @default(now())
  notes         String?
  performedBy   User     @relation("MOTDActions", fields: [performedById], references: [id])

  @@index([motdId, performedAt])
  @@index([performedById])
}

enum ActivityType {
  POST_CREATED
  POST_EDITED
  POST_DELETED
  COMMENT_CREATED
  COMMENT_EDITED
  COMMENT_DELETED
  LIKE_ADDED
  LIKE_REMOVED
  REACTION_CHANGED
  SHARE_ADDED
  SHARE_REMOVED
  FOLLOW_ADDED
  FOLLOW_REMOVED
}

enum ReactionSentiment {
  LIKE
  DISLIKE
}

enum ReactionStance {
  AGREE
  DISAGREE
}

enum ShareType {
  SIMPLE
  QUOTE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  VERIFICATION_APPROVED
  VERIFICATION_DENIED
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  REACTION
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum PoliticalProfileType {
  CITIZEN
  CANDIDATE
  ELECTED_OFFICIAL
  POLITICAL_ORG
}

enum VerificationStatus {
  PENDING
  APPROVED
  DENIED
  NOT_REQUIRED
}

enum ElectionType {
  PRIMARY
  GENERAL
  SPECIAL
  LOCAL
  RUNOFF
}

enum ElectionLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum OfficeLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum BallotMeasureType {
  PROPOSITION
  BOND_MEASURE
  CONSTITUTIONAL_AMENDMENT
  INITIATIVE
  REFERENDUM
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

enum ReportTargetType {
  POST
  COMMENT
  USER
  MESSAGE
  CANDIDATE
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  FAKE_ACCOUNT
  IMPERSONATION
  COPYRIGHT_VIOLATION
  VIOLENCE_THREATS
  SELF_HARM
  ILLEGAL_CONTENT
  FRAUDULENT_CANDIDACY
  EXTREMIST_POSITIONS
  ELECTION_FRAUD
  CAMPAIGN_VIOLATIONS
  OTHER
}

enum ReportStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  DISMISSED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ModerationAction {
  NO_ACTION
  WARNING_ISSUED
  CONTENT_HIDDEN
  CONTENT_DELETED
  USER_WARNED
  USER_SUSPENDED
  USER_BANNED
  APPEAL_APPROVED
  APPEAL_DENIED
}

enum ContentType {
  POST
  COMMENT
  USER_PROFILE
  MESSAGE
  CANDIDATE
}

enum FlagType {
  SPAM
  TOXICITY
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_LANGUAGE
  FAKE_ENGAGEMENT
  DUPLICATE_CONTENT
  SUSPICIOUS_ACTIVITY
  POTENTIAL_BRIGADING
}

enum CandidateStatus {
  ACTIVE
  SUSPENDED
  ENDED
  REVOKED
  BANNED
  WITHDRAWN
}

enum AdminMessageType {
  SUPPORT_REQUEST
  STATUS_INQUIRY
  TECHNICAL_ISSUE
  POLICY_QUESTION
  FEATURE_REQUEST
  APPEAL_MESSAGE
  GENERAL
}

enum AdminMessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum FlagSource {
  AUTOMATED
  USER_REPORT
  MANUAL_REVIEW
}

enum WarningSeverity {
  MINOR
  MODERATE
  MAJOR
  FINAL
}

enum SuspensionType {
  TEMPORARY
  PERMANENT
  POSTING_RESTRICTED
  COMMENTING_RESTRICTED
}

enum AppealStatus {
  PENDING
  APPROVED
  DENIED
}

enum StaffRole {
  CAMPAIGN_MANAGER
  COMMUNICATIONS_DIRECTOR
  POLICY_ADVISOR
  VOLUNTEER_COORDINATOR
  VOLUNTEER
  INTERN
}

enum StaffPermission {
  READ_INQUIRIES
  RESPOND_INQUIRIES
  ASSIGN_INQUIRIES
  MANAGE_STAFF
  MANAGE_SETTINGS
  PUBLISH_QA
  MODERATE_QA
}

enum InquiryCategory {
  GENERAL
  HEALTHCARE
  EDUCATION
  ECONOMY
  ENVIRONMENT
  IMMIGRATION
  FOREIGN_POLICY
  CRIMINAL_JUSTICE
  INFRASTRUCTURE
  HOUSING
  LABOR
  TECHNOLOGY
  CIVIL_RIGHTS
  BUDGET_TAXES
  ENERGY
  AGRICULTURE
  VETERANS
  SENIORS
  YOUTH
  FAMILY_VALUES
  OTHER
}

enum InquiryPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CANDIDATE
  RESOLVED
  CLOSED
  ARCHIVED
}

enum ResponseType {
  DIRECT
  PUBLIC_QA
  POLICY_STATEMENT
  REFERRAL
}

enum VoteType {
  UPVOTE
  DOWNVOTE
  REPORT
}

enum CandidateRegistrationStatus {
  PENDING_VERIFICATION
  PENDING_PAYMENT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  REFUNDED
}

enum DistrictType {
  CONGRESSIONAL
  STATE_SENATE
  STATE_HOUSE
  COUNTY
  MUNICIPAL
  SCHOOL
  WATER
  FIRE
  LIBRARY
  HOSPITAL
  TRANSIT
  CONSERVATION
  JUDICIAL
  TOWNSHIP
  PRECINCT
  OTHER_SPECIAL
}

enum DistrictLevel {
  FEDERAL
  STATE
  COUNTY
  MUNICIPAL
  SPECIAL
  LOCAL
}

enum VerificationLevel {
  UNVERIFIED
  COMMUNITY_VERIFIED
  MODERATOR_VERIFIED
  OFFICIAL_VERIFIED
  DISPUTED
}

enum ConflictType {
  BOUNDARY_DISPUTE
  OFFICE_HOLDER_DISPUTE
  ELECTION_DATE_DISPUTE
  CONTACT_INFO_DISPUTE
  TERM_LENGTH_DISPUTE
  DUPLICATE_ENTRY
  OUTDATED_INFO
}

enum ConflictStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ConflictPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum LegislatureLevel {
  FEDERAL
  STATE
  LOCAL
}

enum Chamber {
  HOUSE
  SENATE
  UNICAMERAL
}

enum VotePosition {
  YEA
  NAY
  PRESENT
  NOT_VOTING
  ABSTAIN
}

enum BillStatus {
  INTRODUCED
  COMMITTEE
  FLOOR_VOTE
  PASSED_CHAMBER
  SENT_TO_OTHER_CHAMBER
  PASSED_BOTH
  SENT_TO_EXECUTIVE
  SIGNED
  VETOED
  BECAME_LAW
  DIED
}

enum NewsSourceType {
  NEWSPAPER
  MAGAZINE
  BLOG
  PRESS_RELEASE
  GOVERNMENT
  SOCIAL_MEDIA
  WIRE_SERVICE
  BROADCAST
}

enum ArticleSentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
  MIXED
}

enum PetitionType {
  PETITION
  REFERENDUM
}

enum IssueCategory {
  HEALTHCARE
  EDUCATION
  ENVIRONMENT
  ECONOMY
  INFRASTRUCTURE
  PUBLIC_SAFETY
  HOUSING
  TRANSPORTATION
  TECHNOLOGY
  CIVIL_RIGHTS
  IMMIGRATION
  ENERGY
  AGRICULTURE
  VETERANS
  SENIORS
  YOUTH
  LABOR
  GOVERNMENT_REFORM
  OTHER
}

enum GeographicScope {
  LOCAL
  COUNTY
  STATE
  NATIONAL
  REGIONAL
}

enum FilterType {
  QUICK_FILTER       // Pre-defined system filters (Today, This Week, etc.)
  CUSTOM             // User-created custom filters
  SMART              // AI-suggested filters based on behavior
}

enum FeedSource {
  DISCOVER           // Global discover feed
  FOLLOWING          // Following feed only
  SAVED              // Saved posts only
  COMBINED           // Mix of multiple sources
}

enum FilterTimeframe {
  LAST_HOUR
  TODAY
  THIS_WEEK
  THIS_MONTH
  THIS_YEAR
  ALL_TIME
  CUSTOM             // Use customStartDate/customEndDate
}

enum FilterSortBy {
  RELEVANCE          // Algorithmic relevance
  RECENT             // Most recent first
  POPULAR            // Most engagement
  TRENDING           // Trending score
  PROXIMITY          // Closest geographically
}

enum SortOrder {
  ASC
  DESC
}

enum PetitionStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CLOSED
  UNDER_REVIEW
}

enum EventType {
  TOWN_HALL
  CANDIDATE_FORUM
  DEBATE
  RALLY
  PROTEST
  MARCH
  VOTER_REGISTRATION
  ISSUE_FORUM
  COMMUNITY_MEETING
  WORKSHOP
  EDUCATIONAL_SEMINAR
  FUNDRAISER
  VOLUNTEER_DRIVE
  PETITION_DRIVE
  PHONE_BANK
  CANVASSING
  OTHER
}

enum EventCategory {
  ELECTORAL
  CIVIC_ENGAGEMENT
  ORGANIZING_ACTIVITIES
  EDUCATIONAL
  ADVOCACY
  FUNDRAISING
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum RSVPStatus {
  ATTENDING
  MAYBE
  NOT_ATTENDING
}

enum OAuthProvider {
  GOOGLE
  MICROSOFT
  APPLE
}

enum PaymentType {
  DONATION
  FEE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIAL_REFUNDED
}

enum FeeType {
  CANDIDATE_REGISTRATION
  VERIFICATION_FEE
  PREMIUM_FEATURES
  EVENT_HOSTING
  ADVERTISING
  OTHER
}

enum DonationType {
  ONE_TIME
  RECURRING
  CAMPAIGN_SPECIFIC
  GENERAL_SUPPORT
  MEMORIAL
  HONOR
}

enum RecurringInterval {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum RefundReason {
  DUPLICATE
  FRAUDULENT
  REQUESTED_BY_CUSTOMER
  CAMPAIGN_CANCELLED
  ERROR
  OTHER
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum UnifiedMessageType {
  USER_USER
  ADMIN_CANDIDATE
  USER_CANDIDATE
}

enum PolicyStance {
  SUPPORT
  OPPOSE
  NEUTRAL
  CONDITIONAL
}

enum AgreementLevel {
  AGREE
  DISAGREE
  PARTIAL
  UNCLEAR
}

/// Civic engagement quest in gamification system
/// @description Defines tasks users can complete to earn points, badges, and reputation.
/// Quests encourage civic participation through daily habits, special events, and educational activities.
model Quest {
  /// Unique quest identifier
  id               String              @id @default(cuid())
  /// Quest type (DAILY_HABIT, WEEKLY_ENGAGEMENT, SPECIAL_EVENT, etc.)
  type             QuestType
  /// Quest category for organization (INFORMATION, PARTICIPATION, COMMUNITY, etc.)
  category         QuestCategory
  /// Quest title shown to users (e.g., "Vote in your district", "Attend town hall")
  title            String
  /// Full quest description with instructions and context
  description      String              @db.Text
  /// Brief summary for quest list views (1-2 sentences)
  shortDescription String?
  /// JSON structure defining completion requirements
  /// @description Example: {"action": "post_comment", "count": 3, "within": "24h"}
  /// Common actions: "post_create", "comment_post", "attend_event", "contact_official", "vote_cast"
  requirements     Json
  /// JSON structure defining rewards on completion
  /// @description Example: {"points": 100, "badge": "badge_id", "reputation": 10}
  /// Always includes points; may include badge IDs and reputation boosts
  rewards          Json
  /// Quest time period (DAILY, WEEKLY, MONTHLY, ONGOING, LIMITED_TIME)
  timeframe        QuestTimeframe
  /// Sort order for display in quest list (lower numbers appear first)
  displayOrder     Int                 @default(0)
  /// Whether quest is currently available for users
  isActive         Boolean             @default(true)
  /// Start date for special event or limited-time quests (null for ongoing quests)
  startDate        DateTime?
  /// End date for limited-time quests (null for ongoing quests)
  endDate          DateTime?
  /// Quest creation timestamp
  createdAt        DateTime            @default(now())
  /// Last modification timestamp (auto-updated by Prisma)
  updatedAt        DateTime            @updatedAt
  /// Admin user ID who created this quest (null for system-generated)
  createdBy        String?

  // Relationships
  /// User progress tracking records for this quest (CASCADE: deletes progress if quest deleted)
  userProgress     UserQuestProgress[]

  @@index([type]) /// Filter quests by type
  @@index([isActive]) /// Show only active quests to users
  @@index([startDate, endDate]) /// Query available quests by date range
}

/// User progress tracking for a specific quest
/// @description Stores current completion state and tracks when quest was started/completed.
/// One record per user per quest (unique constraint).
model UserQuestProgress {
  /// Unique progress record identifier
  id          String    @id @default(cuid())
  /// User ID tracking this quest
  userId      String
  /// Quest ID being tracked
  questId     String
  /// JSON object storing current progress state
  /// @description Example: {"comments_posted": 2, "target": 3, "last_action": "2025-10-20T10:30:00Z"}
  /// Structure varies by quest requirements
  progress    Json
  /// Whether quest has been completed
  completed   Boolean   @default(false)
  /// Timestamp when quest was completed (null if not completed)
  completedAt DateTime?
  /// Timestamp when user started this quest
  startedAt   DateTime  @default(now())
  /// Last progress update timestamp (auto-updated by Prisma)
  updatedAt   DateTime  @updatedAt

  // Relationships
  /// User tracking this quest (CASCADE: deletes progress if user deleted)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Quest being tracked (CASCADE: deletes progress if quest deleted)
  quest       Quest     @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([userId, questId]) /// One progress record per user per quest
  @@index([userId]) /// Fast lookup of all quests a user is tracking
  @@index([questId]) /// Fast lookup of all users tracking a quest (admin analytics)
  @@index([completed]) /// Filter completed vs in-progress quests
}

/// User quest streak tracking
/// @description Tracks user's consecutive quest completion streaks for gamification.
/// Encourages daily/weekly engagement through streak maintenance.
model UserQuestStreak {
  /// Unique streak record identifier
  id                   String    @id @default(cuid())
  /// User ID (1:1 relationship with User)
  userId               String    @unique
  /// Current consecutive days with quest completion
  currentDailyStreak   Int       @default(0)
  /// Longest consecutive daily streak ever achieved
  longestDailyStreak   Int       @default(0)
  /// Current consecutive weeks with quest completion
  currentWeeklyStreak  Int       @default(0)
  /// Longest consecutive weekly streak ever achieved
  longestWeeklyStreak  Int       @default(0)
  /// Date of most recent quest completion (used to calculate streak breaks)
  lastCompletedDate    DateTime?
  /// Total number of quests completed across all time
  totalQuestsCompleted Int       @default(0)
  /// Streak tracking started timestamp
  createdAt            DateTime  @default(now())
  /// Last streak update timestamp (auto-updated by Prisma)
  updatedAt            DateTime  @updatedAt

  // Relationships
  /// User owning this streak record (1:1, CASCADE: deletes streak if user deleted)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) /// Redundant with unique constraint but explicit for queries
}

/// Badge achievement in gamification system
/// @description Defines badge types that users can earn through quest completion or admin award.
/// Badges are displayed on profiles as achievement indicators.
model Badge {
  /// Unique badge identifier
  id                    String      @id @default(cuid())
  /// Badge name (unique, e.g., "First Vote", "Community Leader", "Engagement Champion")
  name                  String      @unique
  /// Badge description explaining how to earn it
  description           String      @db.Text
  /// URL to badge image in Azure Blob Storage (PNG/SVG recommended)
  imageUrl              String
  /// JSON structure defining qualification criteria
  /// @description Example: {"quests_completed": 10, "streak_days": 7, "reputation_min": 80}
  /// For auto-awarded badges: system checks these criteria automatically
  qualificationCriteria Json
  /// Sort order for display in badge gallery (lower numbers appear first)
  displayOrder          Int         @default(0)
  /// Whether badge is currently available for earning
  isActive              Boolean     @default(true)
  /// Whether system automatically awards badge when criteria met
  /// @description False means admin must manually award (for special recognition)
  isAutoAwarded         Boolean     @default(true)
  /// Optional limit on total number of users who can earn this badge (null = unlimited)
  /// @description Used for exclusive badges (e.g., "First 100 Users", "Beta Tester")
  maxAwards             Int?
  /// Badge creation timestamp
  createdAt             DateTime    @default(now())
  /// Last modification timestamp (auto-updated by Prisma)
  updatedAt             DateTime    @updatedAt
  /// Admin user ID who created this badge (null for system-generated)
  createdBy             String?

  // Relationships
  /// User badge awards for this badge (CASCADE: deletes awards if badge deleted)
  userBadges            UserBadge[]
  /// Claim codes for this badge (CASCADE: deletes codes if badge deleted)
  claimCodes            BadgeClaimCode[]

  @@index([isActive]) /// Show only active badges in gallery
  @@index([name]) /// Fast lookup by badge name
}

/// User badge award record
/// @description Tracks badges earned by users, display preferences, and award context.
/// One record per user per badge (unique constraint).
model UserBadge {
  /// Unique award record identifier
  id           String   @id @default(cuid())
  /// User ID who earned the badge
  userId       String
  /// Badge ID that was earned
  badgeId      String
  /// Timestamp when badge was earned
  earnedAt     DateTime @default(now())
  /// Whether user chose to display this badge on their profile
  isDisplayed  Boolean  @default(false)
  /// User's custom ordering for displayed badges on profile (1 = first position)
  displayOrder Int?
  /// Admin user ID if badge was manually awarded (null for auto-awarded)
  awardedBy    String?
  /// Optional reason/note for manual awards (e.g., "Outstanding community leadership")
  awardReason  String?

  // Relationships
  /// User who earned this badge (CASCADE: deletes award if user deleted)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Badge that was earned (CASCADE: deletes award if badge deleted)
  badge        Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId]) /// One award per user per badge (no duplicates)
  @@index([userId]) /// Fast lookup of all badges earned by user
  @@index([badgeId]) /// Fast lookup of all users who earned a badge (admin analytics)
  @@index([isDisplayed]) /// Query displayed badges for profile rendering
}

/// Badge claim code for claimable badge distribution
/// @description Supports both shared codes (one code, many users) and individual unique codes
model BadgeClaimCode {
  /// Unique claim code record identifier
  id            String    @id @default(cuid())
  /// Claim code string (e.g., "KICKSTARTER2025" or "XJ3K-9PL2-QW8R")
  code          String    @unique
  /// Badge ID this code awards
  badgeId       String
  /// Code type: SHARED (one code, multiple claims) or INDIVIDUAL (one-time use)
  type          ClaimCodeType

  /// Maximum number of claims allowed (null = unlimited, typically used with SHARED codes)
  maxClaims     Int?
  /// Optional expiration timestamp (null = never expires)
  expiresAt     DateTime?

  /// Number of times this code has been claimed
  claimsUsed    Int       @default(0)
  /// Whether code is currently active (false = deactivated by admin)
  isActive      Boolean   @default(true)
  /// Admin user ID who created this code
  createdBy     String
  /// Code creation timestamp
  createdAt     DateTime  @default(now())

  // Relationships
  /// Badge awarded by this code (CASCADE: deletes codes if badge deleted)
  badge         Badge     @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  /// Individual claims made with this code
  claims        BadgeClaim[]

  @@index([code]) /// Fast lookup by claim code
  @@index([badgeId]) /// Admin analytics: all codes for a badge
  @@index([isActive]) /// Query only active codes
}

/// Individual claim record when user redeems a badge code
/// @description Tracks who claimed what code and when, prevents duplicate claims
model BadgeClaim {
  /// Unique claim record identifier
  id          String    @id @default(cuid())
  /// Claim code ID that was used
  claimCodeId String
  /// User ID who claimed the code
  userId      String
  /// Timestamp when code was claimed
  claimedAt   DateTime  @default(now())

  // Relationships
  /// Claim code that was used (CASCADE: deletes claims if code deleted)
  claimCode   BadgeClaimCode @relation(fields: [claimCodeId], references: [id], onDelete: Cascade)
  /// User who claimed the code (CASCADE: deletes claim if user deleted)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([claimCodeId, userId]) /// User can't claim same code twice
  @@index([userId]) /// Fast lookup of all codes claimed by user
  @@index([claimCodeId]) /// Analytics: all claims for a code
}

/// Claim code type enum
enum ClaimCodeType {
  SHARED      /// One code, multiple users can claim (e.g., "CONVENTION2025" for all attendees)
  INDIVIDUAL  /// Unique code, single-use only (e.g., individual backer codes)
}

enum QuestType {
  DAILY_HABIT
  DAILY_CIVIC
  WEEKLY_ENGAGEMENT
  MONTHLY_CONSISTENCY
  SPECIAL_EVENT
  CIVIC_ACTION
  EDUCATIONAL
  SOCIAL_ENGAGEMENT
}

enum QuestCategory {
  INFORMATION
  PARTICIPATION
  COMMUNITY
  ADVOCACY
  EDUCATION
  SOCIAL
}

enum QuestTimeframe {
  DAILY
  WEEKLY
  MONTHLY
  ONGOING
  LIMITED_TIME
}

/// Photo upload record
/// @description Tracks uploaded images with Azure Blob Storage, AI moderation, and EXIF processing.
/// Photos can be avatars, gallery images, or post attachments.
model Photo {
  /// Unique photo identifier (UUID format)
  id                String    @id @default(uuid())
  /// User ID who uploaded the photo
  userId            String
  /// Optional post ID if photo attached to post (null for avatars/gallery)
  postId            String?
  /// Public URL to access the photo (Azure Blob Storage CDN)
  url               String
  /// Blob storage identifier for file management and deletion
  blobName          String
  /// Processed MIME type (e.g., "image/jpeg", "image/png", "image/webp")
  mimeType          String
  /// Original uploaded MIME type before processing
  originalMimeType  String
  /// Original file size in bytes before processing
  originalSize      Int
  /// Processed file size in bytes after optimization
  processedSize     Int
  /// Image width in pixels (null if processing failed)
  width             Int?
  /// Image height in pixels (null if processing failed)
  height            Int?
  /// AI moderation decision ('APPROVE', 'WARN', 'BLOCK')
  /// @description APPROVE = safe content, WARN = sensitive but allowed, BLOCK = prohibited
  moderationStatus  String
  /// Reason for moderation action (e.g., "adult content", "violence", "safe")
  moderationReason  String?
  /// AI confidence score for moderation decision (0.0-1.0)
  moderationConfidence Float?
  /// Type of content detected by moderation AI (e.g., "racy", "adult", "violence")
  moderationType    String?
  /// Whether EXIF metadata was stripped for privacy (always true for user protection)
  exifStripped      Boolean   @default(true)
  /// Photo upload timestamp
  uploadedAt        DateTime  @default(now())
  /// Soft delete timestamp (null if active, set when photo deleted)
  deletedAt         DateTime?
  /// Photo usage category ('AVATAR', 'GALLERY', 'POST_MEDIA')
  photoType         String?
  /// Optional gallery name for photo organization (user-defined collections)
  gallery           String?
  /// User-provided photo caption/description
  caption           String?
  /// URL to optimized thumbnail version (smaller size for previews)
  thumbnailUrl      String?
  /// Whether photo is active and visible (false if moderation blocked or user deleted)
  isActive          Boolean   @default(true)

  // Relationships
  /// User who uploaded this photo (CASCADE: deletes photo and blob if user deleted)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Post this photo is attached to if applicable (CASCADE: deletes photo if post deleted)
  post              Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId]) /// Fast lookup of all photos by user
  @@index([postId]) /// Fast lookup of photos attached to post
  @@index([uploadedAt]) /// Chronological sorting of gallery
  @@index([moderationStatus]) /// Admin moderation queue filtering
}

/// Saved post record (user bookmarks)
/// @description Tracks posts users save for later viewing ("bookmark" or "save for later" feature).
/// One record per user per post (unique constraint).
model SavedPost {
  /// Unique saved post record identifier (UUID format)
  id        String   @id @default(uuid())
  /// User ID who saved the post
  userId    String
  /// Post ID that was saved
  postId    String
  /// Timestamp when post was saved
  savedAt   DateTime @default(now())

  // Relationships
  /// User who saved this post (CASCADE: deletes save record if user deleted)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Post that was saved (CASCADE: deletes save record if post deleted)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) /// One save record per user per post (no duplicate saves)
  @@index([userId]) /// Fast lookup of all posts saved by user
  @@index([postId]) /// Fast lookup of all users who saved a post
  @@index([savedAt]) /// Chronological sorting of saved posts
}

model FeedFilter {
  id                String              @id @default(uuid())
  userId            String
  name              String              // User-defined name, e.g. "Local Politics"
  filterType        FilterType          @default(CUSTOM)

  // Feed Source
  feedSource        FeedSource          @default(DISCOVER) // DISCOVER, FOLLOWING, SAVED

  // Content Filters
  isPolitical       Boolean?            // null = both, true = political only, false = non-political only
  tags              String[]            @default([])        // Filter by tags

  // Geographic Filters
  geographicScope   GeographicScope?    // LOCAL, COUNTY, STATE, NATIONAL, null = all
  h3Resolution      Int?                // H3 resolution for proximity (null = use user's location)
  centerLat         Float?              // Custom center point
  centerLng         Float?
  radiusMiles       Float?              // Proximity radius

  // Author Filters
  authorTypes       PoliticalProfileType[] @default([]) // CITIZEN, CANDIDATE, ELECTED_OFFICIAL, etc.
  authorIds         String[]            @default([])    // Specific users to include/exclude
  excludeAuthorIds  String[]            @default([])

  // Topic & Category Filters
  topicIds          String[]            @default([])    // Filter by topics
  categories        IssueCategory[]     @default([])    // HEALTHCARE, EDUCATION, etc.

  // Engagement Filters
  minLikes          Int?                // Minimum engagement thresholds
  minComments       Int?
  minShares         Int?

  // Time Filters
  timeframe         FilterTimeframe     @default(ALL_TIME)
  customStartDate   DateTime?           // For custom timeframe
  customEndDate     DateTime?

  // Sort & Display
  sortBy            FilterSortBy        @default(RELEVANCE)
  sortOrder         SortOrder           @default(DESC)

  // User Preferences
  isDefault         Boolean             @default(false)  // User's default filter
  isPinned          Boolean             @default(false)  // Show in quick access
  displayOrder      Int                 @default(0)      // Order in user's filter list

  // Metadata
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lastUsedAt        DateTime?
  useCount          Int                 @default(0)

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId, isPinned])
  @@index([userId, isDefault])
  @@index([userId, lastUsedAt])
}

// ============================================================================
// VISITOR ANALYTICS MODELS
// ============================================================================
// Models for tracking site visitors, pageviews, and conversion metrics.
// Privacy-conscious: IP addresses are hashed with rotating salts, raw IPs never stored.
// Auto-cleanup: PageView records deleted after 30 days, aggregated into DailyVisitStats.
// ============================================================================

/// Individual page view tracking record
/// @description Logs each page view with privacy-preserving IP hash and bot detection.
/// Auto-deleted after DATA_RETENTION_DAYS (default 30) to minimize storage and comply with GDPR.
model PageView {
  /// Unique identifier for this page view
  id                String    @id @default(cuid())
  /// Page path visited (e.g., "/", "/profile", "/post/123")
  path              String
  /// SHA256 hash of IP address + daily rotating salt (prevents cross-day tracking)
  ipHash            String
  /// Browser User-Agent string for bot detection and device analytics
  userAgent         String
  /// Referrer URL (where visitor came from)
  referrer          String?
  /// Associated user ID if visitor is authenticated (null for anonymous)
  userId            String?
  /// Whether this pageview was identified as bot traffic
  isBot             Boolean   @default(false)
  /// Whether this visit shows suspicious activity patterns (>500 views/day, rapid requests)
  isSuspicious      Boolean   @default(false)
  /// Timestamp of page view
  createdAt         DateTime  @default(now())
  /// Session duration in seconds (calculated on next pageview or session end)
  sessionDuration   Int?

  /// Relation to User model (null for anonymous visitors)
  user              User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([ipHash, createdAt])
  @@index([path, createdAt])
  @@index([userId, createdAt])
  @@index([createdAt])
  @@index([isBot])
  @@index([isSuspicious])
}

/// Daily aggregated visitor statistics
/// @description Permanent rollup of daily analytics. PageView records are deleted after retention period,
/// but this table preserves historical trends indefinitely without storing PII.
model DailyVisitStats {
  /// Unique identifier for this daily stat record
  id                      String   @id @default(cuid())
  /// Date for this stat record (YYYY-MM-DD)
  date                    DateTime @unique
  /// Count of unique visitors (distinct IP hashes)
  uniqueVisitors          Int      @default(0)
  /// Total pageviews for the day
  totalPageviews          Int      @default(0)
  /// Pageviews from authenticated users
  authenticatedVisits     Int      @default(0)
  /// Pageviews from anonymous visitors
  anonymousVisits         Int      @default(0)
  /// Pageviews identified as bot traffic
  botVisits               Int      @default(0)
  /// Number of new user signups on this day
  signupsCount            Int      @default(0)
  /// Number of unique IPs flagged as suspicious
  suspiciousActivityCount Int      @default(0)
  /// JSON object storing popular pages with view counts
  /// Format: { "/": 1234, "/profile": 567, ... }
  popularPages            Json?
  /// Average session duration in seconds
  avgSessionDuration      Float?
  /// Timestamp when this record was created/updated
  updatedAt               DateTime @updatedAt

  @@index([date])
}

/// IP-based rate limiting tracker
/// @description Tracks request counts per IP hash to enforce rate limits and detect abuse.
/// Records auto-expire after 24 hours or when block expires.
model IPRateLimit {
  /// Unique identifier for this rate limit record
  id             String    @id @default(cuid())
  /// SHA256 hash of IP address + daily rotating salt
  ipHash         String
  /// Number of requests in current time window
  requestCount   Int       @default(0)
  /// Timestamp of most recent request
  lastRequest    DateTime  @default(now())
  /// If blocked, timestamp when block expires (null if not blocked)
  blockedUntil   DateTime?
  /// Reason for block if applicable
  blockReason    String?
  /// Timestamp when this record was created
  createdAt      DateTime  @default(now())

  @@unique([ipHash])
  @@index([ipHash, lastRequest])
  @@index([blockedUntil])
}

/// Analytics system configuration
/// @description Stores configurable thresholds and settings for analytics system.
/// Single-row table (id always "default") for easy access.
model AnalyticsConfig {
  /// Fixed ID for singleton pattern
  id                    String   @id @default("default")
  /// Maximum requests per hour per IP before rate limiting
  rateLimitPerHour      Int      @default(100)
  /// Number of days to retain PageView records before auto-deletion
  dataRetentionDays     Int      @default(30)
  /// Number of pageviews per day to flag as suspicious
  suspiciousThreshold   Int      @default(500)
  /// Duration in hours to block IPs that violate rate limits
  blockDurationHours    Int      @default(24)
  /// Current daily salt for IP hashing (rotates at midnight UTC)
  currentDailySalt      String   @default(cuid())
  /// Timestamp of last salt rotation
  lastSaltRotation      DateTime @default(now())
  /// Whether visitor tracking is enabled
  trackingEnabled       Boolean  @default(true)
  /// Last configuration update timestamp
  updatedAt             DateTime @updatedAt
}
