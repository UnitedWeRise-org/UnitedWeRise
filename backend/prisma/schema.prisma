generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  username                String                    @unique
  password                String
  firstName               String?
  lastName                String?
  avatar                  String?
  bio                     String?
  website                 String?
  location                String?
  verified                Boolean                   @default(false)
  embedding               Float[]                   @default([])
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  streetAddress           String?
  city                    String?
  state                   String?
  zipCode                 String?
  h3Index                 String?
  politicalProfileType    PoliticalProfileType      @default(CITIZEN)
  verificationStatus      VerificationStatus        @default(PENDING)
  verificationDocuments   String[]                  @default([])
  politicalParty          String?
  office                  String?
  campaignWebsite         String?
  officialTitle           String?
  termStart               DateTime?
  termEnd                 DateTime?
  emailVerified           Boolean                   @default(false)
  emailVerifyToken        String?                   @unique
  emailVerifyExpiry       DateTime?
  phoneNumber             String?
  phoneVerified           Boolean                   @default(false)
  phoneVerifyCode         String?
  phoneVerifyExpiry       DateTime?
  resetToken              String?
  resetExpiry             DateTime?
  isOnline                Boolean                   @default(false)
  lastSeenAt              DateTime                  @default(now())
  isModerator             Boolean                   @default(false)
  isAdmin                 Boolean                   @default(false)
  isSuspended             Boolean                   @default(false)
  onboardingData          Json?
  onboardingCompleted     Boolean                   @default(false)
  interests               String[]                  @default([])
  politicalExperience     String?
  notificationPreferences Json?
  displayName             String?
  followingCount          Int                       @default(0)
  followersCount          Int                       @default(0)
  deviceFingerprint       Json?
  riskScore               Int                       @default(0)
  reviewedAppeals         Appeal[]                  @relation("ReviewedAppeals")
  appeals                 Appeal[]                  @relation("UserAppeals")
  candidateProfile        Candidate?
  candidateRegistrations  CandidateRegistration[]
  candidateStaffRoles     CandidateStaff[]
  comments                Comment[]
  resolvedFlags           ContentFlag[]             @relation("ResolvedFlags")
  conversations           ConversationParticipant[]
  endorsements            Endorsement[]
  following               Follow[]                  @relation("Follower")
  followers               Follow[]                  @relation("Following")
  likes                   Like[]
  sentMessages            Message[]                 @relation("SentMessages")
  moderationLogs          ModerationLog[]           @relation("ModerationLogs")
  receivedNotifications   Notification[]            @relation("NotificationReceiver")
  sentNotifications       Notification[]            @relation("NotificationSender")
  flaggedPhotos           Photo[]                   @relation("FlaggedPhotos")
  photos                  Photo[]
  politicalInquiries      PoliticalInquiry[]        @relation("PoliticalInquiries")
  posts                   Post[]
  publicQAVotes           PublicQAVote[]            @relation("PublicQAVotes")
  moderatedReports        Report[]                  @relation("ModeratedReports")
  reports                 Report[]                  @relation("UserReports")
  topicComments           TopicComment[]
  moderatorSuspensions    UserSuspension[]          @relation("ModeratorSuspensions")
  suspensions             UserSuspension[]          @relation("UserSuspensions")
  issuedWarnings          UserWarning[]             @relation("IssuedWarnings")
  receivedWarnings        UserWarning[]             @relation("ReceivedWarnings")
  securityEvents          SecurityEvent[]
  
  // Security tracking fields
  lastLoginAt             DateTime?
  lastLoginIp             String?
  loginAttempts           Int                       @default(0)
  lockedUntil             DateTime?
  passwordChangedAt       DateTime?                 @default(now())
  suspiciousActivityCount Int                       @default(0)

  @@index([username])
  @@index([createdAt])
  @@index([h3Index])
  @@index([politicalProfileType])
  @@index([zipCode, state])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id                 String      @id @default(cuid())
  content            String
  imageUrl           String?
  authorId           String
  embedding          Float[]     @default([])
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  isPolitical        Boolean     @default(false)
  tags               String[]    @default([])
  likesCount         Int         @default(0)
  commentsCount      Int         @default(0)
  // AI Feedback Detection Fields
  containsFeedback   Boolean?    @default(false)
  feedbackType       String?
  feedbackCategory   String?
  feedbackPriority   String?
  feedbackConfidence Float?
  feedbackSummary    String?
  feedbackStatus     String?     @default("new")
  comments           Comment[]
  likes              Like[]
  author             User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  topics             TopicPost[]

  @@index([authorId])
  @@index([createdAt])
  @@index([likesCount])
  @@index([isPolitical])
  @@index([containsFeedback, feedbackType, feedbackPriority])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  senderId   String?
  receiverId String
  postId     String?
  commentId  String?
  message    String
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
  receiver   User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?            @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId, read])
  @@index([createdAt])
}

model Election {
  id                   String          @id @default(cuid())
  name                 String
  type                 ElectionType
  level                ElectionLevel
  date                 DateTime
  registrationDeadline DateTime?
  state                String
  county               String?
  city                 String?
  district             String?
  isActive             Boolean         @default(true)
  description          String?
  officialUrl          String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  ballotMeasures       BallotMeasure[]
  offices              Office[]

  @@index([state, date])
  @@index([level, date])
}

model Office {
  id           String      @id @default(cuid())
  title        String
  level        OfficeLevel
  description  String?
  state        String
  district     String?
  jurisdiction String?
  termLength   Int?
  salary       Decimal?
  electionId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  candidates   Candidate[]
  election     Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@index([electionId])
  @@index([state, level])
}

model Candidate {
  id                 String             @id @default(cuid())
  name               String
  party              String?
  isIncumbent        Boolean            @default(false)
  campaignWebsite    String?
  campaignEmail      String?
  campaignPhone      String?
  platformSummary    String?
  keyIssues          String[]           @default([])
  embedding          Float[]            @default([])
  isVerified         Boolean            @default(false)
  isWithdrawn        Boolean            @default(false)
  withdrawnAt        DateTime?
  withdrawnReason    String?
  userId             String?            @unique
  officeId           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  office             Office             @relation(fields: [officeId], references: [id], onDelete: Cascade)
  user               User?              @relation(fields: [userId], references: [id])
  inbox              CandidateInbox?
  endorsements       Endorsement[]
  financialData      FinancialData?
  photos             Photo[]
  politicalInquiries PoliticalInquiry[]
  publicQAs          PublicQA[]

  @@index([officeId])
  @@index([party])
  @@index([userId])
}

model BallotMeasure {
  id           String            @id @default(cuid())
  title        String
  description  String
  type         BallotMeasureType
  number       String?
  fullText     String?
  fiscalImpact String?
  arguments    Json?
  state        String
  county       String?
  city         String?
  electionId   String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  election     Election          @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@index([electionId])
  @@index([state, type])
}

model FinancialData {
  id                  String    @id @default(cuid())
  candidateId         String    @unique
  totalRaised         Decimal   @default(0)
  totalSpent          Decimal   @default(0)
  cashOnHand          Decimal   @default(0)
  debts               Decimal   @default(0)
  individualDonations Decimal   @default(0)
  pacDonations        Decimal   @default(0)
  selfFunding         Decimal   @default(0)
  publicFunding       Decimal   @default(0)
  reportingPeriod     String?
  lastUpdated         DateTime  @default(now())
  sourceUrl           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  candidate           Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id          String    @id @default(cuid())
  userId      String
  candidateId String
  reason      String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, candidateId])
  @@index([candidateId])
  @@index([userId])
}

model Topic {
  id               String         @id @default(cuid())
  title            String
  description      String?
  embedding        Float[]        @default([])
  argumentsFor     String[]       @default([])
  argumentsAgainst String[]       @default([])
  neutralSummary   String?
  category         String?
  complexityScore  Float          @default(0)
  evidenceQuality  Float          @default(0)
  controversyScore Float          @default(0)
  postCount        Int            @default(0)
  participantCount Int            @default(0)
  viewCount        Int            @default(0)
  trendingScore    Float          @default(0)
  isActive         Boolean        @default(true)
  lastActivityAt   DateTime       @default(now())
  state            String?
  district         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subTopics        SubTopic[]
  topicComments    TopicComment[]
  posts            TopicPost[]

  @@index([trendingScore, lastActivityAt])
  @@index([category, isActive])
  @@index([controversyScore])
  @@index([state, district])
}

model SubTopic {
  id               String         @id @default(cuid())
  parentTopicId    String
  title            String
  summary          String?
  embedding        Float[]        @default([])
  commentCount     Int            @default(0)
  participantCount Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  parentTopic      Topic          @relation(fields: [parentTopicId], references: [id], onDelete: Cascade)
  comments         TopicComment[]

  @@index([parentTopicId])
}

model TopicPost {
  id             String   @id @default(cuid())
  topicId        String
  postId         String
  relevanceScore Float    @default(0.5)
  createdAt      DateTime @default(now())
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic          Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([topicId, postId])
  @@index([topicId, relevanceScore])
}

model TopicComment {
  id               String         @id @default(cuid())
  content          String
  authorId         String
  topicId          String?
  subTopicId       String?
  parentId         String?
  embedding        Float[]        @default([])
  sentiment        Float?
  hostilityScore   Float          @default(0)
  argumentStrength Float          @default(0)
  evidenceLevel    Float          @default(0)
  topicRelevance   Float          @default(0)
  isHidden         Boolean        @default(false)
  hideReason       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent           TopicComment?  @relation("TopicCommentReplies", fields: [parentId], references: [id])
  replies          TopicComment[] @relation("TopicCommentReplies")
  subTopic         SubTopic?      @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  topic            Topic?         @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId, createdAt])
  @@index([subTopicId, createdAt])
  @@index([authorId])
  @@index([parentId])
}

model Conversation {
  id                  String                    @id @default(cuid())
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  lastMessageAt       DateTime?
  lastMessageContent  String?
  lastMessageSenderId String?
  participants        ConversationParticipant[]
  messages            Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  messageType    MessageType  @default(TEXT)
  imageUrl       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
}

model ApiCache {
  id           String   @id @default(cuid())
  provider     String
  cacheKey     String
  responseData Json
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  hitCount     Int      @default(0)

  @@unique([provider, cacheKey])
  @@index([provider, cacheKey])
  @@index([expiresAt])
}

model ExternalOfficial {
  id          String   @id @default(cuid())
  externalId  String
  provider    String
  name        String
  office      String
  district    String?
  party       String?
  contactInfo Json?
  photoUrl    String?
  zipCode     String
  state       String
  h3Index     String?
  lastUpdated DateTime @default(now())

  @@unique([provider, externalId])
  @@index([zipCode, state])
  @@index([h3Index])
}

model Report {
  id             String            @id @default(cuid())
  reporterId     String
  targetType     ReportTargetType
  targetId       String
  reason         ReportReason
  description    String?
  status         ReportStatus      @default(PENDING)
  priority       ReportPriority    @default(LOW)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  moderatedAt    DateTime?
  moderatorId    String?
  moderatorNotes String?
  actionTaken    ModerationAction?
  moderator      User?             @relation("ModeratedReports", fields: [moderatorId], references: [id])
  reporter       User              @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status, priority])
  @@index([createdAt])
}

model ContentFlag {
  id          String      @id @default(cuid())
  contentType ContentType
  contentId   String
  flagType    FlagType
  confidence  Float
  source      FlagSource
  details     Json?
  resolved    Boolean     @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime    @default(now())
  resolver    User?       @relation("ResolvedFlags", fields: [resolvedBy], references: [id])

  @@index([contentType, contentId])
  @@index([flagType, resolved])
  @@index([confidence])
  @@index([createdAt])
}

model ModerationLog {
  id          String           @id @default(cuid())
  moderatorId String
  targetType  ReportTargetType
  targetId    String
  action      ModerationAction
  reason      String
  notes       String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  moderator   User             @relation("ModerationLogs", fields: [moderatorId], references: [id], onDelete: Cascade)

  @@index([moderatorId])
  @@index([targetType, targetId])
  @@index([action])
  @@index([createdAt])
}

model UserWarning {
  id             String          @id @default(cuid())
  userId         String
  moderatorId    String
  reason         String
  severity       WarningSeverity
  notes          String?
  acknowledged   Boolean         @default(false)
  acknowledgedAt DateTime?
  expiresAt      DateTime?
  createdAt      DateTime        @default(now())
  moderator      User            @relation("IssuedWarnings", fields: [moderatorId], references: [id], onDelete: Cascade)
  user           User            @relation("ReceivedWarnings", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([severity, expiresAt])
  @@index([createdAt])
}

model UserSuspension {
  id          String         @id @default(cuid())
  userId      String
  moderatorId String
  reason      String
  type        SuspensionType
  startsAt    DateTime       @default(now())
  endsAt      DateTime?
  notes       String?
  appealed    Boolean        @default(false)
  appealedAt  DateTime?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  appeal      Appeal?
  moderator   User           @relation("ModeratorSuspensions", fields: [moderatorId], references: [id], onDelete: Cascade)
  user        User           @relation("UserSuspensions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([endsAt])
  @@index([createdAt])
}

model Appeal {
  id             String         @id @default(cuid())
  userId         String
  suspensionId   String         @unique
  reason         String
  additionalInfo String?
  status         AppealStatus   @default(PENDING)
  reviewNotes    String?
  reviewedBy     String?
  reviewedAt     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviewedByUser User?          @relation("ReviewedAppeals", fields: [reviewedBy], references: [id])
  suspension     UserSuspension @relation(fields: [suspensionId], references: [id], onDelete: Cascade)
  user           User           @relation("UserAppeals", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ElectionCache {
  id          String   @id @default(cuid())
  stateCode   String   @unique
  data        String
  source      String
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([stateCode])
  @@index([lastUpdated])
}

model Photo {
  id             String       @id @default(cuid())
  userId         String
  filename       String
  url            String
  thumbnailUrl   String?
  photoType      PhotoType
  purpose        PhotoPurpose @default(PERSONAL)
  originalSize   Int
  compressedSize Int
  width          Int
  height         Int
  mimeType       String
  isApproved     Boolean      @default(false)
  flaggedBy      String?
  flagReason     String?
  moderatedAt    DateTime?
  candidateId    String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  candidate      Candidate?   @relation(fields: [candidateId], references: [id])
  flaggedByUser  User?        @relation("FlaggedPhotos", fields: [flaggedBy], references: [id])
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([candidateId])
  @@index([photoType, purpose])
  @@index([isApproved, isActive])
  @@index([createdAt])
}

model CandidateInbox {
  id           String           @id @default(cuid())
  candidateId  String           @unique
  isActive     Boolean          @default(true)
  allowPublicQ Boolean          @default(true)
  autoResponse String?
  staffEmails  String[]         @default([])
  categories   String[]         @default([])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  candidate    Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  staffMembers CandidateStaff[]

  @@index([candidateId])
}

model CandidateStaff {
  id                String             @id @default(cuid())
  inboxId           String
  userId            String
  role              StaffRole          @default(VOLUNTEER)
  permissions       StaffPermission[]
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  inbox             CandidateInbox     @relation(fields: [inboxId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses         InquiryResponse[]
  assignedInquiries PoliticalInquiry[] @relation("AssignedStaff")

  @@unique([inboxId, userId])
  @@index([userId])
  @@index([inboxId, isActive])
}

model PoliticalInquiry {
  id               String            @id @default(cuid())
  candidateId      String
  inquirerId       String?
  subject          String
  content          String
  category         InquiryCategory   @default(GENERAL)
  priority         InquiryPriority   @default(NORMAL)
  status           InquiryStatus     @default(OPEN)
  isPublic         Boolean           @default(false)
  isAnonymous      Boolean           @default(false)
  contactEmail     String?
  contactName      String?
  policyTopic      String?
  specificQuestion String?
  respondedAt      DateTime?
  assignedAt       DateTime?
  assignedTo       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  responses        InquiryResponse[]
  assignedStaff    CandidateStaff?   @relation("AssignedStaff", fields: [assignedTo], references: [id])
  candidate        Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  inquirer         User?             @relation("PoliticalInquiries", fields: [inquirerId], references: [id])
  publicQASource   PublicQA?         @relation("PublicQASource")

  @@index([candidateId, status])
  @@index([inquirerId])
  @@index([category, priority])
  @@index([isPublic])
  @@index([createdAt])
}

model InquiryResponse {
  id              String           @id @default(cuid())
  inquiryId       String
  responderId     String
  content         String
  responseType    ResponseType     @default(DIRECT)
  isPublic        Boolean          @default(false)
  isFromCandidate Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inquiry         PoliticalInquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  responder       CandidateStaff   @relation(fields: [responderId], references: [id], onDelete: Cascade)

  @@index([inquiryId])
  @@index([responderId])
  @@index([isPublic])
  @@index([createdAt])
}

model PublicQA {
  id              String            @id @default(cuid())
  candidateId     String
  question        String
  answer          String
  category        InquiryCategory   @default(GENERAL)
  isVisible       Boolean           @default(true)
  isPinned        Boolean           @default(false)
  upvotes         Int               @default(0)
  views           Int               @default(0)
  sourceInquiryId String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  candidate       Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  sourceInquiry   PoliticalInquiry? @relation("PublicQASource", fields: [sourceInquiryId], references: [id])
  votes           PublicQAVote[]

  @@index([candidateId, isVisible])
  @@index([category])
  @@index([isPinned, upvotes])
  @@index([createdAt])
}

model PublicQAVote {
  id        String   @id @default(cuid())
  qaId      String
  userId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  qa        PublicQA @relation(fields: [qaId], references: [id], onDelete: Cascade)
  user      User     @relation("PublicQAVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([qaId, userId])
  @@index([qaId])
  @@index([userId])
}

model CandidateRegistration {
  id                        String                      @id @default(cuid())
  userId                    String
  registrationId            String                      @unique
  firstName                 String
  lastName                  String
  email                     String
  phone                     String
  street                    String
  city                      String
  state                     String
  zipCode                   String
  district                  String?
  positionTitle             String
  positionLevel             String
  positionDistrict          String?
  electionDate              DateTime
  campaignName              String
  campaignWebsite           String?
  campaignSlogan            String?
  campaignDescription       String?
  status                    CandidateRegistrationStatus @default(PENDING_VERIFICATION)
  officeLevel               String
  registrationFee           Float
  originalFee               Float
  feeWaiverStatus           String                      @default("none")
  hasFinancialHardship      Boolean                     @default(false)
  hardshipReason            String?
  communityEndorsementCount Int                         @default(0)
  idmeVerified              Boolean                     @default(false)
  idmeUserId                String?
  idmeVerifiedAt            DateTime?
  verifiedFirstName         String?
  verifiedLastName          String?
  verifiedEmail             String?
  paidAt                    DateTime?
  paymentMethod             String?
  paymentIntentId           String?
  verifiedAt                DateTime?
  verifiedBy                String?
  verificationNotes         String?
  rejectedAt                DateTime?
  rejectedBy                String?
  rejectionReason           String?
  refundIssued              Boolean                     @default(false)
  termsAcceptedAt           DateTime
  withdrawnAt               DateTime?
  withdrawalReason          String?
  refundProcessedAt         DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([registrationId])
  @@index([status])
  @@index([officeLevel, state])
  @@index([electionDate])
  @@index([feeWaiverStatus])
  @@index([hasFinancialHardship])
  @@index([createdAt])
}

model SecurityEvent {
  id          String   @id @default(cuid())
  userId      String?
  eventType   String   // LOGIN_SUCCESS, LOGIN_FAILED, PASSWORD_RESET, etc.
  ipAddress   String?
  userAgent   String?
  details     Json?
  riskScore   Int      @default(0) // 0-100 risk assessment
  createdAt   DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([riskScore])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  VERIFICATION_APPROVED
  VERIFICATION_DENIED
}

enum PoliticalProfileType {
  CITIZEN
  CANDIDATE
  ELECTED_OFFICIAL
  POLITICAL_ORG
}

enum VerificationStatus {
  PENDING
  APPROVED
  DENIED
  NOT_REQUIRED
}

enum ElectionType {
  PRIMARY
  GENERAL
  SPECIAL
  LOCAL
  RUNOFF
}

enum ElectionLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum OfficeLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum BallotMeasureType {
  PROPOSITION
  BOND_MEASURE
  CONSTITUTIONAL_AMENDMENT
  INITIATIVE
  REFERENDUM
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

enum ReportTargetType {
  POST
  COMMENT
  USER
  MESSAGE
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  FAKE_ACCOUNT
  IMPERSONATION
  COPYRIGHT_VIOLATION
  VIOLENCE_THREATS
  SELF_HARM
  ILLEGAL_CONTENT
  OTHER
}

enum ReportStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  DISMISSED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ModerationAction {
  NO_ACTION
  WARNING_ISSUED
  CONTENT_HIDDEN
  CONTENT_DELETED
  USER_WARNED
  USER_SUSPENDED
  USER_BANNED
  APPEAL_APPROVED
  APPEAL_DENIED
}

enum ContentType {
  POST
  COMMENT
  USER_PROFILE
  MESSAGE
}

enum FlagType {
  SPAM
  TOXICITY
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_LANGUAGE
  FAKE_ENGAGEMENT
  DUPLICATE_CONTENT
  SUSPICIOUS_ACTIVITY
}

enum FlagSource {
  AUTOMATED
  USER_REPORT
  MANUAL_REVIEW
}

enum WarningSeverity {
  MINOR
  MODERATE
  MAJOR
  FINAL
}

enum SuspensionType {
  TEMPORARY
  PERMANENT
  POSTING_RESTRICTED
  COMMENTING_RESTRICTED
}

enum AppealStatus {
  PENDING
  APPROVED
  DENIED
}

enum PhotoType {
  AVATAR
  COVER
  CAMPAIGN
  VERIFICATION
  EVENT
  GALLERY
}

enum PhotoPurpose {
  PERSONAL
  CAMPAIGN
  BOTH
}

enum StaffRole {
  CAMPAIGN_MANAGER
  COMMUNICATIONS_DIRECTOR
  POLICY_ADVISOR
  VOLUNTEER_COORDINATOR
  VOLUNTEER
  INTERN
}

enum StaffPermission {
  READ_INQUIRIES
  RESPOND_INQUIRIES
  ASSIGN_INQUIRIES
  MANAGE_STAFF
  MANAGE_SETTINGS
  PUBLISH_QA
  MODERATE_QA
}

enum InquiryCategory {
  GENERAL
  HEALTHCARE
  EDUCATION
  ECONOMY
  ENVIRONMENT
  IMMIGRATION
  FOREIGN_POLICY
  CRIMINAL_JUSTICE
  INFRASTRUCTURE
  HOUSING
  LABOR
  TECHNOLOGY
  CIVIL_RIGHTS
  BUDGET_TAXES
  ENERGY
  AGRICULTURE
  VETERANS
  SENIORS
  YOUTH
  FAMILY_VALUES
  OTHER
}

enum InquiryPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CANDIDATE
  RESOLVED
  CLOSED
  ARCHIVED
}

enum ResponseType {
  DIRECT
  PUBLIC_QA
  POLICY_STATEMENT
  REFERRAL
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum CandidateRegistrationStatus {
  PENDING_VERIFICATION
  PENDING_PAYMENT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  REFUNDED
}
