// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  bio         String?
  website     String?
  location    String?
  verified    Boolean  @default(false)
  embedding   Float[]  @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Address information for voting district
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  h3Index       String? // H3 geospatial index
  
  // Political profile information
  politicalProfileType PoliticalProfileType @default(CITIZEN)
  verificationStatus   VerificationStatus   @default(PENDING)
  verificationDocuments String[] @default([]) // URLs to verification docs
  
  // Political profile details (only for candidates/officials)
  politicalParty    String?
  office           String? // "Mayor of Springfield", "State Senator District 5"
  campaignWebsite  String?
  officialTitle    String? // For elected officials
  termStart        DateTime?
  termEnd          DateTime?
  
  // Email verification
  emailVerified     Boolean   @default(false)
  emailVerifyToken  String?   @unique
  emailVerifyExpiry DateTime?
  
  // Phone verification
  phoneNumber       String?
  phoneVerified     Boolean   @default(false)
  phoneVerifyCode   String?
  phoneVerifyExpiry DateTime?
  
  // Reset tokens
  resetToken  String?
  resetExpiry DateTime?
  
  // Social relationships
  following   Follow[] @relation("Follower")
  followers   Follow[] @relation("Following")
  
  // Content relationships
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  
  // Notification relationships
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")

  // Message relationships
  conversations  ConversationParticipant[]
  sentMessages   Message[] @relation("SentMessages")

  // Online status
  isOnline       Boolean   @default(false)
  lastSeenAt     DateTime  @default(now())
  
  // Moderation relationships
  reports               Report[] @relation("UserReports")
  moderatedReports      Report[] @relation("ModeratedReports")
  resolvedFlags         ContentFlag[] @relation("ResolvedFlags")
  moderationLogs        ModerationLog[] @relation("ModerationLogs")
  receivedWarnings      UserWarning[] @relation("ReceivedWarnings")
  issuedWarnings        UserWarning[] @relation("IssuedWarnings")
  suspensions           UserSuspension[] @relation("UserSuspensions")
  moderatorSuspensions  UserSuspension[] @relation("ModeratorSuspensions")
  appeals               Appeal[] @relation("UserAppeals")
  reviewedAppeals       Appeal[] @relation("ReviewedAppeals")
  
  // Moderation status
  isModerator           Boolean @default(false)
  isAdmin               Boolean @default(false)
  isSuspended           Boolean @default(false)
  
  // Onboarding tracking
  onboardingData      Json?     // Store onboarding progress and data
  onboardingCompleted Boolean   @default(false)
  interests           String[]  @default([])
  politicalExperience String?   // new, casual, engaged, activist
  notificationPreferences Json? // Store notification settings
  displayName         String?   // User's preferred display name
  
  // Stats
  followingCount Int @default(0)
  followersCount Int @default(0)
  
  // Relationships - Political/Election
  candidateProfile Candidate?    // If user is running for office
  endorsements    Endorsement[]  // Candidates this user has endorsed
  
  // Relationships - Topic System
  topicComments   TopicComment[] // Comments on topics/sub-topics
  
  @@index([username])
  @@index([createdAt])
  @@index([h3Index]) // For geospatial queries
  @@index([politicalProfileType])
  @@index([zipCode, state]) // For district lookups
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower    User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id          String   @id @default(cuid())
  content     String
  imageUrl    String?
  authorId    String
  embedding   Float[]  @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Political post features
  isPolitical Boolean @default(false)
  tags        String[] @default([])
  
  // Relationships
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]
  
  // Topic system relationships
  topics      TopicPost[]  // Topics this post belongs to
  
  // Stats
  likesCount    Int @default(0)
  commentsCount Int @default(0)
  
  @@index([authorId])
  @@index([createdAt])
  @@index([likesCount])
  @@index([isPolitical])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
}

model Notification {
  id         String            @id @default(cuid())
  type       NotificationType
  senderId   String?
  receiverId String
  postId     String?
  commentId  String?
  message    String
  read       Boolean           @default(false)
  createdAt  DateTime          @default(now())
  
  sender     User? @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User  @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@index([receiverId, read])
  @@index([createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  VERIFICATION_APPROVED
  VERIFICATION_DENIED
}

enum PoliticalProfileType {
  CITIZEN
  CANDIDATE
  ELECTED_OFFICIAL
  POLITICAL_ORG
}

enum VerificationStatus {
  PENDING
  APPROVED
  DENIED
  NOT_REQUIRED
}

enum ElectionType {
  PRIMARY
  GENERAL
  SPECIAL
  LOCAL
  RUNOFF
}

enum ElectionLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum OfficeLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum BallotMeasureType {
  PROPOSITION
  BOND_MEASURE
  CONSTITUTIONAL_AMENDMENT
  INITIATIVE
  REFERENDUM
}

// Election infrastructure models
model Election {
  id             String       @id @default(cuid())
  name           String       // "2024 General Election"
  type           ElectionType
  level          ElectionLevel
  date           DateTime
  registrationDeadline DateTime?
  
  // Geographic scope
  state          String       // Two-letter state code
  county         String?      // For local elections
  city           String?      // For municipal elections
  district       String?      // Congressional/state legislative district
  
  // Status and metadata
  isActive       Boolean      @default(true)
  description    String?
  officialUrl    String?      // Link to official election info
  
  // Relationships
  offices        Office[]
  ballotMeasures BallotMeasure[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([state, date])
  @@index([level, date])
}

model Office {
  id          String      @id @default(cuid())
  title       String      // "President", "Governor", "Mayor", "City Council District 3"
  level       OfficeLevel
  description String?     // Brief description of the office
  
  // Geographic scope
  state       String      // Two-letter state code
  district    String?     // District number/identifier if applicable
  jurisdiction String?    // City, county, or other local jurisdiction
  
  // Term information
  termLength  Int?        // Length in years
  salary      Decimal?    // Annual salary if public
  
  // Election relationship
  electionId  String
  election    Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)
  
  // Candidates running for this office
  candidates  Candidate[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([electionId])
  @@index([state, level])
}

model Candidate {
  id              String    @id @default(cuid())
  
  // Basic information
  name            String
  party           String?   // Political party affiliation
  isIncumbent     Boolean   @default(false)
  
  // Contact and campaign info
  campaignWebsite String?
  campaignEmail   String?
  campaignPhone   String?
  
  // Platform and positions
  platformSummary String?   // Brief campaign summary
  keyIssues       String[]  @default([]) // Array of key campaign issues
  embedding       Float[]   @default([]) // AI embedding for issue matching
  
  // Verification and status
  isVerified      Boolean   @default(false)
  isWithdrawn     Boolean   @default(false)
  withdrawnAt     DateTime?
  withdrawnReason String?
  
  // Link to platform user (if they have an account)
  userId          String?   @unique // Optional link to User model
  user            User?     @relation(fields: [userId], references: [id])
  
  // Office they're running for
  officeId        String
  office          Office    @relation(fields: [officeId], references: [id], onDelete: Cascade)
  
  // Financial data
  financialData   FinancialData?
  
  // User interactions
  endorsements    Endorsement[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([officeId])
  @@index([party])
  @@index([userId])
}

model BallotMeasure {
  id          String            @id @default(cuid())
  title       String            // Short title
  description String            // Full description/summary
  type        BallotMeasureType
  number      String?           // Ballot number (e.g., "Proposition 1")
  
  // Full text and details
  fullText    String?           // Complete text of the measure
  fiscalImpact String?          // Economic impact analysis
  arguments   Json?             // Arguments for/against
  
  // Geographic scope
  state       String            // Two-letter state code
  county      String?
  city        String?
  
  // Election relationship
  electionId  String
  election    Election          @relation(fields: [electionId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([electionId])
  @@index([state, type])
}

model FinancialData {
  id               String    @id @default(cuid())
  candidateId      String    @unique
  candidate        Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  // Financial summary
  totalRaised      Decimal   @default(0)
  totalSpent       Decimal   @default(0)
  cashOnHand       Decimal   @default(0)
  debts            Decimal   @default(0)
  
  // Donation info
  individualDonations  Decimal @default(0)
  pacDonations        Decimal @default(0)
  selfFunding         Decimal @default(0)
  publicFunding       Decimal @default(0)
  
  // Reporting period
  reportingPeriod  String?   // "Q1 2024", "Pre-Primary"
  lastUpdated      DateTime  @default(now())
  sourceUrl        String?   // Link to official filing
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Endorsement {
  id          String    @id @default(cuid())
  
  // Who endorsed
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Who was endorsed
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  // Endorsement details
  reason      String?   // Why they endorsed
  isPublic    Boolean   @default(false) // Whether endorsement is public
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([userId, candidateId]) // Prevent duplicate endorsements
  @@index([candidateId])
  @@index([userId])
}

// AI-Powered Topic Analysis System
model Topic {
  id          String   @id @default(cuid())
  title       String   // AI-generated topic title
  description String?  // Brief description of the topic
  
  // AI-generated content embeddings (centroid of related posts)
  embedding   Float[]  @default([])
  
  // AI-generated argument analysis
  argumentsFor     String[] @default([]) // Key arguments supporting the topic
  argumentsAgainst String[] @default([]) // Key arguments opposing the topic
  neutralSummary   String?              // AI-generated neutral summary
  
  // Topic classification
  category         String?  // e.g., "Healthcare", "Economy", "Environment"
  politicalLean    Float?   // -1 (liberal) to 1 (conservative), null for neutral
  controversyScore Float    @default(0) // 0-1 scale of how contentious the topic is
  
  // Engagement metrics
  postCount        Int     @default(0)   // Number of posts in this topic
  participantCount Int     @default(0)   // Unique users who've posted/commented
  viewCount        Int     @default(0)   // How many times topic has been viewed
  
  // Trending calculation
  trendingScore    Float   @default(0)   // Algorithm-calculated trending score
  isActive         Boolean @default(true) // Whether topic is still active
  lastActivityAt   DateTime @default(now()) // Last post/comment in topic
  
  // Geographic relevance (optional)
  state           String?  // If topic is state-specific
  district        String?  // If topic is district-specific
  
  // Relationships
  posts           TopicPost[]     // Posts assigned to this topic
  subTopics       SubTopic[]      // Sub-discussions within the topic
  topicComments   TopicComment[]  // Direct comments on the topic
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([trendingScore, lastActivityAt])
  @@index([category, isActive])
  @@index([controversyScore])
  @@index([state, district])
}

model SubTopic {
  id            String @id @default(cuid())
  parentTopicId String
  parentTopic   Topic  @relation(fields: [parentTopicId], references: [id], onDelete: Cascade)
  
  title         String   // Sub-topic title (e.g., "Funding Mechanisms" under "Healthcare Reform")
  summary       String?  // AI-generated summary of this sub-discussion
  embedding     Float[]  @default([]) // Embedding for this sub-topic
  
  // Engagement metrics
  commentCount  Int     @default(0)
  participantCount Int  @default(0)
  
  // Relationships  
  comments      TopicComment[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([parentTopicId])
}

// Junction table linking posts to topics (posts can belong to multiple topics)
model TopicPost {
  id        String @id @default(cuid())
  topicId   String
  postId    String
  
  topic     Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  post      Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Relevance scoring
  relevanceScore Float @default(0.5) // 0-1 how relevant this post is to the topic
  
  createdAt DateTime @default(now())
  
  @@unique([topicId, postId]) // Prevent duplicate assignments
  @@index([topicId, relevanceScore])
}

// Comments specifically on topics and sub-topics (separate from post comments)
model TopicComment {
  id          String @id @default(cuid())
  content     String
  authorId    String
  author      User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Can be attached to either a topic or sub-topic
  topicId     String?
  topic       Topic?    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  subTopicId  String?
  subTopic    SubTopic? @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  
  // Threading support for replies
  parentId    String?
  parent      TopicComment? @relation("TopicCommentReplies", fields: [parentId], references: [id])
  replies     TopicComment[] @relation("TopicCommentReplies")
  
  // AI analysis
  embedding   Float[]  @default([])
  sentiment   Float?   // -1 to 1, sentiment analysis of the comment
  hostilityScore Float @default(0) // 0-1, hostility detection
  
  // Moderation
  isHidden    Boolean  @default(false)
  hideReason  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([topicId, createdAt])
  @@index([subTopicId, createdAt])
  @@index([authorId])
  @@index([parentId])
}

model Conversation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Participants (for now, just 2-person DMs, but extensible to group chats)
  participants ConversationParticipant[]
  messages     Message[]
  
  // Last message info for conversation lists
  lastMessageAt DateTime?
  lastMessageContent String?
  lastMessageSenderId String?
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  messageType    MessageType @default(TEXT)
  imageUrl       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  sender       User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId, createdAt])
  @@index([senderId])
}

model ApiCache {
  id           String   @id @default(cuid())
  provider     String   // 'google_civic', 'ballotpedia', etc.
  cacheKey     String   // 'officials_12345_IL' or 'district_39.7817_-89.6501'
  responseData Json     // Cached API response
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  hitCount     Int      @default(0)
  
  @@unique([provider, cacheKey])
  @@index([provider, cacheKey])
  @@index([expiresAt])
}

model ExternalOfficial {
  id           String   @id @default(cuid())
  externalId   String   // ID from external API
  provider     String   // 'google_civic', 'ballotpedia', etc.
  name         String
  office       String
  district     String?
  party        String?
  contactInfo  Json?    // Phone, email, addresses
  photoUrl     String?
  zipCode      String   // For geographic lookup
  state        String   // For geographic lookup
  h3Index      String?  // For precise geographic matching
  lastUpdated  DateTime @default(now())
  
  @@unique([provider, externalId])
  @@index([zipCode, state])
  @@index([h3Index])
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

// Content Moderation Models
model Report {
  id          String     @id @default(cuid())
  reporterId  String
  targetType  ReportTargetType
  targetId    String     // Post ID, Comment ID, or User ID
  reason      ReportReason
  description String?    // Additional details from reporter
  status      ReportStatus @default(PENDING)
  priority    ReportPriority @default(LOW)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Moderation action taken
  moderatedAt DateTime?
  moderatorId String?
  moderatorNotes String?
  actionTaken ModerationAction?
  
  // Relationships
  reporter    User @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  moderator   User? @relation("ModeratedReports", fields: [moderatorId], references: [id], onDelete: SetNull)
  
  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status, priority])
  @@index([createdAt])
}

model ContentFlag {
  id         String        @id @default(cuid())
  contentType ContentType
  contentId  String
  flagType   FlagType
  confidence Float         // 0.0 - 1.0, confidence score from AI detection
  source     FlagSource    // AUTOMATED, USER_REPORT, MANUAL_REVIEW
  details    Json?         // Additional context (keywords, scores, etc.)
  resolved   Boolean       @default(false)
  resolvedBy String?
  resolvedAt DateTime?
  createdAt  DateTime      @default(now())
  
  resolver   User? @relation("ResolvedFlags", fields: [resolvedBy], references: [id], onDelete: SetNull)
  
  @@index([contentType, contentId])
  @@index([flagType, resolved])
  @@index([confidence])
  @@index([createdAt])
}

model ModerationLog {
  id          String           @id @default(cuid())
  moderatorId String
  targetType  ReportTargetType
  targetId    String
  action      ModerationAction
  reason      String
  notes       String?
  metadata    Json?            // Additional context
  createdAt   DateTime         @default(now())
  
  moderator   User @relation("ModerationLogs", fields: [moderatorId], references: [id], onDelete: Cascade)
  
  @@index([moderatorId])
  @@index([targetType, targetId])
  @@index([action])
  @@index([createdAt])
}

model UserWarning {
  id          String   @id @default(cuid())
  userId      String
  moderatorId String
  reason      String
  severity    WarningSeverity
  notes       String?
  acknowledged Boolean @default(false)
  acknowledgedAt DateTime?
  expiresAt   DateTime? // For temporary warnings
  createdAt   DateTime @default(now())
  
  user        User @relation("ReceivedWarnings", fields: [userId], references: [id], onDelete: Cascade)
  moderator   User @relation("IssuedWarnings", fields: [moderatorId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([severity, expiresAt])
  @@index([createdAt])
}

model UserSuspension {
  id          String          @id @default(cuid())
  userId      String
  moderatorId String
  reason      String
  type        SuspensionType
  startsAt    DateTime        @default(now())
  endsAt      DateTime?       // null for permanent bans
  notes       String?
  appealed    Boolean         @default(false)
  appealedAt  DateTime?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  
  user        User @relation("UserSuspensions", fields: [userId], references: [id], onDelete: Cascade)
  moderator   User @relation("ModeratorSuspensions", fields: [moderatorId], references: [id], onDelete: Cascade)
  appeal      Appeal?
  
  @@index([userId, isActive])
  @@index([endsAt])
  @@index([createdAt])
}

// Enums for content moderation
enum ReportTargetType {
  POST
  COMMENT
  USER
  MESSAGE
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  FAKE_ACCOUNT
  IMPERSONATION
  COPYRIGHT_VIOLATION
  VIOLENCE_THREATS
  SELF_HARM
  ILLEGAL_CONTENT
  OTHER
}

enum ReportStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  DISMISSED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ModerationAction {
  NO_ACTION
  WARNING_ISSUED
  CONTENT_HIDDEN
  CONTENT_DELETED
  USER_WARNED
  USER_SUSPENDED
  USER_BANNED
  APPEAL_APPROVED
  APPEAL_DENIED
}

enum ContentType {
  POST
  COMMENT
  USER_PROFILE
  MESSAGE
}

enum FlagType {
  SPAM
  TOXICITY
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_LANGUAGE
  FAKE_ENGAGEMENT
  DUPLICATE_CONTENT
  SUSPICIOUS_ACTIVITY
}

enum FlagSource {
  AUTOMATED
  USER_REPORT
  MANUAL_REVIEW
}

enum WarningSeverity {
  MINOR
  MODERATE
  MAJOR
  FINAL
}

enum SuspensionType {
  TEMPORARY
  PERMANENT
  POSTING_RESTRICTED
  COMMENTING_RESTRICTED
}

// Appeals system
model Appeal {
  id              String        @id @default(cuid())
  userId          String
  suspensionId    String        @unique
  reason          String        // User's appeal reason
  additionalInfo  String?       // Additional context from user
  status          AppealStatus  @default(PENDING)
  reviewNotes     String?       // Moderator's review notes
  reviewedBy      String?       // Moderator who reviewed
  reviewedAt      DateTime?     // When reviewed
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  user            User @relation("UserAppeals", fields: [userId], references: [id], onDelete: Cascade)
  suspension      UserSuspension @relation(fields: [suspensionId], references: [id], onDelete: Cascade)
  reviewedByUser  User? @relation("ReviewedAppeals", fields: [reviewedBy], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum AppealStatus {
  PENDING
  APPROVED
  DENIED
}