generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  username                String                    @unique
  password                String
  firstName               String?
  lastName                String?
  avatar                  String?
  bio                     String?
  website                 String?
  location                String?
  verified                Boolean                   @default(false)
  embedding               Float[]                   @default([])
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  streetAddress           String?
  city                    String?
  state                   String?
  zipCode                 String?
  h3Index                 String?
  politicalProfileType    PoliticalProfileType      @default(CITIZEN)
  verificationStatus      VerificationStatus        @default(PENDING)
  verificationDocuments   String[]                  @default([])
  politicalParty          String?
  office                  String?
  campaignWebsite         String?
  officialTitle           String?
  termStart               DateTime?
  termEnd                 DateTime?
  emailVerified           Boolean                   @default(false)
  emailVerifyToken        String?                   @unique
  emailVerifyExpiry       DateTime?
  phoneNumber             String?
  phoneVerified           Boolean                   @default(false)
  phoneVerifyCode         String?
  phoneVerifyExpiry       DateTime?
  resetToken              String?
  resetExpiry             DateTime?
  isOnline                Boolean                   @default(false)
  lastSeenAt              DateTime                  @default(now())
  isModerator             Boolean                   @default(false)
  isAdmin                 Boolean                   @default(false)
  isSuspended             Boolean                   @default(false)
  onboardingData          Json?
  onboardingCompleted     Boolean                   @default(false)
  interests               String[]                  @default([])
  politicalExperience     String?
  notificationPreferences Json?
  displayName             String?
  followingCount          Int                       @default(0)
  followersCount          Int                       @default(0)
  deviceFingerprint       Json?
  lastLoginAt             DateTime?
  lastLoginIp             String?
  lockedUntil             DateTime?
  loginAttempts           Int                       @default(0)
  passwordChangedAt       DateTime?                 @default(now())
  riskScore               Int                       @default(0)
  suspiciousActivityCount Int                       @default(0)
  reputationScore         Int?                      @default(70)
  reputationUpdatedAt     DateTime?
  allowTagsByFriendsOnly  Boolean                   @default(false)
  photoTaggingEnabled     Boolean                   @default(true)
  requireTagApproval      Boolean                   @default(true)
  backgroundImage         String?
  reviewedAppeals         Appeal[]                  @relation("ReviewedAppeals")
  appeals                 Appeal[]                  @relation("UserAppeals")
  candidateProfile        Candidate?
  candidateRegistrations  CandidateRegistration[]
  candidateStaffRoles     CandidateStaff[]
  comments                Comment[]
  resolvedFlags           ContentFlag[]             @relation("ResolvedFlags")
  conversations           ConversationParticipant[]
  endorsements            Endorsement[]
  following               Follow[]                  @relation("Follower")
  followers               Follow[]                  @relation("Following")
  receivedFriendRequests  Friendship[]              @relation("FriendshipRecipient")
  sentFriendRequests      Friendship[]              @relation("FriendshipRequester")
  likes                   Like[]
  sentMessages            Message[]                 @relation("SentMessages")
  moderationLogs          ModerationLog[]           @relation("ModerationLogs")
  receivedNotifications   Notification[]            @relation("NotificationReceiver")
  sentNotifications       Notification[]            @relation("NotificationSender")
  flaggedPhotos           Photo[]                   @relation("FlaggedPhotos")
  photos                  Photo[]
  photoPrivacyRequests    PhotoPrivacyRequest[]
  photoTagsCreated        PhotoTag[]                @relation("PhotoTagsCreated")
  photoTagsReceived       PhotoTag[]                @relation("PhotoTagsReceived")
  politicalInquiries      PoliticalInquiry[]        @relation("PoliticalInquiries")
  posts                   Post[]
  publicQAVotes           PublicQAVote[]            @relation("PublicQAVotes")
  moderatedReports        Report[]                  @relation("ModeratedReports")
  reports                 Report[]                  @relation("UserReports")
  reputationEvents        ReputationEvent[]
  securityEvents          SecurityEvent[]
  topicComments           TopicComment[]
  moderatorSuspensions    UserSuspension[]          @relation("ModeratorSuspensions")
  suspensions             UserSuspension[]          @relation("UserSuspensions")
  issuedWarnings          UserWarning[]             @relation("IssuedWarnings")
  receivedWarnings        UserWarning[]             @relation("ReceivedWarnings")
  
  // Electoral District Crowdsourcing Relations
  districtSubmissions     ElectoralDistrict[]       @relation("DistrictSubmissions")
  districtVerifications   ElectoralDistrict[]       @relation("DistrictVerifications")
  officeSubmissions       DistrictOffice[]          @relation("OfficeSubmissions")
  officeVerifications     DistrictOffice[]          @relation("OfficeVerifications")
  officialSubmissions     CrowdsourcedOfficial[]    @relation("OfficialSubmissions")
  officialVerifications   CrowdsourcedOfficial[]    @relation("OfficialVerifications")
  addressMappingVerifications AddressDistrictMapping[] @relation("AddressMappingVerifications")
  conflictReports         DistrictConflict[]        @relation("ConflictReports")
  conflictResolutions     DistrictConflict[]        @relation("ConflictResolutions")
  crowdsourceVotes        CrowdsourceVote[]         @relation("CrowdsourceVotes")

  @@index([username])
  @@index([createdAt])
  @@index([h3Index])
  @@index([politicalProfileType])
  @@index([zipCode, state])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Friendship {
  id          String           @id @default(cuid())
  requesterId String
  recipientId String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  acceptedAt  DateTime?
  recipient   User             @relation("FriendshipRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  requester   User             @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)

  @@unique([requesterId, recipientId])
  @@index([requesterId])
  @@index([recipientId])
  @@index([status])
}

model Post {
  id                 String            @id @default(cuid())
  content            String
  imageUrl           String?
  authorId           String
  embedding          Float[]           @default([])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  isPolitical        Boolean           @default(false)
  tags               String[]          @default([])
  likesCount         Int               @default(0)
  commentsCount      Int               @default(0)
  containsFeedback   Boolean?          @default(false)
  feedbackCategory   String?
  feedbackConfidence Float?
  feedbackPriority   String?
  feedbackStatus     String?           @default("new")
  feedbackSummary    String?
  feedbackType       String?
  authorReputation   Int?
  comments           Comment[]
  likes              Like[]
  photos             Photo[]
  author             User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reputationEvents   ReputationEvent[]
  topics             TopicPost[]

  @@index([authorId])
  @@index([createdAt])
  @@index([likesCount])
  @@index([isPolitical])
  @@index([containsFeedback, feedbackType, feedbackPriority])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  senderId   String?
  receiverId String
  postId     String?
  commentId  String?
  message    String
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
  receiver   User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?            @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId, read])
  @@index([createdAt])
}

model Election {
  id                   String          @id @default(cuid())
  name                 String
  type                 ElectionType
  level                ElectionLevel
  date                 DateTime
  registrationDeadline DateTime?
  state                String
  county               String?
  city                 String?
  district             String?
  isActive             Boolean         @default(true)
  description          String?
  officialUrl          String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  ballotMeasures       BallotMeasure[]
  offices              Office[]

  @@index([state, date])
  @@index([level, date])
}

model Office {
  id           String      @id @default(cuid())
  title        String
  level        OfficeLevel
  description  String?
  state        String
  district     String?
  jurisdiction String?
  termLength   Int?
  salary       Decimal?
  electionId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  candidates   Candidate[]
  election     Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@index([electionId])
  @@index([state, level])
}

model Candidate {
  id                 String             @id @default(cuid())
  name               String
  party              String?
  isIncumbent        Boolean            @default(false)
  campaignWebsite    String?
  campaignEmail      String?
  campaignPhone      String?
  platformSummary    String?
  keyIssues          String[]           @default([])
  embedding          Float[]            @default([])
  isVerified         Boolean            @default(false)
  isWithdrawn        Boolean            @default(false)
  withdrawnAt        DateTime?
  withdrawnReason    String?
  userId             String?            @unique
  officeId           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  office             Office             @relation(fields: [officeId], references: [id], onDelete: Cascade)
  user               User?              @relation(fields: [userId], references: [id])
  inbox              CandidateInbox?
  endorsements       Endorsement[]
  financialData      FinancialData?
  photos             Photo[]
  politicalInquiries PoliticalInquiry[]
  publicQAs          PublicQA[]

  @@index([officeId])
  @@index([party])
  @@index([userId])
}

model BallotMeasure {
  id           String            @id @default(cuid())
  title        String
  description  String
  type         BallotMeasureType
  number       String?
  fullText     String?
  fiscalImpact String?
  arguments    Json?
  state        String
  county       String?
  city         String?
  electionId   String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  election     Election          @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@index([electionId])
  @@index([state, type])
}

model FinancialData {
  id                  String    @id @default(cuid())
  candidateId         String    @unique
  totalRaised         Decimal   @default(0)
  totalSpent          Decimal   @default(0)
  cashOnHand          Decimal   @default(0)
  debts               Decimal   @default(0)
  individualDonations Decimal   @default(0)
  pacDonations        Decimal   @default(0)
  selfFunding         Decimal   @default(0)
  publicFunding       Decimal   @default(0)
  reportingPeriod     String?
  lastUpdated         DateTime  @default(now())
  sourceUrl           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  candidate           Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id          String    @id @default(cuid())
  userId      String
  candidateId String
  reason      String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, candidateId])
  @@index([candidateId])
  @@index([userId])
}

model Topic {
  id               String         @id @default(cuid())
  title            String
  description      String?
  embedding        Float[]        @default([])
  argumentsFor     String[]       @default([])
  argumentsAgainst String[]       @default([])
  neutralSummary   String?
  category         String?
  complexityScore  Float          @default(0)
  evidenceQuality  Float          @default(0)
  controversyScore Float          @default(0)
  postCount        Int            @default(0)
  participantCount Int            @default(0)
  viewCount        Int            @default(0)
  trendingScore    Float          @default(0)
  isActive         Boolean        @default(true)
  lastActivityAt   DateTime       @default(now())
  state            String?
  district         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subTopics        SubTopic[]
  topicComments    TopicComment[]
  posts            TopicPost[]

  @@index([trendingScore, lastActivityAt])
  @@index([category, isActive])
  @@index([controversyScore])
  @@index([state, district])
}

model SubTopic {
  id               String         @id @default(cuid())
  parentTopicId    String
  title            String
  summary          String?
  embedding        Float[]        @default([])
  commentCount     Int            @default(0)
  participantCount Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  parentTopic      Topic          @relation(fields: [parentTopicId], references: [id], onDelete: Cascade)
  comments         TopicComment[]

  @@index([parentTopicId])
}

model TopicPost {
  id             String   @id @default(cuid())
  topicId        String
  postId         String
  relevanceScore Float    @default(0.5)
  createdAt      DateTime @default(now())
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic          Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([topicId, postId])
  @@index([topicId, relevanceScore])
}

model TopicComment {
  id               String         @id @default(cuid())
  content          String
  authorId         String
  topicId          String?
  subTopicId       String?
  parentId         String?
  embedding        Float[]        @default([])
  sentiment        Float?
  hostilityScore   Float          @default(0)
  argumentStrength Float          @default(0)
  evidenceLevel    Float          @default(0)
  topicRelevance   Float          @default(0)
  isHidden         Boolean        @default(false)
  hideReason       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent           TopicComment?  @relation("TopicCommentReplies", fields: [parentId], references: [id])
  replies          TopicComment[] @relation("TopicCommentReplies")
  subTopic         SubTopic?      @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  topic            Topic?         @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId, createdAt])
  @@index([subTopicId, createdAt])
  @@index([authorId])
  @@index([parentId])
}

model Conversation {
  id                  String                    @id @default(cuid())
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  lastMessageAt       DateTime?
  lastMessageContent  String?
  lastMessageSenderId String?
  participants        ConversationParticipant[]
  messages            Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  messageType    MessageType  @default(TEXT)
  imageUrl       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
}

model ApiCache {
  id           String   @id @default(cuid())
  provider     String
  cacheKey     String
  responseData Json
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  hitCount     Int      @default(0)

  @@unique([provider, cacheKey])
  @@index([provider, cacheKey])
  @@index([expiresAt])
}

model ExternalOfficial {
  id          String   @id @default(cuid())
  externalId  String
  provider    String
  name        String
  office      String
  district    String?
  party       String?
  contactInfo Json?
  photoUrl    String?
  zipCode     String
  state       String
  h3Index     String?
  lastUpdated DateTime @default(now())

  @@unique([provider, externalId])
  @@index([zipCode, state])
  @@index([h3Index])
}

model Report {
  id             String            @id @default(cuid())
  reporterId     String
  targetType     ReportTargetType
  targetId       String
  reason         ReportReason
  description    String?
  status         ReportStatus      @default(PENDING)
  priority       ReportPriority    @default(LOW)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  moderatedAt    DateTime?
  moderatorId    String?
  moderatorNotes String?
  actionTaken    ModerationAction?
  moderator      User?             @relation("ModeratedReports", fields: [moderatorId], references: [id])
  reporter       User              @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status, priority])
  @@index([createdAt])
}

model ContentFlag {
  id          String      @id @default(cuid())
  contentType ContentType
  contentId   String
  flagType    FlagType
  confidence  Float
  source      FlagSource
  details     Json?
  resolved    Boolean     @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime    @default(now())
  resolver    User?       @relation("ResolvedFlags", fields: [resolvedBy], references: [id])

  @@index([contentType, contentId])
  @@index([flagType, resolved])
  @@index([confidence])
  @@index([createdAt])
}

model ModerationLog {
  id          String           @id @default(cuid())
  moderatorId String
  targetType  ReportTargetType
  targetId    String
  action      ModerationAction
  reason      String
  notes       String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  moderator   User             @relation("ModerationLogs", fields: [moderatorId], references: [id], onDelete: Cascade)

  @@index([moderatorId])
  @@index([targetType, targetId])
  @@index([action])
  @@index([createdAt])
}

model UserWarning {
  id             String          @id @default(cuid())
  userId         String
  moderatorId    String
  reason         String
  severity       WarningSeverity
  notes          String?
  acknowledged   Boolean         @default(false)
  acknowledgedAt DateTime?
  expiresAt      DateTime?
  createdAt      DateTime        @default(now())
  moderator      User            @relation("IssuedWarnings", fields: [moderatorId], references: [id], onDelete: Cascade)
  user           User            @relation("ReceivedWarnings", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([severity, expiresAt])
  @@index([createdAt])
}

model UserSuspension {
  id          String         @id @default(cuid())
  userId      String
  moderatorId String
  reason      String
  type        SuspensionType
  startsAt    DateTime       @default(now())
  endsAt      DateTime?
  notes       String?
  appealed    Boolean        @default(false)
  appealedAt  DateTime?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  appeal      Appeal?
  moderator   User           @relation("ModeratorSuspensions", fields: [moderatorId], references: [id], onDelete: Cascade)
  user        User           @relation("UserSuspensions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([endsAt])
  @@index([createdAt])
}

model Appeal {
  id             String         @id @default(cuid())
  userId         String
  suspensionId   String         @unique
  reason         String
  additionalInfo String?
  status         AppealStatus   @default(PENDING)
  reviewNotes    String?
  reviewedBy     String?
  reviewedAt     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviewedByUser User?          @relation("ReviewedAppeals", fields: [reviewedBy], references: [id])
  suspension     UserSuspension @relation(fields: [suspensionId], references: [id], onDelete: Cascade)
  user           User           @relation("UserAppeals", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ElectionCache {
  id          String   @id @default(cuid())
  stateCode   String   @unique
  data        String
  source      String
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([stateCode])
  @@index([lastUpdated])
}

model Photo {
  id              String                @id @default(cuid())
  userId          String
  filename        String
  url             String
  thumbnailUrl    String?
  photoType       PhotoType
  purpose         PhotoPurpose          @default(PERSONAL)
  originalSize    Int
  compressedSize  Int
  width           Int
  height          Int
  mimeType        String
  isApproved      Boolean               @default(false)
  flaggedBy       String?
  flagReason      String?
  moderatedAt     DateTime?
  candidateId     String?
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  caption         String?
  gallery         String?               @default("My Photos")
  postId          String?
  candidate       Candidate?            @relation(fields: [candidateId], references: [id])
  flaggedByUser   User?                 @relation("FlaggedPhotos", fields: [flaggedBy], references: [id])
  post            Post?                 @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  privacyRequests PhotoPrivacyRequest[]
  tags            PhotoTag[]

  @@index([userId])
  @@index([candidateId])
  @@index([photoType, purpose])
  @@index([isApproved, isActive])
  @@index([createdAt])
}

model PhotoTag {
  id         String         @id @default(cuid())
  photoId    String
  taggedById String
  taggedId   String
  x          Float
  y          Float
  status     PhotoTagStatus @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  photo      Photo          @relation(fields: [photoId], references: [id], onDelete: Cascade)
  taggedBy   User           @relation("PhotoTagsCreated", fields: [taggedById], references: [id])
  tagged     User           @relation("PhotoTagsReceived", fields: [taggedId], references: [id])

  @@unique([photoId, taggedId])
  @@index([taggedId, status])
  @@index([photoId])
}

model PhotoPrivacyRequest {
  id        String                    @id @default(cuid())
  photoId   String
  userId    String
  type      PhotoPrivacyRequestType
  reason    String?
  status    PhotoPrivacyRequestStatus @default(PENDING)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  photo     Photo                     @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([photoId, userId])
  @@index([userId, status])
  @@index([status, createdAt])
}

model CandidateInbox {
  id           String           @id @default(cuid())
  candidateId  String           @unique
  isActive     Boolean          @default(true)
  allowPublicQ Boolean          @default(true)
  autoResponse String?
  staffEmails  String[]         @default([])
  categories   String[]         @default([])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  candidate    Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  staffMembers CandidateStaff[]

  @@index([candidateId])
}

// Electoral District Crowdsourcing System
model ElectoralDistrict {
  id           String               @id @default(cuid())
  name         String               // e.g., "Nevada 4th Congressional District"
  type         DistrictType
  level        DistrictLevel
  identifier   String               // e.g., "NV-04", "CLARK-SCHOOL-A"
  state        String               @db.Char(2)
  county       String?
  municipality String?
  coordinates  Json?                // GeoJSON polygon for district boundaries
  population   Int?
  isActive     Boolean              @default(true)
  
  // Crowdsourcing metadata
  verificationLevel VerificationLevel @default(UNVERIFIED)
  submittedBy       String?
  verifiedBy        String?
  verifiedAt        DateTime?
  conflictCount     Int              @default(0)
  
  // References
  externalId       String?          // OCD-ID, FIPS code, etc.
  dataSource       String?          // "US_CENSUS", "GEOCODIO", "CROWDSOURCED"
  parentDistrict   String?          // Reference to parent district
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  submitter        User?            @relation("DistrictSubmissions", fields: [submittedBy], references: [id])
  verifier         User?            @relation("DistrictVerifications", fields: [verifiedBy], references: [id])
  parent           ElectoralDistrict? @relation("DistrictHierarchy", fields: [parentDistrict], references: [id])
  children         ElectoralDistrict[] @relation("DistrictHierarchy")
  offices          DistrictOffice[]
  addressMappings  AddressDistrictMapping[]
  conflicts        DistrictConflict[]
  
  @@unique([identifier, state, type])
  @@index([state, type, level])
  @@index([verificationLevel])
  @@index([isActive, type])
}

model DistrictOffice {
  id                String               @id @default(cuid())
  title             String               // e.g., "U.S. Representative", "School Board Member"
  level             OfficeLevel
  termLength        Int?                 // Years
  electionCycle     String?              // "EVEN", "ODD", "SPECIAL"
  nextElection      DateTime?
  salary            Decimal?
  hasTermLimits     Boolean              @default(false)
  maxTerms          Int?
  
  // Current office holder info
  currentOfficeholder String?
  holderStartDate     DateTime?
  holderEndDate       DateTime?
  holderParty         String?
  holderContactInfo   Json?              // Phone, email, address
  holderPhotoUrl      String?
  
  // Crowdsourcing fields
  verificationLevel   VerificationLevel  @default(UNVERIFIED)
  submittedBy         String?
  verifiedBy          String?
  verifiedAt          DateTime?
  dataSource          String?            // "OFFICIAL_WEBSITE", "NEWSPAPER", "CROWDSOURCED"
  sourceUrl           String?
  lastVerified        DateTime?
  
  districtId          String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  // Relations
  district            ElectoralDistrict  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  submitter           User?              @relation("OfficeSubmissions", fields: [submittedBy], references: [id])
  verifier            User?              @relation("OfficeVerifications", fields: [verifiedBy], references: [id])
  crowdsourcedData    CrowdsourcedOfficial[]
  
  @@index([districtId])
  @@index([level, nextElection])
  @@index([verificationLevel])
}

model CrowdsourcedOfficial {
  id               String               @id @default(cuid())
  name             String
  party            String?
  contactInfo      Json?                // Phone, email, office address
  photoUrl         String?
  website          String?
  socialMedia      Json?                // Twitter, Facebook, etc.
  biography        String?
  keyAccomplishments String?
  
  // Verification and source tracking
  verificationLevel VerificationLevel   @default(UNVERIFIED)
  submittedBy       String
  verifiedBy        String?
  verifiedAt        DateTime?
  sourceType        String              // "OFFICIAL_WEBSITE", "NEWS_ARTICLE", "PERSONAL_KNOWLEDGE"
  sourceUrl         String?
  sourceNotes       String?
  
  // Voting and consensus
  upvotes           Int                 @default(0)
  downvotes         Int                 @default(0)
  reportCount       Int                 @default(0)
  
  officeId          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  office            DistrictOffice      @relation(fields: [officeId], references: [id], onDelete: Cascade)
  submitter         User                @relation("OfficialSubmissions", fields: [submittedBy], references: [id])
  verifier          User?               @relation("OfficialVerifications", fields: [verifiedBy], references: [id])
  votes             CrowdsourceVote[]
  
  @@index([officeId])
  @@index([verificationLevel])
  @@index([submittedBy])
}

model AddressDistrictMapping {
  id               String             @id @default(cuid())
  address          String
  lat              Float
  lng              Float
  h3Index          String?            // H3 geospatial index for fast lookup
  zipCode          String
  state            String             @db.Char(2)
  
  // Mapping confidence and source
  confidence       Float              @default(0.0) // 0.0 to 1.0
  source           String             // "CENSUS", "GEOCODIO", "CROWDSOURCED"
  verifiedBy       String?
  verifiedAt       DateTime?
  
  districtId       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  // Relations
  district         ElectoralDistrict  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  verifier         User?              @relation("AddressMappingVerifications", fields: [verifiedBy], references: [id])
  
  @@index([h3Index])
  @@index([zipCode, state])
  @@index([lat, lng])
  @@index([districtId])
}

model DistrictConflict {
  id               String             @id @default(cuid())
  type             ConflictType       // "BOUNDARY_DISPUTE", "OFFICE_HOLDER_DISPUTE", "ELECTION_DATE_DISPUTE"
  description      String
  evidence         Json?              // Supporting documents, URLs, etc.
  
  // Resolution tracking
  status           ConflictStatus     @default(OPEN)
  priority         ConflictPriority   @default(MEDIUM)
  resolvedBy       String?
  resolvedAt       DateTime?
  resolution       String?
  
  reportedBy       String
  districtId       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  // Relations
  district         ElectoralDistrict  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  reporter         User               @relation("ConflictReports", fields: [reportedBy], references: [id])
  resolver         User?              @relation("ConflictResolutions", fields: [resolvedBy], references: [id])
  
  @@index([districtId, status])
  @@index([type, priority])
  @@index([reportedBy])
}

model CrowdsourceVote {
  id               String             @id @default(cuid())
  userId           String
  officialId       String
  voteType         VoteType           // "UPVOTE", "DOWNVOTE", "REPORT"
  reason           String?            // Why they voted/reported
  
  createdAt        DateTime           @default(now())
  
  // Relations
  user             User               @relation("CrowdsourceVotes", fields: [userId], references: [id], onDelete: Cascade)
  official         CrowdsourcedOfficial @relation(fields: [officialId], references: [id], onDelete: Cascade)
  
  @@unique([userId, officialId])
  @@index([officialId, voteType])
  @@index([userId])
}

// Legislative Voting Records & News System
model Legislature {
  id          String            @id @default(cuid())
  name        String            // e.g., "118th Congress", "Nevada 33rd Session"
  level       LegislatureLevel
  state       String?           @db.Char(2) // Null for federal
  chamber     Chamber?          // Null for unicameral
  session     String            // e.g., "118th", "2025"
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean           @default(true)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  bills       Bill[]
  votes       Vote[]
  memberships LegislativeMembership[]
  
  @@unique([level, state, session])
  @@index([isActive, level])
}

model LegislativeMembership {
  id           String      @id @default(cuid())
  legislatorId String      // Links to our elected officials
  legislatureId String
  district     String?     // District number/name
  party        String?
  leadership   String?     // Speaker, Majority Leader, etc.
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean     @default(true)
  
  // External IDs for API synchronization
  bioguideId   String?     // Congress.gov bioguide ID
  openStatesId String?     // Open States person ID
  thomasId     String?     // Legacy Thomas ID
  opensecrets  String?     // OpenSecrets ID
  votesmartId  String?     // Vote Smart ID
  govtrackId   String?     // GovTrack ID
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  legislature  Legislature @relation(fields: [legislatureId], references: [id], onDelete: Cascade)
  votes        LegislatorVote[]
  sponsorships BillSponsorship[]
  votingSummary VotingRecordSummary?
  
  @@unique([bioguideId, legislatureId])
  @@unique([openStatesId, legislatureId])
  @@index([legislatorId, isActive])
  @@index([legislatureId, district])
  @@index([bioguideId])
}

model Bill {
  id                String       @id @default(cuid())
  externalId        String       // e.g., "hr1234-118", from API
  number            String       // e.g., "H.R. 1234", "S. 567"
  title             String
  summary           String?      @db.Text
  fullText          String?      @db.Text
  status            BillStatus   @default(INTRODUCED)
  
  // Metadata
  introducedDate    DateTime
  lastActionDate    DateTime?
  chamber           Chamber
  level             LegislatureLevel
  state             String?      @db.Char(2) // Null for federal
  
  // Topic classification
  subjects          String[]     @default([])
  policyAreas       String[]     @default([])
  embedding         Float[]      @default([]) // For similarity search
  
  // External API metadata
  dataSource        String       // "congress_gov", "open_states", "legiscan"
  apiUrl            String?
  lastSynced        DateTime     @default(now())
  
  legislatureId     String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  legislature       Legislature  @relation(fields: [legislatureId], references: [id], onDelete: Cascade)
  votes             Vote[]
  sponsors          BillSponsorship[]
  newsArticles      NewsArticle[]
  
  @@unique([externalId, level])
  @@index([number, level, state])
  @@index([status, lastActionDate])
  @@index([subjects])
  @@index([legislatureId])
}

model BillSponsorship {
  id           String       @id @default(cuid())
  billId       String
  membershipId String
  isPrimary    Boolean      @default(false) // Primary sponsor vs co-sponsor
  dateSigned   DateTime
  
  createdAt    DateTime     @default(now())
  
  // Relations
  bill         Bill         @relation(fields: [billId], references: [id], onDelete: Cascade)
  membership   LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  
  @@unique([billId, membershipId])
  @@index([membershipId, isPrimary])
}

model Vote {
  id              String       @id @default(cuid())
  externalId      String       // Vote ID from external API
  number          String       // Roll call number
  question        String       // What was being voted on
  description     String?      @db.Text
  date            DateTime
  chamber         Chamber
  
  // Vote tallies
  yesCount        Int          @default(0)
  noCount         Int          @default(0)
  presentCount    Int          @default(0)
  notVotingCount  Int          @default(0)
  abstainCount    Int          @default(0)
  
  // Results
  passed          Boolean
  requiredMajority String?     // "Simple", "2/3", "3/5", etc.
  
  // Associated legislation
  billId          String?
  legislatureId   String
  
  // External API metadata
  dataSource      String       // "congress_gov", "open_states", "legiscan"
  apiUrl          String?
  lastSynced      DateTime     @default(now())
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  bill            Bill?        @relation(fields: [billId], references: [id], onDelete: Cascade)
  legislature     Legislature  @relation(fields: [legislatureId], references: [id], onDelete: Cascade)
  legislatorVotes LegislatorVote[]
  
  @@unique([externalId, chamber])
  @@index([date, chamber])
  @@index([billId])
  @@index([legislatureId])
}

model LegislatorVote {
  id           String             @id @default(cuid())
  voteId       String
  membershipId String
  position     VotePosition
  
  createdAt    DateTime           @default(now())
  
  // Relations
  vote         Vote               @relation(fields: [voteId], references: [id], onDelete: Cascade)
  membership   LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  
  @@unique([voteId, membershipId])
  @@index([membershipId, position])
  @@index([voteId])
}

model NewsArticle {
  id             String           @id @default(cuid())
  title          String
  aiSummary      String?          @db.Text // 200-400 char AI-generated summary
  url            String           @unique
  publishedAt    DateTime
  
  // Source information
  sourceName     String
  sourceType     NewsSourceType
  author         String?
  
  // Enhanced classification for historical tracking
  sentiment      ArticleSentiment @default(NEUTRAL)
  sentimentScore Float            @default(0.0) // -1.0 to 1.0 for nuanced sentiment
  keywords       String[]         @default([])
  politicalTopics String[]        @default([]) // Issues mentioned (healthcare, immigration, etc.)
  embedding      Float[]          @default([]) // Vector for similarity search
  
  // Historical accountability features
  relevanceScore     Float        @default(0.0) // 0.0 to 1.0
  positionKeywords   String[]     @default([]) // Policy positions extracted
  contradictionFlags String[]     @default([]) // Potential inconsistencies with past statements
  
  // External API metadata
  externalId     String?          // NewsAPI ID
  dataSource     String           // "newsapi", "thenewsapi", etc.
  lastSynced     DateTime         @default(now())
  
  // Cache metadata - articles cached indefinitely for historical reference
  cacheExpiry    DateTime?        // NULL = permanent cache
  isHistorical   Boolean          @default(true) // Mark as permanent historical record
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relations
  mentions       OfficialMention[]
  bills          Bill[]           // Many-to-many for bill coverage
  
  @@index([publishedAt, relevanceScore])
  @@index([sentiment, publishedAt])
  @@index([sourceName, publishedAt])
  @@index([isHistorical, publishedAt]) // For historical queries
  @@index([politicalTopics, publishedAt]) // For topic-based searches
}

model OfficialMention {
  id               String      @id @default(cuid())
  articleId        String
  officialName     String      // Name as mentioned in article
  officialId       String?     // Link to our official records
  districtId       String?     // Link to electoral district
  
  // Context of mention
  mentionContext   String?     @db.Text // Surrounding text
  sentimentScore   Float?      // -1.0 to 1.0
  prominenceScore  Float       @default(0.0) // How prominently featured
  
  // Position in article
  firstMention     Int?        // Character position of first mention
  mentionCount     Int         @default(1) // How many times mentioned
  
  createdAt        DateTime    @default(now())
  
  // Relations
  article          NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@index([officialId, articleId])
  @@index([districtId])
  @@index([officialName])
}

model VotingRecordSummary {
  id               String    @id @default(cuid())
  membershipId     String    @unique
  
  // Vote statistics
  totalVotes       Int       @default(0)
  yesVotes         Int       @default(0)
  noVotes          Int       @default(0)
  presentVotes     Int       @default(0)
  notVotingCount   Int       @default(0)
  abstainVotes     Int       @default(0)
  
  // Participation metrics
  participationRate Float    @default(0.0) // Percentage of votes cast
  partyUnityScore   Float?   // How often votes with party
  bipartisanScore   Float?   // Cross-party cooperation measure
  
  // Topic-based voting patterns (JSON object)
  topicVoting       Json?    // {"healthcare": {"yes": 5, "no": 2}, ...}
  
  // Date range for this summary
  periodStart       DateTime
  periodEnd         DateTime
  lastCalculated    DateTime @default(now())
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  membership        LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  
  @@index([membershipId])
  @@index([participationRate])
  @@index([lastCalculated])
}

model CandidateStaff {
  id                String             @id @default(cuid())
  inboxId           String
  userId            String
  role              StaffRole          @default(VOLUNTEER)
  permissions       StaffPermission[]
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  inbox             CandidateInbox     @relation(fields: [inboxId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses         InquiryResponse[]
  assignedInquiries PoliticalInquiry[] @relation("AssignedStaff")

  @@unique([inboxId, userId])
  @@index([userId])
  @@index([inboxId, isActive])
}

model PoliticalInquiry {
  id               String            @id @default(cuid())
  candidateId      String
  inquirerId       String?
  subject          String
  content          String
  category         InquiryCategory   @default(GENERAL)
  priority         InquiryPriority   @default(NORMAL)
  status           InquiryStatus     @default(OPEN)
  isPublic         Boolean           @default(false)
  isAnonymous      Boolean           @default(false)
  contactEmail     String?
  contactName      String?
  policyTopic      String?
  specificQuestion String?
  respondedAt      DateTime?
  assignedAt       DateTime?
  assignedTo       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  responses        InquiryResponse[]
  assignedStaff    CandidateStaff?   @relation("AssignedStaff", fields: [assignedTo], references: [id])
  candidate        Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  inquirer         User?             @relation("PoliticalInquiries", fields: [inquirerId], references: [id])
  publicQASource   PublicQA?         @relation("PublicQASource")

  @@index([candidateId, status])
  @@index([inquirerId])
  @@index([category, priority])
  @@index([isPublic])
  @@index([createdAt])
}

model InquiryResponse {
  id              String           @id @default(cuid())
  inquiryId       String
  responderId     String
  content         String
  responseType    ResponseType     @default(DIRECT)
  isPublic        Boolean          @default(false)
  isFromCandidate Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inquiry         PoliticalInquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  responder       CandidateStaff   @relation(fields: [responderId], references: [id], onDelete: Cascade)

  @@index([inquiryId])
  @@index([responderId])
  @@index([isPublic])
  @@index([createdAt])
}

model PublicQA {
  id              String            @id @default(cuid())
  candidateId     String
  question        String
  answer          String
  category        InquiryCategory   @default(GENERAL)
  isVisible       Boolean           @default(true)
  isPinned        Boolean           @default(false)
  upvotes         Int               @default(0)
  views           Int               @default(0)
  sourceInquiryId String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  candidate       Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  sourceInquiry   PoliticalInquiry? @relation("PublicQASource", fields: [sourceInquiryId], references: [id])
  votes           PublicQAVote[]

  @@index([candidateId, isVisible])
  @@index([category])
  @@index([isPinned, upvotes])
  @@index([createdAt])
}

model PublicQAVote {
  id        String   @id @default(cuid())
  qaId      String
  userId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  qa        PublicQA @relation(fields: [qaId], references: [id], onDelete: Cascade)
  user      User     @relation("PublicQAVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([qaId, userId])
  @@index([qaId])
  @@index([userId])
}

model CandidateRegistration {
  id                        String                      @id @default(cuid())
  userId                    String
  registrationId            String                      @unique
  firstName                 String
  lastName                  String
  email                     String
  phone                     String
  street                    String
  city                      String
  state                     String
  zipCode                   String
  district                  String?
  positionTitle             String
  positionLevel             String
  positionDistrict          String?
  electionDate              DateTime
  campaignName              String
  campaignWebsite           String?
  campaignSlogan            String?
  campaignDescription       String?
  status                    CandidateRegistrationStatus @default(PENDING_VERIFICATION)
  officeLevel               String
  registrationFee           Float
  originalFee               Float
  feeWaiverStatus           String                      @default("none")
  hasFinancialHardship      Boolean                     @default(false)
  hardshipReason            String?
  communityEndorsementCount Int                         @default(0)
  idmeVerified              Boolean                     @default(false)
  idmeUserId                String?
  idmeVerifiedAt            DateTime?
  verifiedFirstName         String?
  verifiedLastName          String?
  verifiedEmail             String?
  paidAt                    DateTime?
  paymentMethod             String?
  paymentIntentId           String?
  verifiedAt                DateTime?
  verifiedBy                String?
  verificationNotes         String?
  rejectedAt                DateTime?
  rejectedBy                String?
  rejectionReason           String?
  refundIssued              Boolean                     @default(false)
  termsAcceptedAt           DateTime
  withdrawnAt               DateTime?
  withdrawalReason          String?
  refundProcessedAt         DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([registrationId])
  @@index([status])
  @@index([officeLevel, state])
  @@index([electionDate])
  @@index([feeWaiverStatus])
  @@index([hasFinancialHardship])
  @@index([createdAt])
}

model SecurityEvent {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  ipAddress String?
  userAgent String?
  details   Json?
  riskScore Int      @default(0)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([riskScore])
}

model ReputationEvent {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  eventType String
  impact    Float
  reason    String?
  details   Json?
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([eventType])
  @@index([createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  VERIFICATION_APPROVED
  VERIFICATION_DENIED
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  PHOTO_TAG_REQUEST
  PHOTO_TAG_APPROVED
  PHOTO_TAG_DECLINED
  PRIVACY_REQUEST
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum PoliticalProfileType {
  CITIZEN
  CANDIDATE
  ELECTED_OFFICIAL
  POLITICAL_ORG
}

enum VerificationStatus {
  PENDING
  APPROVED
  DENIED
  NOT_REQUIRED
}

enum ElectionType {
  PRIMARY
  GENERAL
  SPECIAL
  LOCAL
  RUNOFF
}

enum ElectionLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum OfficeLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum BallotMeasureType {
  PROPOSITION
  BOND_MEASURE
  CONSTITUTIONAL_AMENDMENT
  INITIATIVE
  REFERENDUM
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

enum ReportTargetType {
  POST
  COMMENT
  USER
  MESSAGE
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  FAKE_ACCOUNT
  IMPERSONATION
  COPYRIGHT_VIOLATION
  VIOLENCE_THREATS
  SELF_HARM
  ILLEGAL_CONTENT
  OTHER
}

enum ReportStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  DISMISSED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ModerationAction {
  NO_ACTION
  WARNING_ISSUED
  CONTENT_HIDDEN
  CONTENT_DELETED
  USER_WARNED
  USER_SUSPENDED
  USER_BANNED
  APPEAL_APPROVED
  APPEAL_DENIED
}

enum ContentType {
  POST
  COMMENT
  USER_PROFILE
  MESSAGE
}

enum FlagType {
  SPAM
  TOXICITY
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_LANGUAGE
  FAKE_ENGAGEMENT
  DUPLICATE_CONTENT
  SUSPICIOUS_ACTIVITY
}

enum FlagSource {
  AUTOMATED
  USER_REPORT
  MANUAL_REVIEW
}

enum WarningSeverity {
  MINOR
  MODERATE
  MAJOR
  FINAL
}

enum SuspensionType {
  TEMPORARY
  PERMANENT
  POSTING_RESTRICTED
  COMMENTING_RESTRICTED
}

enum AppealStatus {
  PENDING
  APPROVED
  DENIED
}

enum PhotoType {
  AVATAR
  COVER
  CAMPAIGN
  VERIFICATION
  EVENT
  GALLERY
  POST_MEDIA
}

enum PhotoPurpose {
  PERSONAL
  CAMPAIGN
  BOTH
}

enum PhotoTagStatus {
  PENDING
  APPROVED
  DECLINED
  REMOVED
}

enum PhotoPrivacyRequestType {
  REMOVE_TAG
  REMOVE_PHOTO
  BLOCK_FUTURE
}

enum PhotoPrivacyRequestStatus {
  PENDING
  APPROVED
  DECLINED
  RESOLVED
}

enum StaffRole {
  CAMPAIGN_MANAGER
  COMMUNICATIONS_DIRECTOR
  POLICY_ADVISOR
  VOLUNTEER_COORDINATOR
  VOLUNTEER
  INTERN
}

enum StaffPermission {
  READ_INQUIRIES
  RESPOND_INQUIRIES
  ASSIGN_INQUIRIES
  MANAGE_STAFF
  MANAGE_SETTINGS
  PUBLISH_QA
  MODERATE_QA
}

enum InquiryCategory {
  GENERAL
  HEALTHCARE
  EDUCATION
  ECONOMY
  ENVIRONMENT
  IMMIGRATION
  FOREIGN_POLICY
  CRIMINAL_JUSTICE
  INFRASTRUCTURE
  HOUSING
  LABOR
  TECHNOLOGY
  CIVIL_RIGHTS
  BUDGET_TAXES
  ENERGY
  AGRICULTURE
  VETERANS
  SENIORS
  YOUTH
  FAMILY_VALUES
  OTHER
}

enum InquiryPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CANDIDATE
  RESOLVED
  CLOSED
  ARCHIVED
}

enum ResponseType {
  DIRECT
  PUBLIC_QA
  POLICY_STATEMENT
  REFERRAL
}

enum VoteType {
  UPVOTE
  DOWNVOTE
  REPORT
}

enum CandidateRegistrationStatus {
  PENDING_VERIFICATION
  PENDING_PAYMENT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  REFUNDED
}

// Electoral District Crowdsourcing Enums
enum DistrictType {
  CONGRESSIONAL
  STATE_SENATE
  STATE_HOUSE
  COUNTY
  MUNICIPAL
  SCHOOL
  WATER
  FIRE
  LIBRARY
  HOSPITAL
  TRANSIT
  CONSERVATION
  JUDICIAL
  TOWNSHIP
  PRECINCT
  OTHER_SPECIAL
}

enum DistrictLevel {
  FEDERAL
  STATE
  COUNTY
  MUNICIPAL
  SPECIAL
  LOCAL
}

enum VerificationLevel {
  UNVERIFIED
  COMMUNITY_VERIFIED  // Multiple user confirmations
  MODERATOR_VERIFIED  // Staff verified
  OFFICIAL_VERIFIED   // Government source verified
  DISPUTED           // Conflicting information reported
}

enum ConflictType {
  BOUNDARY_DISPUTE
  OFFICE_HOLDER_DISPUTE
  ELECTION_DATE_DISPUTE
  CONTACT_INFO_DISPUTE
  TERM_LENGTH_DISPUTE
  DUPLICATE_ENTRY
  OUTDATED_INFO
}

enum ConflictStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ConflictPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Legislative Voting Records & News Enums
enum LegislatureLevel {
  FEDERAL
  STATE
  LOCAL
}

enum Chamber {
  HOUSE
  SENATE
  UNICAMERAL  // For Nebraska and some local bodies
}

enum VotePosition {
  YEA
  NAY
  PRESENT
  NOT_VOTING
  ABSTAIN
}

enum BillStatus {
  INTRODUCED
  COMMITTEE
  FLOOR_VOTE
  PASSED_CHAMBER
  SENT_TO_OTHER_CHAMBER
  PASSED_BOTH
  SENT_TO_EXECUTIVE
  SIGNED
  VETOED
  BECAME_LAW
  DIED
}

enum NewsSourceType {
  NEWSPAPER
  MAGAZINE
  BLOG
  PRESS_RELEASE
  GOVERNMENT
  SOCIAL_MEDIA
  WIRE_SERVICE
  BROADCAST
}

enum ArticleSentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
  MIXED
}
