generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                    @id @default(cuid())
  email                       String                    @unique
  username                    String                    @unique
  password                    String?
  firstName                   String?
  lastName                    String?
  avatar                      String?
  bio                         String?
  website                     String?
  location                    String?
  verified                    Boolean                   @default(false)
  embedding                   Float[]                   @default([])
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  streetAddress               String?
  streetAddress2              String?
  city                        String?
  state                       String?
  zipCode                     String?
  h3Index                     String?
  politicalProfileType        PoliticalProfileType      @default(CITIZEN)
  verificationStatus          VerificationStatus        @default(PENDING)
  verificationDocuments       String[]                  @default([])
  office                      String?
  campaignWebsite             String?
  officialTitle               String?
  termStart                   DateTime?
  termEnd                     DateTime?
  emailVerified               Boolean                   @default(false)
  emailVerifyToken            String?                   @unique
  emailVerifyExpiry           DateTime?
  phoneNumber                 String?
  phoneVerified               Boolean                   @default(false)
  phoneVerifyCode             String?
  phoneVerifyExpiry           DateTime?
  maritalStatus               String?
  profilePrivacySettings      Json?                     @default("{\"bio\": \"public\", \"city\": \"followers\", \"state\": \"followers\", \"website\": \"public\", \"phoneNumber\": \"private\", \"maritalStatus\": \"friends\"}")
  resetToken                  String?
  resetExpiry                 DateTime?
  isOnline                    Boolean                   @default(false)
  lastSeenAt                  DateTime                  @default(now())
  isModerator                 Boolean                   @default(false)
  isAdmin                     Boolean                   @default(false)
  isSuperAdmin                Boolean                   @default(false)
  isSuspended                 Boolean                   @default(false)
  onboardingData              Json?
  onboardingCompleted         Boolean                   @default(false)
  interests                   String[]                  @default([])
  politicalExperience         String?
  notificationPreferences     Json?
  displayName                 String?
  followingCount              Int                       @default(0)
  followersCount              Int                       @default(0)
  deviceFingerprint           Json?
  lastLoginAt                 DateTime?
  lastLoginIp                 String?
  lockedUntil                 DateTime?
  loginAttempts               Int                       @default(0)
  passwordChangedAt           DateTime?                 @default(now())
  riskScore                   Int                       @default(0)
  suspiciousActivityCount     Int                       @default(0)
  reputationScore             Int?                      @default(70)
  reputationUpdatedAt         DateTime?
  allowTagsByFriendsOnly      Boolean                   @default(false)
  photoTaggingEnabled         Boolean                   @default(true)
  requireTagApproval          Boolean                   @default(true)
  backgroundImage             String?
  totpBackupCodes             String[]                  @default([])
  totpEnabled                 Boolean                   @default(false)
  totpLastUsedAt              DateTime?
  totpSecret                  String?
  totpSetupAt                 DateTime?
  addressMappingVerifications AddressDistrictMapping[]  @relation("AddressMappingVerifications")
  reviewedAppeals             Appeal[]                  @relation("ReviewedAppeals")
  appeals                     Appeal[]                  @relation("UserAppeals")
  candidateProfile            Candidate?
  readAdminMessages           CandidateAdminMessage[]   @relation("ReadAdminMessages")
  sentAdminMessages           CandidateAdminMessage[]   @relation("SentAdminMessages")
  candidateRegistrations      CandidateRegistration[]
  candidateStaffRoles         CandidateStaff[]
  eventsCreated               CivicEvent[]              @relation("EventCreator")
  comments                    Comment[]
  resolvedFlags               ContentFlag[]             @relation("ResolvedFlags")
  conversations               ConversationParticipant[]
  crowdsourceVotes            CrowdsourceVote[]         @relation("CrowdsourceVotes")
  officialSubmissions         CrowdsourcedOfficial[]    @relation("OfficialSubmissions")
  officialVerifications       CrowdsourcedOfficial[]    @relation("OfficialVerifications")
  conflictReports             DistrictConflict[]        @relation("ConflictReports")
  conflictResolutions         DistrictConflict[]        @relation("ConflictResolutions")
  officeSubmissions           DistrictOffice[]          @relation("OfficeSubmissions")
  officeVerifications         DistrictOffice[]          @relation("OfficeVerifications")
  districtSubmissions         ElectoralDistrict[]       @relation("DistrictSubmissions")
  districtVerifications       ElectoralDistrict[]       @relation("DistrictVerifications")
  endorsements                Endorsement[]
  eventRSVPs                  EventRSVP[]               @relation("EventRSVPs")
  following                   Follow[]                  @relation("Follower")
  followers                   Follow[]                  @relation("Following")
  receivedFriendRequests      Friendship[]              @relation("FriendshipRecipient")
  sentFriendRequests          Friendship[]              @relation("FriendshipRequester")
  likes                       Like[]
  dismissedMOTDs              MOTDDismissal[]           @relation("DismissedMOTDs")
  motdActions                 MOTDLog[]                 @relation("MOTDActions")
  viewedMOTDs                 MOTDView[]                @relation("ViewedMOTDs")
  sentMessages                Message[]                 @relation("SentMessages")
  createdMOTDs                MessageOfTheDay[]         @relation("CreatedMOTDs")
  moderationLogs              ModerationLog[]           @relation("ModerationLogs")
  moderationReviews           ImageModerationReview[]   @relation("ModerationReviews")
  receivedNotifications       Notification[]            @relation("NotificationReceiver")
  sentNotifications           Notification[]            @relation("NotificationSender")
  payments                    Payment[]
  petitionsCreated            Petition[]                @relation("PetitionCreator")
  petitionSignatures          PetitionSignature[]       @relation("PetitionSignatures")
  flaggedPhotos               Photo[]                   @relation("FlaggedPhotos")
  photos                      Photo[]
  photoPrivacyRequests        PhotoPrivacyRequest[]
  photoTagsCreated            PhotoTag[]                @relation("PhotoTagsCreated")
  photoTagsReceived           PhotoTag[]                @relation("PhotoTagsReceived")
  politicalInquiries          PoliticalInquiry[]        @relation("PoliticalInquiries")
  posts                       Post[]
  publicQAVotes               PublicQAVote[]            @relation("PublicQAVotes")
  reactions                   Reaction[]
  moderatedReports            Report[]                  @relation("ModeratedReports")
  reports                     Report[]                  @relation("UserReports")
  reputationEvents            ReputationEvent[]
  securityEvents              SecurityEvent[]
  shares                      Share[]
  stripeCustomer              StripeCustomer?
  subscribers                 Subscription[]            @relation("Subscribed")
  subscriptions               Subscription[]            @relation("Subscriber")
  topicComments               TopicComment[]
  activities                  UserActivity[]
  oauthProviders              UserOAuthProvider[]
  moderatorSuspensions        UserSuspension[]          @relation("ModeratorSuspensions")
  suspensions                 UserSuspension[]          @relation("UserSuspensions")
  issuedWarnings              UserWarning[]             @relation("IssuedWarnings")
  receivedWarnings            UserWarning[]             @relation("ReceivedWarnings")
  questProgress               UserQuestProgress[]
  questStreak                 UserQuestStreak?
  userBadges                  UserBadge[]

  @@index([username])
  @@index([createdAt])
  @@index([h3Index])
  @@index([politicalProfileType])
  @@index([zipCode, state])
}

model UserActivity {
  id           String       @id @default(cuid())
  userId       String
  activityType ActivityType
  targetType   String
  targetId     String
  metadata     Json?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([activityType])
  @@index([targetType, targetId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Subscription {
  id           String   @id @default(cuid())
  subscriberId String
  subscribedId String
  createdAt    DateTime @default(now())
  subscribed   User     @relation("Subscribed", fields: [subscribedId], references: [id], onDelete: Cascade)
  subscriber   User     @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, subscribedId])
  @@index([subscriberId])
  @@index([subscribedId])
}

model Friendship {
  id          String           @id @default(cuid())
  requesterId String
  recipientId String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  acceptedAt  DateTime?
  recipient   User             @relation("FriendshipRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  requester   User             @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)

  @@unique([requesterId, recipientId])
  @@index([requesterId])
  @@index([recipientId])
  @@index([status])
}

model Post {
  id                 String            @id @default(cuid())
  content            String
  extendedContent    String?
  imageUrl           String?
  authorId           String
  embedding          Float[]           @default([])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  isPolitical        Boolean           @default(false)
  tags               String[]          @default([])
  likesCount         Int               @default(0)
  dislikesCount      Int               @default(0)
  agreesCount        Int               @default(0)
  disagreesCount     Int               @default(0)
  commentsCount      Int               @default(0)
  sharesCount        Int               @default(0)
  viewsCount         Int               @default(0)
  containsFeedback   Boolean?          @default(false)
  feedbackCategory   String?
  feedbackConfidence Float?
  feedbackPriority   String?
  feedbackStatus     String?           @default("new")
  feedbackSummary    String?
  feedbackType       String?
  authorReputation   Int?
  isDeleted          Boolean           @default(false)
  deletedAt          DateTime?
  deletedReason      String?
  searchable         Boolean           @default(true)
  feedVisible        Boolean           @default(true)
  editCount          Int               @default(0)
  lastEditedAt       DateTime?
  editHistory        Json?
  originalContent    String?
  h3Index            String?
  latitude           Float?
  longitude          Float?
  originalH3Index    String?
  privacyDisplaced   Boolean           @default(true)
  comments           Comment[]
  likes              Like[]
  photos             Photo[]
  author             User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions          Reaction[]
  reputationEvents   ReputationEvent[]
  shares             Share[]
  topics             TopicPost[]

  @@index([authorId])
  @@index([createdAt])
  @@index([h3Index])
  @@index([h3Index, createdAt])
  @@index([originalH3Index, createdAt])
  @@index([likesCount])
  @@index([isPolitical])
  @@index([containsFeedback, feedbackType, feedbackPriority])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Reaction {
  id        String             @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  sentiment ReactionSentiment?
  stance    ReactionStance?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  comment   Comment?           @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
  @@index([userId])
  @@index([updatedAt])
}

model Share {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  content   String?
  shareType ShareType @default(SIMPLE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

model Comment {
  id              String     @id @default(cuid())
  content         String
  userId          String
  postId          String
  parentId        String?
  depth           Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isDeleted       Boolean    @default(false)
  deletedAt       DateTime?
  showUsername    Boolean    @default(true)
  editCount       Int        @default(0)
  lastEditedAt    DateTime?
  originalContent String?
  likesCount      Int        @default(0)
  dislikesCount   Int        @default(0)
  agreesCount     Int        @default(0)
  disagreesCount  Int        @default(0)
  parent          Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[]  @relation("CommentReplies")
  post            Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions       Reaction[]

  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  senderId   String?
  receiverId String
  postId     String?
  commentId  String?
  message    String
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
  receiver   User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?            @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId, read])
  @@index([createdAt])
}

model Election {
  id                   String          @id @default(cuid())
  name                 String
  type                 ElectionType
  level                ElectionLevel
  date                 DateTime
  registrationDeadline DateTime?
  state                String
  county               String?
  city                 String?
  district             String?
  isActive             Boolean         @default(true)
  description          String?
  officialUrl          String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  ballotMeasures       BallotMeasure[]
  offices              Office[]

  @@index([state, date])
  @@index([level, date])
}

model Office {
  id           String      @id @default(cuid())
  title        String
  level        OfficeLevel
  description  String?
  state        String
  district     String?
  jurisdiction String?
  termLength   Int?
  salary       Decimal?
  electionId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  candidates   Candidate[]
  election     Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@index([electionId])
  @@index([state, level])
}

model Candidate {
  id                     String                          @id @default(cuid())
  name                   String
  party                  String?
  isIncumbent            Boolean                         @default(false)
  campaignWebsite        String?
  campaignEmail          String?
  campaignPhone          String?
  platformSummary        String?
  keyIssues              String[]                        @default([])
  embedding              Float[]                         @default([])
  isVerified             Boolean                         @default(false)
  isWithdrawn            Boolean                         @default(false)
  withdrawnAt            DateTime?
  withdrawnReason        String?
  userId                 String?                         @unique
  officeId               String
  createdAt              DateTime                        @default(now())
  updatedAt              DateTime                        @updatedAt
  status                 CandidateStatus?                @default(ACTIVE)
  statusChangedAt        DateTime?
  statusChangedBy        String?
  statusReason           String?
  suspendedUntil         DateTime?
  appealDeadline         DateTime?
  appealNotes            String?
  lastVerificationDate   DateTime?
  nextVerificationDue    DateTime?
  verificationStatus     String?                         @default("PENDING_INITIAL")
  thirdPartyVerification Boolean                         @default(false)
  isExternallySourced    Boolean                         @default(false)
  externalSourceId       String?
  dataSource             String?
  lastExternalSync       DateTime?
  externalDataConfidence Float?
  isClaimed              Boolean                         @default(false)
  claimedBy              String?
  claimedAt              DateTime?
  googleCivicId          String?
  fecCandidateId         String?
  ballotpediaId          String?
  externalPhotoUrl       String?
  externalBiography      String?
  externalKeyIssues      String[]                        @default([])
  office                 Office                          @relation(fields: [officeId], references: [id], onDelete: Cascade)
  user                   User?                           @relation(fields: [userId], references: [id])
  adminMessages          CandidateAdminMessage[]
  inbox                  CandidateInbox?
  verificationDocuments  CandidateVerificationDocument[]
  endorsements           Endorsement[]
  financialData          FinancialData?
  photos                 Photo[]
  policyPositions        PolicyPosition[]
  politicalInquiries     PoliticalInquiry[]
  publicQAs              PublicQA[]

  @@index([officeId])
  @@index([party])
  @@index([userId])
  @@index([statusChangedAt])
  @@index([status])
}

model BallotMeasure {
  id           String            @id @default(cuid())
  title        String
  description  String
  type         BallotMeasureType
  number       String?
  fullText     String?
  fiscalImpact String?
  arguments    Json?
  state        String
  county       String?
  city         String?
  electionId   String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  election     Election          @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@index([electionId])
  @@index([state, type])
}

model FinancialData {
  id                  String    @id @default(cuid())
  candidateId         String    @unique
  totalRaised         Decimal   @default(0)
  totalSpent          Decimal   @default(0)
  cashOnHand          Decimal   @default(0)
  debts               Decimal   @default(0)
  individualDonations Decimal   @default(0)
  pacDonations        Decimal   @default(0)
  selfFunding         Decimal   @default(0)
  publicFunding       Decimal   @default(0)
  reportingPeriod     String?
  lastUpdated         DateTime  @default(now())
  sourceUrl           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  candidate           Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id          String    @id @default(cuid())
  userId      String
  candidateId String
  reason      String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, candidateId])
  @@index([candidateId])
  @@index([userId])
}

model Topic {
  id               String         @id @default(cuid())
  title            String
  description      String?
  embedding        Float[]        @default([])
  argumentsFor     String[]       @default([])
  argumentsAgainst String[]       @default([])
  neutralSummary   String?
  category         String?
  complexityScore  Float          @default(0)
  evidenceQuality  Float          @default(0)
  controversyScore Float          @default(0)
  postCount        Int            @default(0)
  participantCount Int            @default(0)
  viewCount        Int            @default(0)
  trendingScore    Float          @default(0)
  isActive         Boolean        @default(true)
  lastActivityAt   DateTime       @default(now())
  state            String?
  district         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subTopics        SubTopic[]
  topicComments    TopicComment[]
  posts            TopicPost[]

  @@index([trendingScore, lastActivityAt])
  @@index([category, isActive])
  @@index([controversyScore])
  @@index([state, district])
}

model SubTopic {
  id               String         @id @default(cuid())
  parentTopicId    String
  title            String
  summary          String?
  embedding        Float[]        @default([])
  commentCount     Int            @default(0)
  participantCount Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  parentTopic      Topic          @relation(fields: [parentTopicId], references: [id], onDelete: Cascade)
  comments         TopicComment[]

  @@index([parentTopicId])
}

model TopicPost {
  id             String   @id @default(cuid())
  topicId        String
  postId         String
  relevanceScore Float    @default(0.5)
  createdAt      DateTime @default(now())
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic          Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([topicId, postId])
  @@index([topicId, relevanceScore])
}

model TopicComment {
  id               String         @id @default(cuid())
  content          String
  authorId         String
  topicId          String?
  subTopicId       String?
  parentId         String?
  embedding        Float[]        @default([])
  sentiment        Float?
  hostilityScore   Float          @default(0)
  argumentStrength Float          @default(0)
  evidenceLevel    Float          @default(0)
  topicRelevance   Float          @default(0)
  isHidden         Boolean        @default(false)
  hideReason       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent           TopicComment?  @relation("TopicCommentReplies", fields: [parentId], references: [id])
  replies          TopicComment[] @relation("TopicCommentReplies")
  subTopic         SubTopic?      @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  topic            Topic?         @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId, createdAt])
  @@index([subTopicId, createdAt])
  @@index([authorId])
  @@index([parentId])
}

model Conversation {
  id                  String                    @id @default(cuid())
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  lastMessageAt       DateTime?
  lastMessageContent  String?
  lastMessageSenderId String?
  participants        ConversationParticipant[]
  messages            Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  messageType    MessageType  @default(TEXT)
  imageUrl       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
}

model ApiCache {
  id           String   @id @default(cuid())
  provider     String
  cacheKey     String
  responseData Json
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  hitCount     Int      @default(0)

  @@unique([provider, cacheKey])
  @@index([provider, cacheKey])
  @@index([expiresAt])
}

model ExternalOfficial {
  id          String   @id @default(cuid())
  externalId  String
  provider    String
  name        String
  office      String
  district    String?
  party       String?
  contactInfo Json?
  photoUrl    String?
  zipCode     String
  state       String
  h3Index     String?
  lastUpdated DateTime @default(now())

  @@unique([provider, externalId])
  @@index([zipCode, state])
  @@index([h3Index])
}

model Report {
  id                String            @id @default(cuid())
  reporterId        String
  targetType        ReportTargetType
  targetId          String
  reason            ReportReason
  description       String?
  status            ReportStatus      @default(PENDING)
  priority          ReportPriority    @default(LOW)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  moderatedAt       DateTime?
  moderatorId       String?
  moderatorNotes    String?
  actionTaken       ModerationAction?
  reporterDistrict  String?
  candidateDistrict String?
  geographicWeight  Float?            @default(1.0)
  aiAssessmentScore Float?
  aiUrgencyLevel    String?
  aiAnalysisNotes   String?
  aiAssessedAt      DateTime?
  moderator         User?             @relation("ModeratedReports", fields: [moderatorId], references: [id])
  reporter          User              @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status, priority])
  @@index([createdAt])
}

model ContentFlag {
  id          String      @id @default(cuid())
  contentType ContentType
  contentId   String
  flagType    FlagType
  confidence  Float
  source      FlagSource
  details     Json?
  resolved    Boolean     @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime    @default(now())
  resolver    User?       @relation("ResolvedFlags", fields: [resolvedBy], references: [id])

  @@index([contentType, contentId])
  @@index([flagType, resolved])
  @@index([confidence])
  @@index([createdAt])
}

model ModerationLog {
  id          String           @id @default(cuid())
  moderatorId String
  targetType  ReportTargetType
  targetId    String
  action      ModerationAction
  reason      String
  notes       String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  moderator   User             @relation("ModerationLogs", fields: [moderatorId], references: [id], onDelete: Cascade)

  @@index([moderatorId])
  @@index([targetType, targetId])
  @@index([action])
  @@index([createdAt])
}

model UserWarning {
  id             String          @id @default(cuid())
  userId         String
  moderatorId    String
  reason         String
  severity       WarningSeverity
  notes          String?
  acknowledged   Boolean         @default(false)
  acknowledgedAt DateTime?
  expiresAt      DateTime?
  createdAt      DateTime        @default(now())
  moderator      User            @relation("IssuedWarnings", fields: [moderatorId], references: [id], onDelete: Cascade)
  user           User            @relation("ReceivedWarnings", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([severity, expiresAt])
  @@index([createdAt])
}

model UserSuspension {
  id          String         @id @default(cuid())
  userId      String
  moderatorId String
  reason      String
  type        SuspensionType
  startsAt    DateTime       @default(now())
  endsAt      DateTime?
  notes       String?
  appealed    Boolean        @default(false)
  appealedAt  DateTime?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  appeal      Appeal?
  moderator   User           @relation("ModeratorSuspensions", fields: [moderatorId], references: [id], onDelete: Cascade)
  user        User           @relation("UserSuspensions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([endsAt])
  @@index([createdAt])
}

model Appeal {
  id             String         @id @default(cuid())
  userId         String
  suspensionId   String         @unique
  reason         String
  additionalInfo String?
  status         AppealStatus   @default(PENDING)
  reviewNotes    String?
  reviewedBy     String?
  reviewedAt     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviewedByUser User?          @relation("ReviewedAppeals", fields: [reviewedBy], references: [id])
  suspension     UserSuspension @relation(fields: [suspensionId], references: [id], onDelete: Cascade)
  user           User           @relation("UserAppeals", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ElectionCache {
  id          String   @id @default(cuid())
  stateCode   String   @unique
  data        String
  source      String
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([stateCode])
  @@index([lastUpdated])
}

model Photo {
  id                    String                    @id @default(cuid())
  userId                String
  filename              String
  url                   String
  thumbnailUrl          String?
  photoType             PhotoType
  purpose               PhotoPurpose              @default(PERSONAL)
  originalSize          Int
  compressedSize        Int
  width                 Int
  height                Int
  mimeType              String
  isApproved            Boolean                   @default(false)
  flaggedBy             String?
  flagReason            String?
  moderatedAt           DateTime?
  candidateId           String?
  isActive              Boolean                   @default(true)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  caption               String?
  gallery               String?                   @default("My Photos")
  postId                String?
  moderationStatus      ModerationStatus          @default(PENDING)
  moderationScore       Float?                    @default(0.0)
  requiresReview        Boolean                   @default(false)
  autoModerationPassed  Boolean?                  @default(false)
  humanReviewRequired   Boolean                   @default(false)
  lastModerationAt      DateTime?
  moderationMetadata    Json?
  candidate             Candidate?                @relation(fields: [candidateId], references: [id])
  flaggedByUser         User?                     @relation("FlaggedPhotos", fields: [flaggedBy], references: [id])
  post                  Post?                     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  privacyRequests       PhotoPrivacyRequest[]
  tags                  PhotoTag[]
  moderationResults     ImageModerationResult[]

  @@index([userId])
  @@index([candidateId])
  @@index([photoType, purpose])
  @@index([isApproved, isActive])
  @@index([createdAt])
  @@index([moderationStatus])
  @@index([moderationScore])
  @@index([requiresReview, humanReviewRequired])
  @@index([lastModerationAt])
  @@index([moderationStatus, createdAt])
}

model PhotoTag {
  id         String         @id @default(cuid())
  photoId    String
  taggedById String
  taggedId   String
  x          Float
  y          Float
  status     PhotoTagStatus @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  photo      Photo          @relation(fields: [photoId], references: [id], onDelete: Cascade)
  taggedBy   User           @relation("PhotoTagsCreated", fields: [taggedById], references: [id])
  tagged     User           @relation("PhotoTagsReceived", fields: [taggedId], references: [id])

  @@unique([photoId, taggedId])
  @@index([taggedId, status])
  @@index([photoId])
}

model PhotoPrivacyRequest {
  id        String                    @id @default(cuid())
  photoId   String
  userId    String
  type      PhotoPrivacyRequestType
  reason    String?
  status    PhotoPrivacyRequestStatus @default(PENDING)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  photo     Photo                     @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([photoId, userId])
  @@index([userId, status])
  @@index([status, createdAt])
}

model ImageModerationResult {
  id                   String              @id @default(cuid())
  photoId              String              @unique
  moderationType       String              @default("AI_ANALYSIS")
  aiAnalysisResults    Json?
  overallConfidence    Float               @default(0.0)
  categories           ModerationCategory[] @default([])
  primaryCategory      ModerationCategory?
  riskScore            Float               @default(0.0)
  isSafe               Boolean             @default(true)
  requiresHumanReview  Boolean             @default(false)
  detectedObjects      String[]            @default([])
  detectedText         String?
  textAnalysis         Json?
  faceCount            Int?                @default(0)
  adultContentScore    Float?              @default(0.0)
  violenceScore        Float?              @default(0.0)
  racyScore            Float?              @default(0.0)
  hateSpeechScore      Float?              @default(0.0)
  spamScore            Float?              @default(0.0)
  qualityScore         Float?              @default(0.0)
  technicalMetadata    Json?
  processingTime       Int?
  aiModel              String?
  modelVersion         String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  photo                Photo               @relation(fields: [photoId], references: [id], onDelete: Cascade)
  reviews              ImageModerationReview[]

  @@index([moderationType])
  @@index([primaryCategory])
  @@index([riskScore])
  @@index([isSafe, requiresHumanReview])
  @@index([createdAt])
  @@index([aiModel, modelVersion])
}

model ImageModerationReview {
  id                  String            @id @default(cuid())
  moderationResultId  String
  reviewerId          String
  decision            ModerationDecision
  reason              String?
  notes               String?
  confidenceOverride  Float?
  categoryOverride    ModerationCategory?
  isAppeal            Boolean           @default(false)
  originalDecision    ModerationDecision?
  reviewedAt          DateTime          @default(now())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  moderationResult    ImageModerationResult @relation(fields: [moderationResultId], references: [id], onDelete: Cascade)
  reviewer            User              @relation("ModerationReviews", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([moderationResultId])
  @@index([reviewerId])
  @@index([decision])
  @@index([isAppeal])
  @@index([reviewedAt])
}

model CandidateInbox {
  id           String           @id @default(cuid())
  candidateId  String           @unique
  isActive     Boolean          @default(true)
  allowPublicQ Boolean          @default(true)
  autoResponse String?
  staffEmails  String[]         @default([])
  categories   String[]         @default([])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  candidate    Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  staffMembers CandidateStaff[]

  @@index([candidateId])
}

model CandidateAdminMessage {
  id          String                  @id @default(cuid())
  candidateId String
  senderId    String?
  isFromAdmin Boolean                 @default(false)
  messageType AdminMessageType        @default(GENERAL)
  priority    AdminMessagePriority    @default(NORMAL)
  subject     String?
  content     String
  attachments String[]                @default([])
  isRead      Boolean                 @default(false)
  readAt      DateTime?
  readBy      String?
  threadId    String?
  replyToId   String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt
  candidate   Candidate               @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  readByUser  User?                   @relation("ReadAdminMessages", fields: [readBy], references: [id])
  replyTo     CandidateAdminMessage?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     CandidateAdminMessage[] @relation("MessageReplies")
  sender      User?                   @relation("SentAdminMessages", fields: [senderId], references: [id])

  @@index([candidateId, createdAt])
  @@index([threadId])
  @@index([isRead, priority])
  @@index([messageType, createdAt])
}

model ElectoralDistrict {
  id                String                   @id @default(cuid())
  name              String
  type              DistrictType
  level             DistrictLevel
  identifier        String
  state             String                   @db.Char(2)
  county            String?
  municipality      String?
  coordinates       Json?
  population        Int?
  isActive          Boolean                  @default(true)
  verificationLevel VerificationLevel        @default(UNVERIFIED)
  submittedBy       String?
  verifiedBy        String?
  verifiedAt        DateTime?
  conflictCount     Int                      @default(0)
  externalId        String?
  dataSource        String?
  parentDistrict    String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  addressMappings   AddressDistrictMapping[]
  conflicts         DistrictConflict[]
  offices           DistrictOffice[]
  parent            ElectoralDistrict?       @relation("DistrictHierarchy", fields: [parentDistrict], references: [id])
  children          ElectoralDistrict[]      @relation("DistrictHierarchy")
  submitter         User?                    @relation("DistrictSubmissions", fields: [submittedBy], references: [id])
  verifier          User?                    @relation("DistrictVerifications", fields: [verifiedBy], references: [id])

  @@unique([identifier, state, type])
  @@index([state, type, level])
  @@index([verificationLevel])
  @@index([isActive, type])
}

model DistrictOffice {
  id                  String                 @id @default(cuid())
  title               String
  level               OfficeLevel
  termLength          Int?
  electionCycle       String?
  nextElection        DateTime?
  salary              Decimal?
  hasTermLimits       Boolean                @default(false)
  maxTerms            Int?
  currentOfficeholder String?
  holderStartDate     DateTime?
  holderEndDate       DateTime?
  holderParty         String?
  holderContactInfo   Json?
  holderPhotoUrl      String?
  verificationLevel   VerificationLevel      @default(UNVERIFIED)
  submittedBy         String?
  verifiedBy          String?
  verifiedAt          DateTime?
  dataSource          String?
  sourceUrl           String?
  lastVerified        DateTime?
  districtId          String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  crowdsourcedData    CrowdsourcedOfficial[]
  district            ElectoralDistrict      @relation(fields: [districtId], references: [id], onDelete: Cascade)
  submitter           User?                  @relation("OfficeSubmissions", fields: [submittedBy], references: [id])
  verifier            User?                  @relation("OfficeVerifications", fields: [verifiedBy], references: [id])

  @@index([districtId])
  @@index([level, nextElection])
  @@index([verificationLevel])
}

model CrowdsourcedOfficial {
  id                 String            @id @default(cuid())
  name               String
  party              String?
  contactInfo        Json?
  photoUrl           String?
  website            String?
  socialMedia        Json?
  biography          String?
  keyAccomplishments String?
  verificationLevel  VerificationLevel @default(UNVERIFIED)
  submittedBy        String
  verifiedBy         String?
  verifiedAt         DateTime?
  sourceType         String
  sourceUrl          String?
  sourceNotes        String?
  upvotes            Int               @default(0)
  downvotes          Int               @default(0)
  reportCount        Int               @default(0)
  officeId           String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  votes              CrowdsourceVote[]
  office             DistrictOffice    @relation(fields: [officeId], references: [id], onDelete: Cascade)
  submitter          User              @relation("OfficialSubmissions", fields: [submittedBy], references: [id])
  verifier           User?             @relation("OfficialVerifications", fields: [verifiedBy], references: [id])

  @@index([officeId])
  @@index([verificationLevel])
  @@index([submittedBy])
}

model AddressDistrictMapping {
  id         String            @id @default(cuid())
  address    String
  lat        Float
  lng        Float
  h3Index    String?
  zipCode    String
  state      String            @db.Char(2)
  confidence Float             @default(0.0)
  source     String
  verifiedBy String?
  verifiedAt DateTime?
  districtId String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  district   ElectoralDistrict @relation(fields: [districtId], references: [id], onDelete: Cascade)
  verifier   User?             @relation("AddressMappingVerifications", fields: [verifiedBy], references: [id])

  @@index([h3Index])
  @@index([zipCode, state])
  @@index([lat, lng])
  @@index([districtId])
}

model DistrictConflict {
  id          String            @id @default(cuid())
  type        ConflictType
  description String
  evidence    Json?
  status      ConflictStatus    @default(OPEN)
  priority    ConflictPriority  @default(MEDIUM)
  resolvedBy  String?
  resolvedAt  DateTime?
  resolution  String?
  reportedBy  String
  districtId  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  district    ElectoralDistrict @relation(fields: [districtId], references: [id], onDelete: Cascade)
  reporter    User              @relation("ConflictReports", fields: [reportedBy], references: [id])
  resolver    User?             @relation("ConflictResolutions", fields: [resolvedBy], references: [id])

  @@index([districtId, status])
  @@index([type, priority])
  @@index([reportedBy])
}

model CrowdsourceVote {
  id         String               @id @default(cuid())
  userId     String
  officialId String
  voteType   VoteType
  reason     String?
  createdAt  DateTime             @default(now())
  official   CrowdsourcedOfficial @relation(fields: [officialId], references: [id], onDelete: Cascade)
  user       User                 @relation("CrowdsourceVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, officialId])
  @@index([officialId, voteType])
  @@index([userId])
}

model Legislature {
  id          String                  @id @default(cuid())
  name        String
  level       LegislatureLevel
  state       String?                 @db.Char(2)
  chamber     Chamber?
  session     String
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  bills       Bill[]
  memberships LegislativeMembership[]
  votes       Vote[]

  @@unique([level, state, session])
  @@index([isActive, level])
}

model LegislativeMembership {
  id            String               @id @default(cuid())
  legislatorId  String
  legislatureId String
  district      String?
  party         String?
  leadership    String?
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean              @default(true)
  bioguideId    String?
  openStatesId  String?
  thomasId      String?
  opensecrets   String?
  votesmartId   String?
  govtrackId    String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  sponsorships  BillSponsorship[]
  legislature   Legislature          @relation(fields: [legislatureId], references: [id], onDelete: Cascade)
  votes         LegislatorVote[]
  votingSummary VotingRecordSummary?

  @@unique([bioguideId, legislatureId])
  @@unique([openStatesId, legislatureId])
  @@index([legislatorId, isActive])
  @@index([legislatureId, district])
  @@index([bioguideId])
}

model Bill {
  id             String            @id @default(cuid())
  externalId     String
  number         String
  title          String
  summary        String?
  fullText       String?
  status         BillStatus        @default(INTRODUCED)
  introducedDate DateTime
  lastActionDate DateTime?
  chamber        Chamber
  level          LegislatureLevel
  state          String?           @db.Char(2)
  subjects       String[]          @default([])
  policyAreas    String[]          @default([])
  embedding      Float[]           @default([])
  dataSource     String
  apiUrl         String?
  lastSynced     DateTime          @default(now())
  legislatureId  String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  legislature    Legislature       @relation(fields: [legislatureId], references: [id], onDelete: Cascade)
  sponsors       BillSponsorship[]
  votes          Vote[]
  newsArticles   NewsArticle[]     @relation("BillToNewsArticle")

  @@unique([externalId, level])
  @@index([number, level, state])
  @@index([status, lastActionDate])
  @@index([subjects])
  @@index([legislatureId])
}

model BillSponsorship {
  id           String                @id @default(cuid())
  billId       String
  membershipId String
  isPrimary    Boolean               @default(false)
  dateSigned   DateTime
  createdAt    DateTime              @default(now())
  bill         Bill                  @relation(fields: [billId], references: [id], onDelete: Cascade)
  membership   LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@unique([billId, membershipId])
  @@index([membershipId, isPrimary])
}

model Vote {
  id               String           @id @default(cuid())
  externalId       String
  number           String
  question         String
  description      String?
  date             DateTime
  chamber          Chamber
  yesCount         Int              @default(0)
  noCount          Int              @default(0)
  presentCount     Int              @default(0)
  notVotingCount   Int              @default(0)
  abstainCount     Int              @default(0)
  passed           Boolean
  requiredMajority String?
  billId           String?
  legislatureId    String
  dataSource       String
  apiUrl           String?
  lastSynced       DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  legislatorVotes  LegislatorVote[]
  bill             Bill?            @relation(fields: [billId], references: [id], onDelete: Cascade)
  legislature      Legislature      @relation(fields: [legislatureId], references: [id], onDelete: Cascade)

  @@unique([externalId, chamber])
  @@index([date, chamber])
  @@index([billId])
  @@index([legislatureId])
}

model LegislatorVote {
  id           String                @id @default(cuid())
  voteId       String
  membershipId String
  position     VotePosition
  createdAt    DateTime              @default(now())
  membership   LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  vote         Vote                  @relation(fields: [voteId], references: [id], onDelete: Cascade)

  @@unique([voteId, membershipId])
  @@index([membershipId, position])
  @@index([voteId])
}

model NewsArticle {
  id                 String            @id @default(cuid())
  title              String
  aiSummary          String?
  url                String            @unique
  publishedAt        DateTime
  sourceName         String
  sourceType         NewsSourceType
  author             String?
  sentiment          ArticleSentiment  @default(NEUTRAL)
  sentimentScore     Float             @default(0.0)
  keywords           String[]          @default([])
  politicalTopics    String[]          @default([])
  embedding          Float[]           @default([])
  relevanceScore     Float             @default(0.0)
  positionKeywords   String[]          @default([])
  contradictionFlags String[]          @default([])
  externalId         String?
  dataSource         String
  lastSynced         DateTime          @default(now())
  cacheExpiry        DateTime?
  isHistorical       Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  mentions           OfficialMention[]
  bills              Bill[]            @relation("BillToNewsArticle")

  @@index([publishedAt, relevanceScore])
  @@index([sentiment, publishedAt])
  @@index([sourceName, publishedAt])
  @@index([isHistorical, publishedAt])
  @@index([politicalTopics, publishedAt])
}

model OfficialMention {
  id              String      @id @default(cuid())
  articleId       String
  officialName    String
  officialId      String?
  districtId      String?
  mentionContext  String?
  sentimentScore  Float?
  prominenceScore Float       @default(0.0)
  firstMention    Int?
  mentionCount    Int         @default(1)
  createdAt       DateTime    @default(now())
  article         NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([officialId, articleId])
  @@index([districtId])
  @@index([officialName])
}

model VotingRecordSummary {
  id                String                @id @default(cuid())
  membershipId      String                @unique
  totalVotes        Int                   @default(0)
  yesVotes          Int                   @default(0)
  noVotes           Int                   @default(0)
  presentVotes      Int                   @default(0)
  notVotingCount    Int                   @default(0)
  abstainVotes      Int                   @default(0)
  participationRate Float                 @default(0.0)
  partyUnityScore   Float?
  bipartisanScore   Float?
  topicVoting       Json?
  periodStart       DateTime
  periodEnd         DateTime
  lastCalculated    DateTime              @default(now())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  membership        LegislativeMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([membershipId])
  @@index([participationRate])
  @@index([lastCalculated])
}

model CandidateStaff {
  id                String             @id @default(cuid())
  inboxId           String
  userId            String
  role              StaffRole          @default(VOLUNTEER)
  permissions       StaffPermission[]
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  inbox             CandidateInbox     @relation(fields: [inboxId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses         InquiryResponse[]
  assignedInquiries PoliticalInquiry[] @relation("AssignedStaff")

  @@unique([inboxId, userId])
  @@index([userId])
  @@index([inboxId, isActive])
}

model PoliticalInquiry {
  id               String            @id @default(cuid())
  candidateId      String
  inquirerId       String?
  subject          String
  content          String
  category         InquiryCategory   @default(GENERAL)
  priority         InquiryPriority   @default(NORMAL)
  status           InquiryStatus     @default(OPEN)
  isPublic         Boolean           @default(false)
  isAnonymous      Boolean           @default(false)
  contactEmail     String?
  contactName      String?
  policyTopic      String?
  specificQuestion String?
  respondedAt      DateTime?
  assignedAt       DateTime?
  assignedTo       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  responses        InquiryResponse[]
  assignedStaff    CandidateStaff?   @relation("AssignedStaff", fields: [assignedTo], references: [id])
  candidate        Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  inquirer         User?             @relation("PoliticalInquiries", fields: [inquirerId], references: [id])
  publicQASource   PublicQA?         @relation("PublicQASource")

  @@index([candidateId, status])
  @@index([inquirerId])
  @@index([category, priority])
  @@index([isPublic])
  @@index([createdAt])
}

model InquiryResponse {
  id              String           @id @default(cuid())
  inquiryId       String
  responderId     String
  content         String
  responseType    ResponseType     @default(DIRECT)
  isPublic        Boolean          @default(false)
  isFromCandidate Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inquiry         PoliticalInquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  responder       CandidateStaff   @relation(fields: [responderId], references: [id], onDelete: Cascade)

  @@index([inquiryId])
  @@index([responderId])
  @@index([isPublic])
  @@index([createdAt])
}

model PublicQA {
  id              String            @id @default(cuid())
  candidateId     String
  question        String
  answer          String
  category        InquiryCategory   @default(GENERAL)
  isVisible       Boolean           @default(true)
  isPinned        Boolean           @default(false)
  upvotes         Int               @default(0)
  views           Int               @default(0)
  sourceInquiryId String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  candidate       Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  sourceInquiry   PoliticalInquiry? @relation("PublicQASource", fields: [sourceInquiryId], references: [id])
  votes           PublicQAVote[]

  @@index([candidateId, isVisible])
  @@index([category])
  @@index([isPinned, upvotes])
  @@index([createdAt])
}

model PublicQAVote {
  id        String   @id @default(cuid())
  qaId      String
  userId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  qa        PublicQA @relation(fields: [qaId], references: [id], onDelete: Cascade)
  user      User     @relation("PublicQAVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([qaId, userId])
  @@index([qaId])
  @@index([userId])
}

model CandidateVerificationDocument {
  id                String    @id @default(cuid())
  candidateId       String
  documentType      String
  documentUrl       String
  documentName      String
  uploadedAt        DateTime  @default(now())
  verifiedAt        DateTime?
  verifiedBy        String?
  verificationNotes String?
  isValid           Boolean   @default(false)
  expiresAt         DateTime?
  requestedAt       DateTime?
  requestedBy       String?
  candidate         Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@index([candidateId])
  @@index([documentType])
  @@index([verifiedAt])
}

model CandidateRegistration {
  id                        String                      @id @default(cuid())
  userId                    String
  registrationId            String                      @unique
  firstName                 String
  lastName                  String
  email                     String
  phone                     String
  street                    String
  city                      String
  state                     String
  zipCode                   String
  district                  String?
  positionTitle             String
  positionLevel             String
  positionDistrict          String?
  electionDate              DateTime
  campaignName              String
  campaignWebsite           String?
  campaignSlogan            String?
  campaignDescription       String?
  status                    CandidateRegistrationStatus @default(PENDING_VERIFICATION)
  officeLevel               String
  registrationFee           Float
  originalFee               Float
  feeWaiverStatus           String                      @default("none")
  hasFinancialHardship      Boolean                     @default(false)
  hardshipReason            String?
  communityEndorsementCount Int                         @default(0)
  idmeVerified              Boolean                     @default(false)
  idmeUserId                String?
  idmeVerifiedAt            DateTime?
  verifiedFirstName         String?
  verifiedLastName          String?
  verifiedEmail             String?
  paidAt                    DateTime?
  paymentMethod             String?
  paymentIntentId           String?
  verifiedAt                DateTime?
  verifiedBy                String?
  verificationNotes         String?
  rejectedAt                DateTime?
  rejectedBy                String?
  rejectionReason           String?
  refundIssued              Boolean                     @default(false)
  termsAcceptedAt           DateTime
  withdrawnAt               DateTime?
  withdrawalReason          String?
  refundProcessedAt         DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment                   Payment?

  @@index([userId])
  @@index([registrationId])
  @@index([status])
  @@index([officeLevel, state])
  @@index([electionDate])
  @@index([feeWaiverStatus])
  @@index([hasFinancialHardship])
  @@index([createdAt])
}

model SecurityEvent {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  ipAddress String?
  userAgent String?
  details   Json?
  riskScore Int      @default(0)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([riskScore])
}

model ReputationEvent {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  eventType String
  impact    Float
  reason    String?
  details   Json?
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([eventType])
  @@index([createdAt])
}

model Petition {
  id                String              @id @default(cuid())
  title             String
  description       String
  petitionType      PetitionType        @default(PETITION)
  category          IssueCategory
  geographicScope   GeographicScope
  targetOfficials   String[]            @default([])
  signatureGoal     Int
  currentSignatures Int                 @default(0)
  status            PetitionStatus      @default(ACTIVE)
  location          Json?
  createdBy         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  expiresAt         DateTime?
  creator           User                @relation("PetitionCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  signatures        PetitionSignature[]

  @@index([category, geographicScope])
  @@index([status, createdAt])
  @@index([createdBy])
}

model PetitionSignature {
  id         String   @id @default(cuid())
  petitionId String
  userId     String
  signedAt   DateTime @default(now())
  isVerified Boolean  @default(false)
  ipAddress  String?
  petition   Petition @relation(fields: [petitionId], references: [id], onDelete: Cascade)
  user       User     @relation("PetitionSignatures", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([petitionId, userId])
  @@index([petitionId])
  @@index([userId])
}

model CivicEvent {
  id            String        @id @default(cuid())
  title         String
  description   String
  eventType     EventType
  category      EventCategory
  scheduledDate DateTime
  endDate       DateTime?
  timeZone      String?       @default("America/New_York")
  location      Json
  capacity      Int?
  isVirtual     Boolean       @default(false)
  virtualLink   String?
  organizerInfo Json
  requirements  String?
  status        EventStatus   @default(SCHEDULED)
  isPublic      Boolean       @default(true)
  rsvpRequired  Boolean       @default(false)
  currentRSVPs  Int           @default(0)
  createdBy     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  creator       User          @relation("EventCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  rsvps         EventRSVP[]

  @@index([eventType, category])
  @@index([scheduledDate, status])
  @@index([createdBy])
  @@index([location])
}

model EventRSVP {
  id         String     @id @default(cuid())
  eventId    String
  userId     String
  rsvpStatus RSVPStatus @default(ATTENDING)
  rsvpedAt   DateTime   @default(now())
  event      CivicEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User       @relation("EventRSVPs", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model UserOAuthProvider {
  id           String        @id @default(cuid())
  userId       String
  provider     OAuthProvider
  providerId   String
  email        String?
  name         String?
  picture      String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@index([userId])
  @@index([provider, providerId])
}

model Payment {
  id                      String                 @id @default(cuid())
  userId                  String
  amount                  Int
  currency                String                 @default("USD")
  type                    PaymentType
  status                  PaymentStatus          @default(PENDING)
  stripePaymentIntentId   String?                @unique
  stripeChargeId          String?                @unique
  stripeCustomerId        String?
  paymentMethodType       String?
  taxDeductible           Boolean                @default(false)
  taxYear                 Int?
  description             String?
  metadata                Json?
  failureReason           String?
  feeType                 FeeType?
  candidateRegistrationId String?                @unique
  donationType            DonationType?
  campaignId              String?
  isRecurring             Boolean                @default(false)
  recurringInterval       RecurringInterval?
  receiptUrl              String?
  receiptNumber           String?                @unique
  receiptSent             Boolean                @default(false)
  receiptSentAt           DateTime?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  processedAt             DateTime?
  refundedAt              DateTime?
  candidateRegistration   CandidateRegistration? @relation(fields: [candidateRegistrationId], references: [id])
  user                    User                   @relation(fields: [userId], references: [id])
  refunds                 Refund[]

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([stripeCustomerId])
  @@index([createdAt])
}

model StripeCustomer {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  email            String
  name             String?
  phone            String?
  address          Json?
  taxId            String?
  taxExempt        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@index([stripeCustomerId])
}

model DonationCampaign {
  id            String    @id @default(cuid())
  name          String
  description   String?
  goal          Int?
  raised        Int       @default(0)
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  featured      Boolean   @default(false)
  taxDeductible Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([isActive])
  @@index([featured])
}

model Refund {
  id             String       @id @default(cuid())
  paymentId      String
  amount         Int
  reason         RefundReason
  status         RefundStatus @default(PENDING)
  stripeRefundId String?      @unique
  notes          String?
  processedBy    String?
  createdAt      DateTime     @default(now())
  processedAt    DateTime?
  payment        Payment      @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([status])
}

model PaymentWebhook {
  id            String    @id @default(cuid())
  stripeEventId String    @unique
  eventType     String
  processed     Boolean   @default(false)
  payload       Json
  error         String?
  createdAt     DateTime  @default(now())
  processedAt   DateTime?

  @@index([stripeEventId])
  @@index([processed])
}

model UnifiedMessage {
  id             String             @id @default(cuid())
  type           UnifiedMessageType
  senderId       String
  recipientId    String
  content        String
  conversationId String?
  isRead         Boolean            @default(false)
  metadata       Json?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([type])
  @@index([senderId])
  @@index([recipientId])
  @@index([conversationId])
  @@index([createdAt])
  @@index([type, senderId, recipientId])
}

model ConversationMeta {
  id            String             @id @default(cuid())
  type          UnifiedMessageType
  participants  String[]
  lastMessageAt DateTime
  unreadCount   Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([type])
  @@index([participants])
  @@index([lastMessageAt])
}

model PolicyCategory {
  id           String           @id @default(cuid())
  name         String
  description  String?
  icon         String?
  displayOrder Int              @default(0)
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  positions    PolicyPosition[]

  @@index([displayOrder])
  @@index([isActive])
}

model PolicyPosition {
  id                  String             @id @default(cuid())
  candidateId         String
  categoryId          String
  title               String
  summary             String
  content             String
  stance              PolicyStance?
  priority            Int                @default(5)
  evidenceLinks       String[]           @default([])
  keyPoints           String[]           @default([])
  embedding           Float[]            @default([])
  isPublished         Boolean            @default(false)
  publishedAt         DateTime?
  version             Int                @default(1)
  previousVersionId   String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  aiExtractedKeywords String[]           @default([])
  aiExtractedCategory String?
  aiExtractedStance   String?
  aiGeneratedSummary  String?
  aiProcessedAt       DateTime?
  comparisons1        PolicyComparison[] @relation("Position1")
  comparisons2        PolicyComparison[] @relation("Position2")
  candidate           Candidate          @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  category            PolicyCategory     @relation(fields: [categoryId], references: [id])
  previousVersion     PolicyPosition?    @relation("PolicyVersions", fields: [previousVersionId], references: [id])
  versions            PolicyPosition[]   @relation("PolicyVersions")

  @@unique([candidateId, categoryId, version])
  @@index([candidateId])
  @@index([categoryId])
  @@index([isPublished])
  @@index([priority])
}

model PolicyComparison {
  id              String          @id @default(cuid())
  position1Id     String
  position2Id     String
  similarityScore Float
  agreementLevel  AgreementLevel?
  keyDifferences  String[]        @default([])
  analysisNotes   String?
  lastAnalyzed    DateTime        @default(now())
  position1       PolicyPosition  @relation("Position1", fields: [position1Id], references: [id], onDelete: Cascade)
  position2       PolicyPosition  @relation("Position2", fields: [position2Id], references: [id], onDelete: Cascade)

  @@unique([position1Id, position2Id])
  @@index([similarityScore])
}

model MessageOfTheDay {
  id             String          @id @default(cuid())
  title          String?
  content        String
  isActive       Boolean         @default(false)
  startDate      DateTime?
  endDate        DateTime?
  showToNewUsers Boolean         @default(true)
  createdById    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  dismissals     MOTDDismissal[]
  views          MOTDView[]
  createdBy      User            @relation("CreatedMOTDs", fields: [createdById], references: [id])

  @@index([isActive, startDate, endDate])
  @@index([createdAt])
}

model MOTDDismissal {
  id             String          @id @default(cuid())
  motdId         String
  userId         String?
  dismissalToken String?
  dismissedAt    DateTime        @default(now())
  motd           MessageOfTheDay @relation(fields: [motdId], references: [id], onDelete: Cascade)
  user           User?           @relation("DismissedMOTDs", fields: [userId], references: [id])

  @@unique([motdId, userId])
  @@unique([motdId, dismissalToken])
  @@index([userId])
  @@index([dismissalToken])
}

model MOTDView {
  id        String          @id @default(cuid())
  motdId    String
  userId    String?
  viewedAt  DateTime        @default(now())
  ipAddress String?
  userAgent String?
  motd      MessageOfTheDay @relation(fields: [motdId], references: [id], onDelete: Cascade)
  user      User?           @relation("ViewedMOTDs", fields: [userId], references: [id])

  @@index([motdId, viewedAt])
  @@index([userId, viewedAt])
}

model MOTDLog {
  id            String   @id @default(cuid())
  motdId        String
  action        String
  changes       Json?
  performedById String
  performedAt   DateTime @default(now())
  notes         String?
  performedBy   User     @relation("MOTDActions", fields: [performedById], references: [id])

  @@index([motdId, performedAt])
  @@index([performedById])
}

enum ActivityType {
  POST_CREATED
  POST_EDITED
  POST_DELETED
  COMMENT_CREATED
  COMMENT_EDITED
  COMMENT_DELETED
  LIKE_ADDED
  LIKE_REMOVED
  REACTION_CHANGED
  SHARE_ADDED
  SHARE_REMOVED
  FOLLOW_ADDED
  FOLLOW_REMOVED
}

enum ReactionSentiment {
  LIKE
  DISLIKE
}

enum ReactionStance {
  AGREE
  DISAGREE
}

enum ShareType {
  SIMPLE
  QUOTE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  VERIFICATION_APPROVED
  VERIFICATION_DENIED
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  PHOTO_TAG_REQUEST
  PHOTO_TAG_APPROVED
  PHOTO_TAG_DECLINED
  PRIVACY_REQUEST
  REACTION
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum PoliticalProfileType {
  CITIZEN
  CANDIDATE
  ELECTED_OFFICIAL
  POLITICAL_ORG
}

enum VerificationStatus {
  PENDING
  APPROVED
  DENIED
  NOT_REQUIRED
}

enum ElectionType {
  PRIMARY
  GENERAL
  SPECIAL
  LOCAL
  RUNOFF
}

enum ElectionLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum OfficeLevel {
  FEDERAL
  STATE
  LOCAL
  MUNICIPAL
}

enum BallotMeasureType {
  PROPOSITION
  BOND_MEASURE
  CONSTITUTIONAL_AMENDMENT
  INITIATIVE
  REFERENDUM
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

enum ReportTargetType {
  POST
  COMMENT
  USER
  MESSAGE
  CANDIDATE
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  FAKE_ACCOUNT
  IMPERSONATION
  COPYRIGHT_VIOLATION
  VIOLENCE_THREATS
  SELF_HARM
  ILLEGAL_CONTENT
  FRAUDULENT_CANDIDACY
  EXTREMIST_POSITIONS
  ELECTION_FRAUD
  CAMPAIGN_VIOLATIONS
  OTHER
}

enum ReportStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  DISMISSED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ModerationAction {
  NO_ACTION
  WARNING_ISSUED
  CONTENT_HIDDEN
  CONTENT_DELETED
  USER_WARNED
  USER_SUSPENDED
  USER_BANNED
  APPEAL_APPROVED
  APPEAL_DENIED
}

enum ContentType {
  POST
  COMMENT
  USER_PROFILE
  MESSAGE
  CANDIDATE
}

enum FlagType {
  SPAM
  TOXICITY
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_LANGUAGE
  FAKE_ENGAGEMENT
  DUPLICATE_CONTENT
  SUSPICIOUS_ACTIVITY
  POTENTIAL_BRIGADING
}

enum CandidateStatus {
  ACTIVE
  SUSPENDED
  ENDED
  REVOKED
  BANNED
  WITHDRAWN
}

enum AdminMessageType {
  SUPPORT_REQUEST
  STATUS_INQUIRY
  TECHNICAL_ISSUE
  POLICY_QUESTION
  FEATURE_REQUEST
  APPEAL_MESSAGE
  GENERAL
}

enum AdminMessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum FlagSource {
  AUTOMATED
  USER_REPORT
  MANUAL_REVIEW
}

enum WarningSeverity {
  MINOR
  MODERATE
  MAJOR
  FINAL
}

enum SuspensionType {
  TEMPORARY
  PERMANENT
  POSTING_RESTRICTED
  COMMENTING_RESTRICTED
}

enum AppealStatus {
  PENDING
  APPROVED
  DENIED
}

enum PhotoType {
  AVATAR
  COVER
  CAMPAIGN
  VERIFICATION
  EVENT
  GALLERY
  POST_MEDIA
}

enum PhotoPurpose {
  PERSONAL
  CAMPAIGN
  BOTH
}

enum PhotoTagStatus {
  PENDING
  APPROVED
  DECLINED
  REMOVED
}

enum PhotoPrivacyRequestType {
  REMOVE_TAG
  REMOVE_PHOTO
  BLOCK_FUTURE
}

enum PhotoPrivacyRequestStatus {
  PENDING
  APPROVED
  DECLINED
  RESOLVED
}

enum StaffRole {
  CAMPAIGN_MANAGER
  COMMUNICATIONS_DIRECTOR
  POLICY_ADVISOR
  VOLUNTEER_COORDINATOR
  VOLUNTEER
  INTERN
}

enum StaffPermission {
  READ_INQUIRIES
  RESPOND_INQUIRIES
  ASSIGN_INQUIRIES
  MANAGE_STAFF
  MANAGE_SETTINGS
  PUBLISH_QA
  MODERATE_QA
}

enum InquiryCategory {
  GENERAL
  HEALTHCARE
  EDUCATION
  ECONOMY
  ENVIRONMENT
  IMMIGRATION
  FOREIGN_POLICY
  CRIMINAL_JUSTICE
  INFRASTRUCTURE
  HOUSING
  LABOR
  TECHNOLOGY
  CIVIL_RIGHTS
  BUDGET_TAXES
  ENERGY
  AGRICULTURE
  VETERANS
  SENIORS
  YOUTH
  FAMILY_VALUES
  OTHER
}

enum InquiryPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CANDIDATE
  RESOLVED
  CLOSED
  ARCHIVED
}

enum ResponseType {
  DIRECT
  PUBLIC_QA
  POLICY_STATEMENT
  REFERRAL
}

enum VoteType {
  UPVOTE
  DOWNVOTE
  REPORT
}

enum CandidateRegistrationStatus {
  PENDING_VERIFICATION
  PENDING_PAYMENT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  REFUNDED
}

enum DistrictType {
  CONGRESSIONAL
  STATE_SENATE
  STATE_HOUSE
  COUNTY
  MUNICIPAL
  SCHOOL
  WATER
  FIRE
  LIBRARY
  HOSPITAL
  TRANSIT
  CONSERVATION
  JUDICIAL
  TOWNSHIP
  PRECINCT
  OTHER_SPECIAL
}

enum DistrictLevel {
  FEDERAL
  STATE
  COUNTY
  MUNICIPAL
  SPECIAL
  LOCAL
}

enum VerificationLevel {
  UNVERIFIED
  COMMUNITY_VERIFIED
  MODERATOR_VERIFIED
  OFFICIAL_VERIFIED
  DISPUTED
}

enum ConflictType {
  BOUNDARY_DISPUTE
  OFFICE_HOLDER_DISPUTE
  ELECTION_DATE_DISPUTE
  CONTACT_INFO_DISPUTE
  TERM_LENGTH_DISPUTE
  DUPLICATE_ENTRY
  OUTDATED_INFO
}

enum ConflictStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ConflictPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum LegislatureLevel {
  FEDERAL
  STATE
  LOCAL
}

enum Chamber {
  HOUSE
  SENATE
  UNICAMERAL
}

enum VotePosition {
  YEA
  NAY
  PRESENT
  NOT_VOTING
  ABSTAIN
}

enum BillStatus {
  INTRODUCED
  COMMITTEE
  FLOOR_VOTE
  PASSED_CHAMBER
  SENT_TO_OTHER_CHAMBER
  PASSED_BOTH
  SENT_TO_EXECUTIVE
  SIGNED
  VETOED
  BECAME_LAW
  DIED
}

enum NewsSourceType {
  NEWSPAPER
  MAGAZINE
  BLOG
  PRESS_RELEASE
  GOVERNMENT
  SOCIAL_MEDIA
  WIRE_SERVICE
  BROADCAST
}

enum ArticleSentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
  MIXED
}

enum PetitionType {
  PETITION
  REFERENDUM
}

enum IssueCategory {
  HEALTHCARE
  EDUCATION
  ENVIRONMENT
  ECONOMY
  INFRASTRUCTURE
  PUBLIC_SAFETY
  HOUSING
  TRANSPORTATION
  TECHNOLOGY
  CIVIL_RIGHTS
  IMMIGRATION
  ENERGY
  AGRICULTURE
  VETERANS
  SENIORS
  YOUTH
  LABOR
  GOVERNMENT_REFORM
  OTHER
}

enum GeographicScope {
  LOCAL
  COUNTY
  STATE
  NATIONAL
  REGIONAL
}

enum PetitionStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CLOSED
  UNDER_REVIEW
}

enum EventType {
  TOWN_HALL
  CANDIDATE_FORUM
  DEBATE
  RALLY
  PROTEST
  MARCH
  VOTER_REGISTRATION
  ISSUE_FORUM
  COMMUNITY_MEETING
  WORKSHOP
  EDUCATIONAL_SEMINAR
  FUNDRAISER
  VOLUNTEER_DRIVE
  PETITION_DRIVE
  PHONE_BANK
  CANVASSING
  OTHER
}

enum EventCategory {
  ELECTORAL
  CIVIC_ENGAGEMENT
  ORGANIZING_ACTIVITIES
  EDUCATIONAL
  ADVOCACY
  FUNDRAISING
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum RSVPStatus {
  ATTENDING
  MAYBE
  NOT_ATTENDING
}

enum OAuthProvider {
  GOOGLE
  MICROSOFT
  APPLE
}

enum PaymentType {
  DONATION
  FEE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIAL_REFUNDED
}

enum FeeType {
  CANDIDATE_REGISTRATION
  VERIFICATION_FEE
  PREMIUM_FEATURES
  EVENT_HOSTING
  ADVERTISING
  OTHER
}

enum DonationType {
  ONE_TIME
  RECURRING
  CAMPAIGN_SPECIFIC
  GENERAL_SUPPORT
  MEMORIAL
  HONOR
}

enum RecurringInterval {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum RefundReason {
  DUPLICATE
  FRAUDULENT
  REQUESTED_BY_CUSTOMER
  CAMPAIGN_CANCELLED
  ERROR
  OTHER
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum UnifiedMessageType {
  USER_USER
  ADMIN_CANDIDATE
  USER_CANDIDATE
}

enum PolicyStance {
  SUPPORT
  OPPOSE
  NEUTRAL
  CONDITIONAL
}

enum AgreementLevel {
  AGREE
  DISAGREE
  PARTIAL
  UNCLEAR
}

// Civic Engagement Quest System
model Quest {
  id                String              @id @default(cuid())
  type              QuestType
  category          QuestCategory
  title             String
  description       String              @db.Text
  shortDescription  String?             // For display in quest lists
  requirements      Json                // Flexible requirement definition
  rewards           Json                // Points, badges, reputation
  timeframe         QuestTimeframe
  displayOrder      Int                 @default(0)
  isActive          Boolean             @default(true)
  startDate         DateTime?           // For special events
  endDate           DateTime?           // For limited-time quests
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdBy         String?             // Admin who created it
  userProgress      UserQuestProgress[]

  @@index([type])
  @@index([isActive])
  @@index([startDate, endDate])
}

model UserQuestProgress {
  id          String    @id @default(cuid())
  userId      String
  questId     String
  progress    Json      // Current progress state
  completed   Boolean   @default(false)
  completedAt DateTime?
  startedAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest       Quest     @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
  @@index([userId])
  @@index([questId])
  @@index([completed])
}

model UserQuestStreak {
  id                 String   @id @default(cuid())
  userId             String   @unique
  currentDailyStreak Int      @default(0)
  longestDailyStreak Int      @default(0)
  currentWeeklyStreak Int     @default(0)
  longestWeeklyStreak Int     @default(0)
  lastCompletedDate  DateTime?
  totalQuestsCompleted Int    @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Badge System
model Badge {
  id                    String      @id @default(cuid())
  name                  String      @unique
  description           String      @db.Text
  imageUrl              String      // URL to badge image in Azure Storage
  qualificationCriteria Json        // Flexible criteria object
  displayOrder          Int         @default(0)
  isActive              Boolean     @default(true)
  isAutoAwarded         Boolean     @default(true) // Whether system auto-awards or admin manual only
  maxAwards             Int?        // Optional limit on how many can be awarded
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  createdBy             String?     // Admin who created it
  userBadges            UserBadge[]

  @@index([isActive])
  @@index([name])
}

model UserBadge {
  id           String   @id @default(cuid())
  userId       String
  badgeId      String
  earnedAt     DateTime @default(now())
  isDisplayed  Boolean  @default(false) // Whether user chose to display it
  displayOrder Int?     // User's personal ordering for displayed badges
  awardedBy    String?  // Admin ID if manually awarded
  awardReason  String?  // Optional reason for manual awards
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge        Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([isDisplayed])
}

enum QuestType {
  DAILY_HABIT
  DAILY_CIVIC
  WEEKLY_ENGAGEMENT
  MONTHLY_CONSISTENCY
  SPECIAL_EVENT
  CIVIC_ACTION
  EDUCATIONAL
  SOCIAL_ENGAGEMENT
}

enum QuestCategory {
  INFORMATION
  PARTICIPATION
  COMMUNITY
  ADVOCACY
  EDUCATION
  SOCIAL
}

enum QuestTimeframe {
  DAILY
  WEEKLY
  MONTHLY
  ONGOING
  LIMITED_TIME
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
  REVIEW_REQUIRED
}

enum ModerationCategory {
  SAFE
  INAPPROPRIATE
  ADULT_CONTENT
  VIOLENCE
  HATE_SPEECH
  SPAM
  COPYRIGHT
  POLITICAL_DISINFORMATION
  PERSONAL_INFORMATION
  OTHER
}

enum ModerationDecision {
  APPROVE
  REJECT
  FLAG_FOR_REVIEW
  REQUIRE_BLUR
  REQUIRE_WARNING
}
