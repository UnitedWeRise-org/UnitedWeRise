// Add these models to your existing schema.prisma file

model ReputationScore {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  
  // Public and internal scores
  publicScore       Int      @default(600) // 300-900 range
  internalMu        Float    @default(0)   // Unbounded latent score
  internalMuSerious Float?   @default(0)   // Slow-decay bucket for serious violations
  
  // Factor scores (0-100 each)
  civilityFactor    Float    @default(75)
  accuracyFactor    Float    @default(75)
  helpfulnessFactor Float    @default(50)
  tenureFactor      Float    @default(10)
  diversityFactor   Float    @default(50)
  riskFactor        Float    @default(100)
  
  createdAt         DateTime @default(now())
  
  @@index([userId, createdAt])
}

model ReputationEvent {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  
  factor         String   // civility, accuracy, helpfulness, tenure, diversity, risk
  deltaRequested Float    // What was requested
  deltaApplied   Float    // What was actually applied (after caps)
  reason         String   // Human-readable reason
  validated      Boolean  @default(false)
  
  scoreBefore    Int
  scoreAfter     Int
  
  metadata       Json?    // Additional context
  createdAt      DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([factor])
}

model ReputationEventQueue {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  
  factor       String
  delta        Float
  reason       String
  validated    Boolean @default(false)
  metadata     Json?
  
  scheduledFor DateTime
  processed    Boolean  @default(false)
  processedAt  DateTime?
  
  createdAt    DateTime @default(now())
  
  @@index([scheduledFor, processed])
  @@index([userId])
}

model CommunityNote {
  id           String   @id @default(cuid())
  authorId     String
  author       User     @relation(fields: [authorId], references: [id])
  postId       String
  post         Post     @relation(fields: [postId], references: [id])
  
  content      String
  status       String   @default("pending") // pending, helpful, not_helpful, removed
  
  // Diversity validation
  diversityScore     Float?
  topicSpread        Float?
  interactionMix     Float?
  networkDistance    Float?
  timeSpread         Float?
  
  // Wilson score for helpfulness
  wilsonLowerBound   Float    @default(0)
  helpfulVotes       Int      @default(0)
  notHelpfulVotes    Int      @default(0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  votes        CommunityNoteVote[]
  
  @@index([postId])
  @@index([authorId])
  @@index([status])
}

model CommunityNoteVote {
  id        String   @id @default(cuid())
  noteId    String
  note      CommunityNote @relation(fields: [noteId], references: [id])
  voterId   String
  voter     User     @relation(fields: [voterId], references: [id])
  
  helpful   Boolean  // true = helpful, false = not helpful
  voterScore Int     // Voter's reputation at time of vote
  
  createdAt DateTime @default(now())
  
  @@unique([noteId, voterId])
  @@index([noteId])
  @@index([voterId])
}

model ContentWarning {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  
  content   String   @db.Text // The content that triggered warning
  tags      String[] // AI-detected issues
  severity  Float    // 0-1 severity score
  
  shown     Boolean  @default(true)
  bypassed  Boolean  @default(false) // User posted anyway
  edited    Boolean  @default(false) // User edited to fix
  
  potentialImpact Int // Reputation points at risk
  actualImpact    Int? // Actual impact after validation
  
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([postId])
  @@index([bypassed])
}

// Update User model (add these fields)
model User {
  // ... existing fields ...
  
  // Reputation related
  reputationScores      ReputationScore[]
  reputationEvents      ReputationEvent[]
  reputationEventQueue  ReputationEventQueue[]
  communityNotes        CommunityNote[]
  communityNoteVotes    CommunityNoteVote[]
  contentWarnings       ContentWarning[]
  
  // Current reputation tier (cached for performance)
  reputationTier        String?  @default("bronze") // gold, silver, bronze, watch, low
  reputationBadge       String?  @default("")
  
  // ... rest of existing fields ...
}

// Update Post model (add these fields)
model Post {
  // ... existing fields ...
  
  // Community moderation
  communityNotes    CommunityNote[]
  contentWarnings   ContentWarning[]
  
  // Cached reputation of author at post time
  authorReputation  Int?
  
  // ... rest of existing fields ...
}