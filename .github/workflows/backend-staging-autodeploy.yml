name: Backend Auto-Deploy to Staging

on:
  push:
    branches:
      - development
    paths:
      - 'backend/**'
      - '.github/workflows/backend-staging-autodeploy.yml'

jobs:
  deploy-backend-staging:
    runs-on: ubuntu-latest
    name: Deploy Backend to Staging Environment
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build Docker Image in ACR
        env:
          AZURE_REGISTRY: uwracr2425
        run: |
          set -e

          echo "üöÄ Starting backend deployment to STAGING"
          echo "Branch: development"
          echo "Commit: ${{ github.sha }}"
          echo "Timestamp: $(date)"

          # Get short commit SHA
          GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          DOCKER_TAG="backend-dev-${GIT_SHA}-$(date +%Y%m%d-%H%M%S)"

          echo "üè∑Ô∏è Docker tag: $DOCKER_TAG"

          # Build Docker image in ACR
          echo "üî® Building Docker image in Azure Container Registry..."
          az acr build --registry $AZURE_REGISTRY \
            --image "unitedwerise-backend:$DOCKER_TAG" \
            --no-wait \
            https://github.com/${{ github.repository }}.git#development:backend

          echo "‚è≥ Waiting 180 seconds for build to complete..."
          sleep 180

          # Check build status
          echo "üìä Checking build status..."
          az acr task list-runs --registry $AZURE_REGISTRY --output table | head -3

          # Get image digest
          echo "üîç Getting image digest..."
          DIGEST=$(az acr repository show --name $AZURE_REGISTRY \
            --image "unitedwerise-backend:$DOCKER_TAG" \
            --query "digest" -o tsv)

          echo "‚úÖ Image digest: $DIGEST"

          # Save variables for next steps
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Setup Node.js for Database Migrations
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Prisma CLI
        run: |
          cd backend
          npm install prisma@latest --no-save

      - name: Run Database Migrations (Staging)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}
        run: |
          cd backend

          echo "üìä Checking migration status on STAGING database..."
          npx prisma migrate status || true

          echo ""
          echo "üîÑ Applying pending migrations to STAGING..."
          npx prisma migrate deploy

          echo ""
          echo "‚úÖ Verifying migrations applied..."
          npx prisma migrate status

          if npx prisma migrate status | grep -q "Database schema is up to date"; then
            echo "‚úÖ All migrations successfully applied to STAGING!"
          else
            echo "‚ùå Migration verification failed!"
            echo "‚ö†Ô∏è  Aborting deployment - database schema mismatch"
            exit 1
          fi

      - name: Deploy to Container App (Staging)
        env:
          AZURE_REGISTRY: uwracr2425
          AZURE_RESOURCE_GROUP: unitedwerise-rg
          AZURE_CONTAINER_APP: unitedwerise-backend-staging
        run: |
          # Deploy to Container App using saved environment variables
          echo "üöÄ Deploying to Azure Container App (staging)..."
          echo "Image: ${AZURE_REGISTRY}.azurecr.io/unitedwerise-backend@${DIGEST}"

          az containerapp update \
            --name $AZURE_CONTAINER_APP \
            --resource-group $AZURE_RESOURCE_GROUP \
            --image "${AZURE_REGISTRY}.azurecr.io/unitedwerise-backend@${DIGEST}" \
            --revision-suffix "stg-${GIT_SHA}-$(date +%H%M%S)" \
            --set-env-vars \
              NODE_ENV=staging \
              STAGING_ENVIRONMENT=true \
              RELEASE_SHA=$GIT_SHA \
              RELEASE_DIGEST=$DIGEST

          # Force single revision mode
          echo "üîß Setting single revision mode..."
          az containerapp update \
            --name $AZURE_CONTAINER_APP \
            --resource-group $AZURE_RESOURCE_GROUP \
            --revision-mode Single

          echo "‚è≥ Waiting 30 seconds for container to start..."
          sleep 30

          # Verify deployment
          echo "‚úÖ Verifying deployment..."
          HEALTH_RESPONSE=$(curl -s "https://dev-api.unitedwerise.org/health")
          echo "Health check response: $HEALTH_RESPONSE"

          # Check if deployed SHA matches
          DEPLOYED_SHA=$(echo $HEALTH_RESPONSE | grep -o '"releaseSha":"[^"]*"' | cut -d'"' -f4)
          echo "Expected SHA: $GIT_SHA"
          echo "Deployed SHA: $DEPLOYED_SHA"

          if [ "$DEPLOYED_SHA" = "$GIT_SHA" ]; then
            echo "‚úÖ Deployment successful! Staging backend is running correct code."
          else
            echo "‚ö†Ô∏è Warning: Deployed SHA doesn't match expected SHA"
            echo "Deployment may still be starting up..."
          fi

          echo "üéâ Staging deployment complete!"
          echo "üîó Backend: https://dev-api.unitedwerise.org"
          echo "üîó Frontend: https://dev.unitedwerise.org"
